// Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.
import init, { source, create_hash as createHash, update_hash as updateHash, digest_hash as digestHash } from "./wasm.js";
import * as hex from "../../encoding/hex.ts";
import * as base64 from "../../encoding/base64.ts";
await init(source);
const TYPE_ERROR_MSG = "hash: `data` is invalid type";
export class Hash {
    #hash;
    #digested;
    constructor(algorithm){
        this.#hash = createHash(algorithm);
        this.#digested = false;
    }
    /**
   * Update internal state
   * @param data data to update
   */ update(data) {
        let msg;
        if (typeof data === "string") {
            msg = new TextEncoder().encode(data);
        } else if (typeof data === "object") {
            if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
                msg = new Uint8Array(data);
            } else {
                throw new Error(TYPE_ERROR_MSG);
            }
        } else {
            throw new Error(TYPE_ERROR_MSG);
        }
        updateHash(this.#hash, msg);
        return this;
    }
    /** Returns final hash */ digest() {
        if (this.#digested) throw new Error("hash: already digested");
        this.#digested = true;
        return digestHash(this.#hash);
    }
    /**
   * Returns hash as a string of given format
   * @param format format of output string (hex or base64). Default is hex
   */ toString(format = "hex") {
        const finalized = new Uint8Array(this.digest());
        switch(format){
            case "hex":
                return hex.encodeToString(finalized);
            case "base64":
                return base64.encode(finalized);
            default:
                throw new Error("hash: invalid format");
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjY3LjAvaGFzaC9fd2FzbS9oYXNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjAgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCBpbml0LCB7XG4gIHNvdXJjZSxcbiAgY3JlYXRlX2hhc2ggYXMgY3JlYXRlSGFzaCxcbiAgdXBkYXRlX2hhc2ggYXMgdXBkYXRlSGFzaCxcbiAgZGlnZXN0X2hhc2ggYXMgZGlnZXN0SGFzaCxcbiAgRGVub0hhc2gsXG59IGZyb20gXCIuL3dhc20uanNcIjtcblxuaW1wb3J0ICogYXMgaGV4IGZyb20gXCIuLi8uLi9lbmNvZGluZy9oZXgudHNcIjtcbmltcG9ydCAqIGFzIGJhc2U2NCBmcm9tIFwiLi4vLi4vZW5jb2RpbmcvYmFzZTY0LnRzXCI7XG5pbXBvcnQgdHlwZSB7IEhhc2hlciwgTWVzc2FnZSwgT3V0cHV0Rm9ybWF0IH0gZnJvbSBcIi4uL2hhc2hlci50c1wiO1xuXG5hd2FpdCBpbml0KHNvdXJjZSk7XG5cbmNvbnN0IFRZUEVfRVJST1JfTVNHID0gXCJoYXNoOiBgZGF0YWAgaXMgaW52YWxpZCB0eXBlXCI7XG5cbmV4cG9ydCBjbGFzcyBIYXNoIGltcGxlbWVudHMgSGFzaGVyIHtcbiAgI2hhc2g6IERlbm9IYXNoO1xuICAjZGlnZXN0ZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoYWxnb3JpdGhtOiBzdHJpbmcpIHtcbiAgICB0aGlzLiNoYXNoID0gY3JlYXRlSGFzaChhbGdvcml0aG0pO1xuICAgIHRoaXMuI2RpZ2VzdGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGludGVybmFsIHN0YXRlXG4gICAqIEBwYXJhbSBkYXRhIGRhdGEgdG8gdXBkYXRlXG4gICAqL1xuICB1cGRhdGUoZGF0YTogTWVzc2FnZSk6IHRoaXMge1xuICAgIGxldCBtc2c6IFVpbnQ4QXJyYXk7XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1zZyA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShkYXRhIGFzIHN0cmluZyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICAgICAgbXNnID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoVFlQRV9FUlJPUl9NU0cpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoVFlQRV9FUlJPUl9NU0cpO1xuICAgIH1cblxuICAgIHVwZGF0ZUhhc2godGhpcy4jaGFzaCwgbXNnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIFJldHVybnMgZmluYWwgaGFzaCAqL1xuICBkaWdlc3QoKTogQXJyYXlCdWZmZXIge1xuICAgIGlmICh0aGlzLiNkaWdlc3RlZCkgdGhyb3cgbmV3IEVycm9yKFwiaGFzaDogYWxyZWFkeSBkaWdlc3RlZFwiKTtcblxuICAgIHRoaXMuI2RpZ2VzdGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZGlnZXN0SGFzaCh0aGlzLiNoYXNoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGhhc2ggYXMgYSBzdHJpbmcgb2YgZ2l2ZW4gZm9ybWF0XG4gICAqIEBwYXJhbSBmb3JtYXQgZm9ybWF0IG9mIG91dHB1dCBzdHJpbmcgKGhleCBvciBiYXNlNjQpLiBEZWZhdWx0IGlzIGhleFxuICAgKi9cbiAgdG9TdHJpbmcoZm9ybWF0OiBPdXRwdXRGb3JtYXQgPSBcImhleFwiKTogc3RyaW5nIHtcbiAgICBjb25zdCBmaW5hbGl6ZWQgPSBuZXcgVWludDhBcnJheSh0aGlzLmRpZ2VzdCgpKTtcblxuICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICBjYXNlIFwiaGV4XCI6XG4gICAgICAgIHJldHVybiBoZXguZW5jb2RlVG9TdHJpbmcoZmluYWxpemVkKTtcbiAgICAgIGNhc2UgXCJiYXNlNjRcIjpcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5lbmNvZGUoZmluYWxpemVkKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImhhc2g6IGludmFsaWQgZm9ybWF0XCIpO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUUxRSxPQUFPLElBQUksSUFDVCxNQUFNLEVBQ04sV0FBVyxJQUFJLFVBQVUsRUFDekIsV0FBVyxJQUFJLFVBQVUsRUFDekIsV0FBVyxJQUFJLFVBQVUsUUFFcEIsV0FBVyxDQUFDO0FBRW5CLFlBQVksR0FBRyxNQUFNLHVCQUF1QixDQUFDO0FBQzdDLFlBQVksTUFBTSxNQUFNLDBCQUEwQixDQUFDO0FBR25ELE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRW5CLE1BQU0sY0FBYyxHQUFHLDhCQUE4QixBQUFDO0FBRXRELE9BQU8sTUFBTSxJQUFJO0lBQ2YsQ0FBQyxJQUFJLENBQVc7SUFDaEIsQ0FBQyxRQUFRLENBQVU7SUFFbkIsWUFBWSxTQUFpQixDQUFFO1FBQzdCLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztLQUN4QjtJQUVEOzs7S0FHRyxDQUNILE1BQU0sQ0FBQyxJQUFhLEVBQVE7UUFDMUIsSUFBSSxHQUFHLEFBQVksQUFBQztRQUVwQixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUM1QixHQUFHLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFXLENBQUM7U0FDaEQsTUFBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNuQyxJQUFJLElBQUksWUFBWSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDM0QsR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzVCLE1BQU07Z0JBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNqQztTQUNGLE1BQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ2pDO1FBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU1QixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQseUJBQXlCLENBQ3pCLE1BQU0sR0FBZ0I7UUFDcEIsSUFBSSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDdEIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0I7SUFFRDs7O0tBR0csQ0FDSCxRQUFRLENBQUMsTUFBb0IsR0FBRyxLQUFLLEVBQVU7UUFDN0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEFBQUM7UUFFaEQsT0FBUSxNQUFNO1lBQ1osS0FBSyxLQUFLO2dCQUNSLE9BQU8sR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2QyxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2xDO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUMzQztLQUNGO0NBQ0YifQ==