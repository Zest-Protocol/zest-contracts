const randomInteger = (minimum, maximum)=>Math.floor(Math.random() * (maximum - minimum + 1) + minimum);
const createAbortError = ()=>{
    const error = new Error('Delay aborted');
    error.name = 'AbortError';
    return error;
};
const createDelay = ({ clearTimout: defaultClear , setTimeout: set , willResolve  })=>(ms, options)=>{
        if (options?.signal && options.signal.aborted) {
            return Promise.reject(createAbortError());
        }
        let timeoutId;
        let settle;
        let rejectFn;
        const clear = defaultClear || clearTimeout;
        const signalListener = ()=>{
            clear(timeoutId);
            rejectFn(createAbortError());
        };
        const cleanup = ()=>{
            if (options?.signal) {
                options?.signal.removeEventListener('abort', signalListener);
            }
        };
        let delayPromise;
        delayPromise = new Promise((resolve, reject)=>{
            settle = ()=>{
                cleanup();
                if (willResolve) {
                    resolve(options?.value);
                } else {
                    reject(options?.value);
                }
            };
            rejectFn = reject;
            timeoutId = (set || setTimeout)(settle, ms);
        });
        if (options?.signal) {
            options?.signal.addEventListener('abort', signalListener, {
                once: true
            });
        }
        delayPromise.clear = ()=>{
            clear(timeoutId);
            timeoutId = null;
            settle();
        };
        return delayPromise;
    };
export let delay;
delay = createDelay({
    willResolve: true
});
delay.reject = createDelay({
    willResolve: false
});
delay.range = (minimum, maximum, options)=>delay(randomInteger(minimum, maximum), options);
delay.createWithTimers = ({ clearTimeout: clearTimeout1 , setTimeout: setTimeout1  })=>{
    delay = createDelay({
        clearTimeout: clearTimeout1,
        setTimeout: setTimeout1,
        willResolve: true
    });
    delay.reject = createDelay({
        clearTimeout: clearTimeout1,
        setTimeout: setTimeout1,
        willResolve: false
    });
    return delay;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZGVsYXlAdjAuMi4wL3NyYy9kZWxheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByYW5kb21JbnRlZ2VyID0gKG1pbmltdW06IG51bWJlciwgbWF4aW11bTogbnVtYmVyKTogbnVtYmVyID0+XG4gIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhpbXVtIC0gbWluaW11bSArIDEpICsgbWluaW11bSk7XG4gIFxuY29uc3QgY3JlYXRlQWJvcnRFcnJvciA9ICgpID0+IHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0RlbGF5IGFib3J0ZWQnKTtcbiAgZXJyb3IubmFtZSA9ICdBYm9ydEVycm9yJztcbiAgcmV0dXJuIGVycm9yO1xufTtcblxuaW50ZXJmYWNlIE9wdGlvbnMge1xuICB2YWx1ZTogYW55O1xuICBzaWduYWw6IEFib3J0U2lnbmFsO1xufVxuXG5jb25zdCBjcmVhdGVEZWxheSA9ICh7XG4gIGNsZWFyVGltb3V0OiBkZWZhdWx0Q2xlYXIsXG4gIHNldFRpbWVvdXQ6IHNldCxcbiAgd2lsbFJlc29sdmUsXG59OiBhbnkpID0+IChtczogbnVtYmVyLCBvcHRpb25zPzogT3B0aW9ucykgPT4ge1xuICBpZiAob3B0aW9ucz8uc2lnbmFsICYmIG9wdGlvbnMuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoY3JlYXRlQWJvcnRFcnJvcigpKTtcbiAgfVxuXG4gIGxldCB0aW1lb3V0SWQ6IGFueTtcbiAgbGV0IHNldHRsZTogYW55O1xuICBsZXQgcmVqZWN0Rm46IGFueTtcbiAgY29uc3QgY2xlYXIgPSBkZWZhdWx0Q2xlYXIgfHwgY2xlYXJUaW1lb3V0O1xuICBcbiAgY29uc3Qgc2lnbmFsTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgY2xlYXIodGltZW91dElkKTtcbiAgICByZWplY3RGbihjcmVhdGVBYm9ydEVycm9yKCkpO1xuICB9O1xuICBcbiAgY29uc3QgY2xlYW51cCA9ICgpID0+IHtcbiAgICBpZiAob3B0aW9ucz8uc2lnbmFsKSB7XG4gICAgICBvcHRpb25zPy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBzaWduYWxMaXN0ZW5lcik7XG4gICAgfVxuICB9O1xuICBcbiAgbGV0IGRlbGF5UHJvbWlzZTogYW55O1xuXG4gIGRlbGF5UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzZXR0bGUgPSAoKSA9PiB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICBpZiAod2lsbFJlc29sdmUpIHtcbiAgICAgICAgcmVzb2x2ZShvcHRpb25zPy52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3Qob3B0aW9ucz8udmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZWplY3RGbiA9IHJlamVjdDtcbiAgICB0aW1lb3V0SWQgPSAoc2V0IHx8IHNldFRpbWVvdXQpKHNldHRsZSwgbXMpO1xuICB9KTtcblxuICBpZiAob3B0aW9ucz8uc2lnbmFsKSB7XG4gICAgb3B0aW9ucz8uc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgc2lnbmFsTGlzdGVuZXIsIHtvbmNlOiB0cnVlfSk7XG4gIH1cbiAgXG4gIGRlbGF5UHJvbWlzZS5jbGVhciA9ICgpID0+IHtcbiAgICBjbGVhcih0aW1lb3V0SWQpO1xuICAgIHRpbWVvdXRJZCA9IG51bGw7XG4gICAgc2V0dGxlKCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlbGF5UHJvbWlzZTtcbn07XG5cbmV4cG9ydCBsZXQgZGVsYXk6IGFueTtcblxuZGVsYXkgPSBjcmVhdGVEZWxheSh7IHdpbGxSZXNvbHZlOiB0cnVlIH0pO1xuZGVsYXkucmVqZWN0ID0gY3JlYXRlRGVsYXkoeyB3aWxsUmVzb2x2ZTogZmFsc2UgfSk7XG5kZWxheS5yYW5nZSA9IChtaW5pbXVtOiBudW1iZXIsIG1heGltdW06IG51bWJlciwgb3B0aW9uczogYW55KSA9PlxuICBkZWxheShyYW5kb21JbnRlZ2VyKG1pbmltdW0sIG1heGltdW0pLCBvcHRpb25zKTtcbmRlbGF5LmNyZWF0ZVdpdGhUaW1lcnMgPSAoeyBjbGVhclRpbWVvdXQsIHNldFRpbWVvdXQgfTogYW55KSA9PiB7XG4gIGRlbGF5ID0gY3JlYXRlRGVsYXkoeyBjbGVhclRpbWVvdXQsIHNldFRpbWVvdXQsIHdpbGxSZXNvbHZlOiB0cnVlIH0pO1xuICBkZWxheS5yZWplY3QgPSBjcmVhdGVEZWxheSh7IGNsZWFyVGltZW91dCwgc2V0VGltZW91dCwgd2lsbFJlc29sdmU6IGZhbHNlIH0pO1xuICByZXR1cm4gZGVsYXk7XG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBZSxFQUFFLE9BQWUsR0FDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxBQUFDO0FBRWhFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBTTtJQUM3QixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsQUFBQztJQUN6QyxLQUFLLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztJQUMxQixPQUFPLEtBQUssQ0FBQztDQUNkLEFBQUM7QUFPRixNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQ25CLFdBQVcsRUFBRSxZQUFZLENBQUEsRUFDekIsVUFBVSxFQUFFLEdBQUcsQ0FBQSxFQUNmLFdBQVcsQ0FBQSxFQUNQLEdBQUssQ0FBQyxFQUFVLEVBQUUsT0FBaUIsR0FBSztRQUM1QyxJQUFJLE9BQU8sRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDN0MsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztTQUMzQztRQUVELElBQUksU0FBUyxBQUFLLEFBQUM7UUFDbkIsSUFBSSxNQUFN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