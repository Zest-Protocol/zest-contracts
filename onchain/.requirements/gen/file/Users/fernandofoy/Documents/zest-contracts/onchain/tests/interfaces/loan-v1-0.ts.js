import { Tx, types } from 'https://deno.land/x/clarinet@v1.0.2/index.ts';
class Loan {
    chain;
    deployer;
    constructor(chain, deployer){
        this.chain = chain;
        this.deployer = deployer;
    }
    getLoanData(loanId) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.loan-v1-0`, "get-loan-read", [
            types.uint(loanId), 
        ], this.deployer.address);
    }
    getRolloverData(loanId) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.loan-v1-0`, "get-rollover-progress-read", [
            types.uint(loanId), 
        ], this.deployer.address);
    }
    getRolloverDataOptional(loanId) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.loan-v1-0`, "get-rollover-progress-optional", [
            types.uint(loanId), 
        ], this.deployer.address);
    }
    getNextpaymentIn(loanId) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.loan-v1-0`, "next-payment-in", [
            types.uint(loanId), 
        ], this.deployer.address);
    }
    canLiquidate(loanId) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.loan-v1-0`, "can-liquidate", [
            types.uint(loanId), 
        ], this.deployer.address);
    }
    drawdown(loanId, blockHeight, collType, collVault, borrower) {
        return this.chain.mineBlock([
            Tx.contractCall(`loan`, "drawdown", [
                types.uint(loanId),
                types.uint(blockHeight),
                types.principal(collType),
                types.principal(collVault), 
            ], borrower)
        ]);
    }
    drawdownVerify(loanId, collToken, collVault, fundingVault, lpToken, tokenId, poolDelegate, delegateFee, swapRouter, xbtc, sender) {
        return this.chain.mineBlock([
            Tx.contractCall(`loan-v1-0`, "drawdown-verify", [
                types.uint(loanId),
                types.principal(collToken),
                types.principal(collVault),
                types.principal(fundingVault),
                types.principal(lpToken),
                types.uint(tokenId),
                types.principal(poolDelegate),
                types.uint(delegateFee),
                types.principal(swapRouter),
                types.principal(xbtc),
                types.principal(sender)
            ], sender)
        ]);
    }
    makePayment(loanId, height, payment, lpToken, amount, borrower) {
        return this.chain.mineBlock([
            Tx.contractCall(`loan-v1-0`, "make-payment", [
                types.uint(loanId),
                types.uint(height),
                types.principal(payment),
                types.principal(lpToken),
                types.uint(amount), 
            ], borrower)
        ]);
    }
    addBorrower(borrower, contractOwner) {
        return this.chain.mineBlock([
            Tx.contractCall(`loan-v1-0`, "add-borrower", [
                types.principal(borrower), 
            ], contractOwner)
        ]);
    }
    isBorrower(borrower, caller) {
        return this.chain.callReadOnlyFn("loan-v1-0", "is-borrower", [
            types.principal(borrower), 
        ], caller);
    }
    liquidate(loanId, collateralVault, poolDelgate) {
        return this.chain.mineBlock([
            Tx.contractCall(`loan`, "liquidate", [
                types.uint(loanId),
                types.principal(collateralVault), 
            ], poolDelgate)
        ]);
    }
    withdrawCollateralLoan(loanId, amount, swapRouter, collToken, xbtc, collateralVault, caller) {
        return this.chain.mineBlock([
            Tx.contractCall(`loan-v1-0`, "withdraw-collateral-loan", [
                types.uint(loanId),
                types.uint(amount),
                types.principal(swapRouter),
                types.principal(collToken),
                types.principal(xbtc),
                types.principal(collateralVault)
            ], caller)
        ]);
    }
    requestRollover(loanId, apr, newAmount, maturityLength, paymentPeriod, collRatio, collType, borrower) {
        return this.chain.mineBlock([
            Tx.contractCall(`loan-v1-0`, "request-rollover", [
                types.uint(loanId),
                apr ? types.some(types.uint(apr)) : types.none(),
                newAmount ? types.some(types.uint(newAmount)) : types.none(),
                maturityLength ? types.some(types.uint(maturityLength)) : types.none(),
                paymentPeriod ? types.some(types.uint(paymentPeriod)) : types.none(),
                collRatio ? types.some(types.uint(collRatio)) : types.none(),
                types.principal(collType), 
            ], borrower)
        ]);
    }
}
export { Loan };
//# sourceMappingURL=data:application/json;base64,