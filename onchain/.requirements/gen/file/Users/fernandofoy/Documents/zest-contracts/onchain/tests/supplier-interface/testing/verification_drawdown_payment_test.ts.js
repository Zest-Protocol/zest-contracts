// deno-lint-ignore-file
import { Clarinet } from 'https://deno.land/x/clarinet@v1.0.3/index.ts';
import { assertEquals } from 'https://deno.land/std@0.159.0/testing/asserts.ts';
import { Pool } from '../../interfaces/pool-v1-0.ts';
import { CoverPool } from '../../interfaces/cover-pool-v1-0.ts';
import { Loan } from '../../interfaces/loan-v1-0.ts';
import { TestUtils } from '../../interfaces/test-utils.ts';
import { Globals } from '../../interfaces/globals.ts';
import { SupplierInterface } from '../../interfaces/supplier_interface.ts';
import { Payment } from '../../interfaces/payment.ts';
import { Magic } from '../../interfaces/magic_real.ts';
import { getHash, getTxId, getExpiration, swapperBuff, generateP2SHTx } from "../util.ts";
import { sendFundsP2SHTxs, registerSupplierTxs, finalizeOutboundTxs, makePaymentTxs, makePaymentVerifyTxs, consumeUint, getBP, finalizeDrawdown } from '../../interfaces/common.ts';
import { LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, LIQUIDITY_VAULT, CP_TOKEN, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, recipient, sender, preimage, SWAP_ROUTER, CP_REWARDS_TOKEN, COVER_VAULT } from "../config.ts";
const MAX_MATURITY_LENGTH = 144 * 365 * 3; // 3 years
Clarinet.test({
    name: "Test drawdown with small amount can only try 3 times",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, "0000000000000000000000000000000000000001", deployerWallet.address);
        block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, "0000000000000000000000000000000000000002", deployerWallet.address);
        block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, "0000000000000000000000000000000000000003", deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        // block = loan.drawdownVerify(0, XBTC, COLL_VAULT, FUNDING_VAULT, LP_TOKEN, 0, wallet_7.address, 1000, SWAP_ROUTER, XBTC, wallet_8.address);
        block = chain.mineBlock([
            SupplierInterface.drawdownVerify(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address),
            SupplierInterface.drawdownVerify(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, "0000000000000000000000000000000000000001", 0, SWAP_ROUTER, XBTC, wallet_8.address),
            SupplierInterface.drawdownVerify(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, "0000000000000000000000000000000000000002", 0, SWAP_ROUTER, XBTC, wallet_8.address),
            SupplierInterface.drawdownVerify(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, "0000000000000000000000000000000000000003", 0, SWAP_ROUTER, XBTC, wallet_8.address), 
        ]);
        const loanWithoutFees = LOAN_AMOUNT - 1000 * 3 - getBP(LOAN_AMOUNT, 30);
        block.receipts[0].result.expectOk().expectTuple()["sats"].expectUint(1000);
        block.receipts[1].result.expectOk().expectTuple()["sats"].expectUint(1000);
        block.receipts[2].result.expectOk().expectTuple()["sats"].expectUint(1000);
        block.receipts[3].result.expectErr().expectUint(4025);
        block = chain.mineBlock([
            ...finalizeOutboundTxs(HASH, 1000, 0, chain.blockHeight - 1, wallet_8.address, deployerWallet.address),
            ...finalizeOutboundTxs("0000000000000000000000000000000000000001", 1000, 1, chain.blockHeight - 1, wallet_8.address, deployerWallet.address),
            ...finalizeOutboundTxs("0000000000000000000000000000000000000002", 1000, 2, chain.blockHeight - 1, wallet_8.address, deployerWallet.address),
            ...finalizeOutboundTxs("0000000000000000000000000000000000000003", 1000, 3, chain.blockHeight - 1, wallet_8.address, deployerWallet.address), 
        ]);
        block.receipts[1].result.expectOk();
        block.receipts[3].result.expectOk();
        block.receipts[5].result.expectOk();
        block.receipts[7].result.expectErr().expectUint(23);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        block.receipts[0].result.expectOk().expectTuple()["sats"].expectUint(loanWithoutFees);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, loanWithoutFees, 0, 28, wallet_8.address, deployerWallet.address)
        ]);
    }
});
Clarinet.test({
    name: "Test drawdown and finalize a test",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = loan.drawdownVerify(0, XBTC, COLL_VAULT, FUNDING_VAULT, LP_TOKEN, 0, wallet_7.address, 1000, SWAP_ROUTER, XBTC, wallet_8.address);
        block = chain.mineBlock([
            SupplierInterface.drawdownVerify(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        block.receipts[0].result.expectOk().expectTuple()["sats"].expectUint(1000);
        block = chain.mineBlock([
            ...finalizeOutboundTxs(HASH, 1000, 0, chain.blockHeight - 1, wallet_8.address, deployerWallet.address)
        ]);
        const loanWithoutFees = LOAN_AMOUNT - 1000 * 1 - getBP(LOAN_AMOUNT, 30);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        block.receipts[0].result.expectOk().expectTuple()["sats"].expectUint(loanWithoutFees);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, loanWithoutFees, 1, chain.blockHeight - 1, wallet_8.address, deployerWallet.address)
        ]);
        block.receipts[1].result.expectOk().expectTuple()["borrow-amount"].expectUint(loanWithoutFees);
    }
});
Clarinet.test({
    name: "Borrower can make a payment verification",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let globals = Globals.getGlobals(chain, deployerWallet.address).expectTuple();
        let cooldownTime = consumeUint(globals["lp-cooldown-period"]);
        let unstakeWindow = consumeUint(globals["lp-unstake-window"]);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, supplierId, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        pool.createLoan(LP_TOKEN, 0, 100_000_000, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 0, 28, wallet_8.address, deployerWallet.address)
        ]);
        chain.mineEmptyBlockUntil(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - 1);
        let prev = chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"];
        let regularPaymentDue = consumeUint(Payment.getCurrentLoanPayment(chain, 0, wallet_8.address));
        let delegateFee = Math.floor(consumeUint(pool.getPool(0)["delegate-fee"]) / 10000 * regularPaymentDue);
        let minPaymentToReceive = Math.floor(regularPaymentDue * fee / 10_000);
        const TEST_PAYMENT = 1000;
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_8.address),
            ...makePaymentVerifyTxs(deployerWallet.address, wallet_8.address, sender, recipient, 500, 1, TEST_PAYMENT, "00", 0, minPaymentToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC),
            ...makePaymentVerifyTxs(deployerWallet.address, wallet_8.address, sender, recipient, 500, 1, TEST_PAYMENT, "01", 0, minPaymentToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC),
            ...makePaymentVerifyTxs(deployerWallet.address, wallet_8.address, sender, recipient, 500, 1, TEST_PAYMENT, "02", 0, minPaymentToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC), 
        ]);
        assertEquals(chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.loan-v1-0"], TEST_PAYMENT * 3);
        const paymentAfterTests = regularPaymentDue - TEST_PAYMENT * 3;
        const tempMinPaymentToReceive = Math.floor(paymentAfterTests * fee / 10_000);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, wallet_8.address, sender, recipient, 500, 1, paymentAfterTests, "03", supplierId, tempMinPaymentToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        assertEquals(chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"], regularPaymentDue - delegateFee);
    }
});
Clarinet.test({
    name: "Borrower can make a payment verification with leaked preimage",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let wallet_9 = accounts.get("wallet_9");
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let globals = Globals.getGlobals(chain, deployerWallet.address).expectTuple();
        let cooldownTime = consumeUint(globals["lp-cooldown-period"]);
        let unstakeWindow = consumeUint(globals["lp-unstake-window"]);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, supplierId, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        pool.createLoan(LP_TOKEN, 0, 100_000_000, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 0, 28, wallet_8.address, deployerWallet.address)
        ]);
        chain.mineEmptyBlockUntil(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - 1);
        let prev = chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"];
        let regularPaymentDue = consumeUint(Payment.getCurrentLoanPayment(chain, 0, wallet_8.address));
        let delegateFee = Math.floor(consumeUint(pool.getPool(0)["delegate-fee"]) / 10000 * regularPaymentDue);
        let minPaymentToReceive = Math.floor(regularPaymentDue * fee / 10_000);
        const TEST_PAYMENT = 1000;
        let expiration = 500;
        let swapperId = 1;
        let outputValue = TEST_PAYMENT;
        let minToReceive = TEST_PAYMENT * fee / 10_000;
        let hash = getHash(preimage);
        let tx1 = generateP2SHTx(sender, recipient, expiration, hash, swapperId, outputValue);
        let txid1 = getTxId(tx1);
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_8.address),
            TestUtils.setMinedTx(txid1, deployerWallet.address),
            // called by different Stacks address
            SupplierInterface.sendFunds({
                header: "",
                height: chain.blockHeight - 1
            }, [], tx1, {
                "tx-index": 0,
                "hashes": [],
                "tree-depth": 0
            }, 0, sender, recipient, getExpiration(expiration), hash, swapperBuff(swapperId), supplierId, minToReceive, wallet_8.address),
            // wrong address finalizes
            Magic.finalizeSwap(txid1, preimage, wallet_9.address),
            SupplierInterface.makePaymentVerify(txid1, "00", 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, XBTC, wallet_8.address),
            SupplierInterface.makePaymentVerifyCompleted(txid1, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, XBTC, wallet_8.address), 
        ]);
        block.receipts[4].result.expectErr().expectUint(17);
        block.receipts[5].result.expectOk().expectUint(TEST_PAYMENT);
        const paymentAfterTests = regularPaymentDue - TEST_PAYMENT * 1;
        const tempMinPaymentToReceive = Math.floor(paymentAfterTests * fee / 10_000);
        hash = getHash("03");
        let tx = generateP2SHTx(sender, recipient, expiration, hash, swapperId, paymentAfterTests);
        let txid = getTxId(tx);
        block = chain.mineBlock([
            TestUtils.setMinedTx(txid, deployerWallet.address),
            // called by different Stacks address
            SupplierInterface.sendFunds({
                header: "",
                height: chain.blockHeight - 1
            }, [], tx, {
                "tx-index": 0,
                "hashes": [],
                "tree-depth": 0
            }, 0, sender, recipient, getExpiration(expiration), hash, swapperBuff(swapperId), supplierId, minToReceive, wallet_8.address),
            // wrong address finalizes
            Magic.finalizeSwap(txid, "03", wallet_9.address),
            ...makePaymentTxs(deployerWallet.address, wallet_8.address, sender, recipient, 500, 1, paymentAfterTests, "03", supplierId, tempMinPaymentToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC),
            SupplierInterface.makePaymentCompleted(txid, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, XBTC, wallet_8.address), 
        ]);
        block.receipts[2].result.expectOk();
        block.receipts[5].result.expectErr().expectUint(17);
        block.receipts[6].result.expectOk();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZmVybmFuZG9mb3kvRG9jdW1lbnRzL3plc3QtY29udHJhY3RzL29uY2hhaW4vdGVzdHMvc3VwcGxpZXItaW50ZXJmYWNlL3Rlc3RpbmcvdmVyaWZpY2F0aW9uX2RyYXdkb3duX3BheW1lbnRfdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkZW5vLWxpbnQtaWdub3JlLWZpbGVcbmltcG9ydCB7IENsYXJpbmV0LCBUeCwgQ2hhaW4sIEFjY291bnQsIHR5cGVzIH0gZnJvbSAnaHR0cHM6Ly9kZW5vLmxhbmQveC9jbGFyaW5ldEB2MS4wLjMvaW5kZXgudHMnO1xuaW1wb3J0IHsgYXNzZXJ0RXF1YWxzLCBhc3NlcnQgfSBmcm9tICdodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4xNTkuMC90ZXN0aW5nL2Fzc2VydHMudHMnO1xuaW1wb3J0IHsgUG9vbCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcG9vbC12MS0wLnRzJztcbmltcG9ydCB7IENvdmVyUG9vbCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY292ZXItcG9vbC12MS0wLnRzJztcbmltcG9ydCB7IExvYW4gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2xvYW4tdjEtMC50cyc7XG5pbXBvcnQgeyBMUFRva2VuIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9scC10b2tlbi50cyc7XG5pbXBvcnQgeyBDUFRva2VuIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jcC10b2tlbi50cyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkQDAuMTU5LjAvbm9kZS9idWZmZXIudHNcIjtcbmltcG9ydCB7IFRlc3RVdGlscyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvdGVzdC11dGlscy50cyc7XG5pbXBvcnQgeyBHbG9iYWxzIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9nbG9iYWxzLnRzJztcbmltcG9ydCB7IFN1cHBsaWVySW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9zdXBwbGllcl9pbnRlcmZhY2UudHMnO1xuaW1wb3J0IHsgQ3BUb2tlblJld2FyZHMgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jcFRva2VuUmV3YXJkcy50c1wiO1xuaW1wb3J0IHsgUGF5bWVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGF5bWVudC50cyc7XG5pbXBvcnQgeyBFbWVyZ2VuY3lFeGVjdXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9lbWVyZ2VuY3ktZXhlY3V0ZS50cyc7XG5pbXBvcnQgeyBNYWdpYyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbWFnaWNfcmVhbC50cyc7XG5cbmltcG9ydCB7IFxuICBnZXRIYXNoLFxuICBnZXRSZXZlcnNlVHhJZCxcbiAgZ2V0VHhJZCxcbiAgZ2V0RXhwaXJhdGlvbixcbiAgc3dhcHBlckJ1ZmYsXG4gIGdlbmVyYXRlUDJQS0hUeCxcbmdlbmVyYXRlUDJTSFR4XG59IGZyb20gXCIuLi91dGlsLnRzXCI7XG5cbmltcG9ydCB7XG4gIHNldENvbnRyYWN0T3duZXIsXG4gIGluaXRDb250cmFjdE93bmVycyxcbiAgYm9vdHN0cmFwQXBwcm92ZWRDb250cmFjdHMsXG4gIGFkZEFwcHJvdmVkQ29udHJhY3QsXG4gIHJ1bkJvb3RzdHJhcCxcbiAgYWRkQm9ycm93ZXIsXG4gIHNlbmRGdW5kc1AyU0hUeHMsXG4gIHJlZ2lzdGVyU3VwcGxpZXJUeHMsXG4gIGZpbmFsaXplT3V0Ym91bmRUeHMsXG4gIG1ha2VQYXltZW50VHhzLFxuICBtYWtlUGF5bWVudFZlcmlmeVR4cyxcbiAgY29uc3VtZVVpbnQsXG4gIGdldEJQLFxuICBmaW5hbGl6ZURyYXdkb3duXG59IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY29tbW9uLnRzJztcblxuaW1wb3J0IHtcbiAgTFBfVE9LRU4sXG4gIFpQX1RPS0VOLFxuICBQQVlNRU5ULFxuICBSRVdBUkRTX0NBTEMsXG4gIExJUVVJRElUWV9WQVVMVCxcbiAgQ1BfVE9LRU4sXG4gIFhCVEMsXG4gIENPTExfVkFVTFQsXG4gIEZVTkRJTkdfVkFVTFQsXG4gIFAyUEtIX1ZFUlNJT04sXG4gIEhBU0gsXG4gIHJlY2lwaWVudCxcbiAgc2VuZGVyLFxuICBwcmVpbWFnZSxcbiAgRVJST1JTLFxuICBPTkVfREFZLFxuICBTV0FQX1JPVVRFUixcbiAgWkVTVF9UT0tFTixcbiAgQ1BfUkVXQVJEU19UT0tFTixcbiAgQ09WRVJfVkFVTFQsXG4gIERBT1xufSBmcm9tIFwiLi4vY29uZmlnLnRzXCI7XG5cbmNvbnN0IE1BWF9NQVRVUklUWV9MRU5HVEggPSAxNDQgKiAzNjUgKiAzOyAvLyAzIHllYXJzXG5cbkNsYXJpbmV0LnRlc3Qoe1xuICBuYW1lOiBcIlRlc3QgZHJhd2Rvd24gd2l0aCBzbWFsbCBhbW91bnQgY2FuIG9ubHkgdHJ5IDMgdGltZXNcIixcbiAgYXN5bmMgZm4oY2hhaW46IENoYWluLCBhY2NvdW50czogTWFwPHN0cmluZywgQWNjb3VudD4pIHtcbiAgICBsZXQgZGVwbG95ZXJXYWxsZXQgPSBhY2NvdW50cy5nZXQoXCJkZXBsb3llclwiKSBhcyBBY2NvdW50O1xuICAgIGxldCBMUF8xID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzFcIikgYXMgQWNjb3VudDsgLy8gTFBfMVxuICAgIGxldCBMUF8yID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzJcIikgYXMgQWNjb3VudDsgLy8gTFBfMlxuICAgIGxldCBjb3ZlciA9IGFjY291bnRzLmdldChcIndhbGxldF8zXCIpIGFzIEFjY291bnQ7IC8vIENvdmVyXzFcbiAgICBsZXQgd2FsbGV0XzcgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfN1wiKSBhcyBBY2NvdW50OyAvLyBEZWxlZ2F0ZV8xXG4gICAgbGV0IHdhbGxldF84ID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzhcIikgYXMgQWNjb3VudDsgLy8gYm9ycm93ZXJfMVxuXG4gICAgbGV0IGFzc2V0TWFwcyA9IGNoYWluLmdldEFzc2V0c01hcHMoKTtcbiAgICBsZXQgcG9vbCA9IG5ldyBQb29sKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGxvYW4gPSBuZXcgTG9hbihjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGxldCBjb3ZlclBvb2wgPSBuZXcgQ292ZXJQb29sKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGJsb2NrID0gR2xvYmFscy5vbmJvYXJkVXNlckFkZHJlc3MoY2hhaW4sIHdhbGxldF84LmFkZHJlc3MsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpO1xuICAgIGJsb2NrID0gR2xvYmFscy5vbmJvYXJkVXNlckFkZHJlc3MoY2hhaW4sIHdhbGxldF84LmFkZHJlc3MsIFAyUEtIX1ZFUlNJT04sIFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKTtcbiAgICBibG9jayA9IEdsb2JhbHMub25ib2FyZFVzZXJBZGRyZXNzKGNoYWluLCB3YWxsZXRfOC5hZGRyZXNzLCBQMlBLSF9WRVJTSU9OLCBcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDJcIiwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG4gICAgYmxvY2sgPSBHbG9iYWxzLm9uYm9hcmRVc2VyQWRkcmVzcyhjaGFpbiwgd2FsbGV0XzguYWRkcmVzcywgUDJQS0hfVkVSU0lPTiwgXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzXCIsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpO1xuXG4gICAgcG9vbC5jcmVhdGVQb29sKHdhbGxldF83LmFkZHJlc3MsTFBfVE9LRU4sWlBfVE9LRU4sUEFZTUVOVCxSRVdBUkRTX0NBTEMsMTAwMCwxMDAwLDEwXzAwMF8wMDBfMDAwLDEwXzAwMF8wMDBfMDAwLDEsTUFYX01BVFVSSVRZX0xFTkdUSCxMSVFVSURJVFlfVkFVTFQsQ1BfVE9LRU4sQ09WRVJfVkFVTFQsQ1BfUkVXQVJEU19UT0tFTixYQlRDLHRydWUpO1xuICAgIHBvb2wuZmluYWxpemVQb29sKHdhbGxldF83LmFkZHJlc3MsIExQX1RPS0VOLCBaUF9UT0tFTiwgQ1BfVE9LRU4sIDApO1xuXG4gICAgbGV0IHN1cHBsaWVySWQgPSBjb25zdW1lVWludChjaGFpbi5taW5lQmxvY2soWy4uLnJlZ2lzdGVyU3VwcGxpZXJUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgcmVjaXBpZW50LCAxMCwgMTAsIDUwMCwgNTAwLCBcInN1cHBsaWVyLTFcIiwgMTBfMDAwXzAwMF8wMDApXSkucmVjZWlwdHNbMV0ucmVzdWx0LmV4cGVjdE9rKCkgYXMgc3RyaW5nKTtcbiAgICBsZXQgZmVlID0gTnVtYmVyKE1hZ2ljLmdldFN1cHBsaWVyKGNoYWluLCBzdXBwbGllcklkLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKS5leHBlY3RTb21lKCkuZXhwZWN0VHVwbGUoKVtcImluYm91bmQtZmVlXCJdLmV4cGVjdFNvbWUoKSk7XG5cbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBNYWdpYy5pbml0aWFsaXplU3dhcHBlcihMUF8xLmFkZHJlc3MpLFxuICAgICAgLi4uc2VuZEZ1bmRzUDJTSFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLDAsTFBfMS5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDAsMTAwXzAwMF8wMDAscHJlaW1hZ2UsMCwxMDBfMDAwXzAwMCAqIGZlZSAvIDEwXzAwMCwxLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSlcbiAgICBdKTtcbiAgICBcbiAgICBjb25zdCBMT0FOX0FNT1VOVCA9IDEwMF8wMDBfMDAwO1xuXG4gICAgYmxvY2sgPSBwb29sLmNyZWF0ZUxvYW4oTFBfVE9LRU4sMCxMT0FOX0FNT1VOVCxYQlRDLDAsWEJUQywzMDAsMTI5NjAsMTQ0MCxDT0xMX1ZBVUxULEZVTkRJTkdfVkFVTFQsd2FsbGV0XzguYWRkcmVzcyk7XG4gICAgcG9vbC5mdW5kTG9hbigwLExQX1RPS0VOLDAsTElRVUlESVRZX1ZBVUxULEZVTkRJTkdfVkFVTFQsWEJUQyx3YWxsZXRfNy5hZGRyZXNzKTtcbiAgICBjaGFpbi5taW5lQmxvY2soW1N1cHBsaWVySW50ZXJmYWNlLnVwZGF0ZUxpcXVpZGl0eShjaGFpbi5ibG9ja0hlaWdodCwgMTAwXzAwMF8wMDAsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpXSk7XG4gICAgLy8gYmxvY2sgPSBsb2FuLmRyYXdkb3duVmVyaWZ5KDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIExQX1RPS0VOLCAwLCB3YWxsZXRfNy5hZGRyZXNzLCAxMDAwLCBTV0FQX1JPVVRFUiwgWEJUQywgd2FsbGV0XzguYWRkcmVzcyk7XG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1xuICAgICAgU3VwcGxpZXJJbnRlcmZhY2UuZHJhd2Rvd25WZXJpZnkoMCwgTFBfVE9LRU4sIDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIDAsIFNXQVBfUk9VVEVSLFhCVEMsIHdhbGxldF84LmFkZHJlc3MpLFxuICAgICAgU3VwcGxpZXJJbnRlcmZhY2UuZHJhd2Rvd25WZXJpZnkoMCwgTFBfVE9LRU4sIDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIFAyUEtIX1ZFUlNJT04sIFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiLCAwLCBTV0FQX1JPVVRFUixYQlRDLCB3YWxsZXRfOC5hZGRyZXNzKSxcbiAgICAgIFN1cHBsaWVySW50ZXJmYWNlLmRyYXdkb3duVmVyaWZ5KDAsIExQX1RPS0VOLCAwLCBYQlRDLCBDT0xMX1ZBVUxULCBGVU5ESU5HX1ZBVUxULCBQMlBLSF9WRVJTSU9OLCBcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDJcIiwgMCwgU1dBUF9ST1VURVIsWEJUQywgd2FsbGV0XzguYWRkcmVzcyksXG4gICAgICBTdXBwbGllckludGVyZmFjZS5kcmF3ZG93blZlcmlmeSgwLCBMUF9UT0tFTiwgMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgUDJQS0hfVkVSU0lPTiwgXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzXCIsIDAsIFNXQVBfUk9VVEVSLFhCVEMsIHdhbGxldF84LmFkZHJlc3MpLFxuICAgIF0pO1xuICAgIGNvbnN0IGxvYW5XaXRob3V0RmVlcyA9IChMT0FOX0FNT1VOVCAtICgxMDAwICogMykpIC0gZ2V0QlAoTE9BTl9BTU9VTlQsIDMwKTtcbiAgICBibG9jay5yZWNlaXB0c1swXS5yZXN1bHQuZXhwZWN0T2soKS5leHBlY3RUdXBsZSgpW1wic2F0c1wiXS5leHBlY3RVaW50KDEwMDApO1xuICAgIGJsb2NrLnJlY2VpcHRzWzFdLnJlc3VsdC5leHBlY3RPaygpLmV4cGVjdFR1cGxlKClbXCJzYXRzXCJdLmV4cGVjdFVpbnQoMTAwMCk7XG4gICAgYmxvY2sucmVjZWlwdHNbMl0ucmVzdWx0LmV4cGVjdE9rKCkuZXhwZWN0VHVwbGUoKVtcInNhdHNcIl0uZXhwZWN0VWludCgxMDAwKTtcbiAgICBibG9jay5yZWNlaXB0c1szXS5yZXN1bHQuZXhwZWN0RXJyKCkuZXhwZWN0VWludCg0MDI1KTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIC4uLmZpbmFsaXplT3V0Ym91bmRUeHMoSEFTSCwgMTAwMCwgMCwgY2hhaW4uYmxvY2tIZWlnaHQgLSAxLCB3YWxsZXRfOC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKSxcbiAgICAgIC4uLmZpbmFsaXplT3V0Ym91bmRUeHMoXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxXCIsIDEwMDAsIDEsIGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgd2FsbGV0XzguYWRkcmVzcywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyksXG4gICAgICAuLi5maW5hbGl6ZU91dGJvdW5kVHhzKFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMlwiLCAxMDAwLCAyLCBjaGFpbi5ibG9ja0hlaWdodCAtIDEsIHdhbGxldF84LmFkZHJlc3MsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLFxuICAgICAgLi4uZmluYWxpemVPdXRib3VuZFR4cyhcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDNcIiwgMTAwMCwgMywgY2hhaW4uYmxvY2tIZWlnaHQgLSAxLCB3YWxsZXRfOC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKSxcbiAgICBdKTtcbiAgICBibG9jay5yZWNlaXB0c1sxXS5yZXN1bHQuZXhwZWN0T2soKTtcbiAgICBibG9jay5yZWNlaXB0c1szXS5yZXN1bHQuZXhwZWN0T2soKTtcbiAgICBibG9jay5yZWNlaXB0c1s1XS5yZXN1bHQuZXhwZWN0T2soKTtcbiAgICBibG9jay5yZWNlaXB0c1s3XS5yZXN1bHQuZXhwZWN0RXJyKCkuZXhwZWN0VWludCgyMyk7XG5cbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UuZHJhd2Rvd24oMCwgTFBfVE9LRU4sIDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIDAsIFNXQVBfUk9VVEVSLFhCVEMsIHdhbGxldF84LmFkZHJlc3MpXSk7XG4gICAgYmxvY2sucmVjZWlwdHNbMF0ucmVzdWx0LmV4cGVjdE9rKCkuZXhwZWN0VHVwbGUoKVtcInNhdHNcIl0uZXhwZWN0VWludChsb2FuV2l0aG91dEZlZXMpO1xuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFsuLi5maW5hbGl6ZURyYXdkb3duKDAsIExQX1RPS0VOLCAwLCBYQlRDLCBDT0xMX1ZBVUxULCBGVU5ESU5HX1ZBVUxULCBYQlRDLCBIQVNILCBsb2FuV2l0aG91dEZlZXMsIDAsIDI4LCB3YWxsZXRfOC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pO1xuICB9LFxufSk7XG5cbkNsYXJpbmV0LnRlc3Qoe1xuICBuYW1lOiBcIlRlc3QgZHJhd2Rvd24gYW5kIGZpbmFsaXplIGEgdGVzdFwiLFxuICBhc3luYyBmbihjaGFpbjogQ2hhaW4sIGFjY291bnRzOiBNYXA8c3RyaW5nLCBBY2NvdW50Pikge1xuICAgIGxldCBkZXBsb3llcldhbGxldCA9IGFjY291bnRzLmdldChcImRlcGxveWVyXCIpIGFzIEFjY291bnQ7XG4gICAgbGV0IExQXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMVwiKSBhcyBBY2NvdW50OyAvLyBMUF8xXG4gICAgbGV0IExQXzIgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMlwiKSBhcyBBY2NvdW50OyAvLyBMUF8yXG4gICAgbGV0IGNvdmVyID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzNcIikgYXMgQWNjb3VudDsgLy8gQ292ZXJfMVxuICAgIGxldCB3YWxsZXRfNyA9IGFjY291bnRzLmdldChcIndhbGxldF83XCIpIGFzIEFjY291bnQ7IC8vIERlbGVnYXRlXzFcbiAgICBsZXQgd2FsbGV0XzggPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfOFwiKSBhcyBBY2NvdW50OyAvLyBib3Jyb3dlcl8xXG5cbiAgICBsZXQgYXNzZXRNYXBzID0gY2hhaW4uZ2V0QXNzZXRzTWFwcygpO1xuICAgIGxldCBwb29sID0gbmV3IFBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgbG9hbiA9IG5ldyBMb2FuKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGNvdmVyUG9vbCA9IG5ldyBDb3ZlclBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgYmxvY2sgPSBHbG9iYWxzLm9uYm9hcmRVc2VyQWRkcmVzcyhjaGFpbiwgd2FsbGV0XzguYWRkcmVzcywgUDJQS0hfVkVSU0lPTiwgSEFTSCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG5cbiAgICBwb29sLmNyZWF0ZVBvb2wod2FsbGV0XzcuYWRkcmVzcyxMUF9UT0tFTixaUF9UT0tFTixQQVlNRU5ULFJFV0FSRFNfQ0FMQywxMDAwLDEwMDAsMTBfMDAwXzAwMF8wMDAsMTBfMDAwXzAwMF8wMDAsMSxNQVhfTUFUVVJJVFlfTEVOR1RILExJUVVJRElUWV9WQVVMVCxDUF9UT0tFTixDT1ZFUl9WQVVMVCxDUF9SRVdBUkRTX1RPS0VOLFhCVEMsdHJ1ZSk7XG4gICAgcG9vbC5maW5hbGl6ZVBvb2wod2FsbGV0XzcuYWRkcmVzcywgTFBfVE9LRU4sIFpQX1RPS0VOLCBDUF9UT0tFTiwgMCk7XG5cbiAgICBsZXQgc3VwcGxpZXJJZCA9IGNvbnN1bWVVaW50KGNoYWluLm1pbmVCbG9jayhbLi4ucmVnaXN0ZXJTdXBwbGllclR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzLCByZWNpcGllbnQsIDEwLCAxMCwgNTAwLCA1MDAsIFwic3VwcGxpZXItMVwiLCAxMF8wMDBfMDAwXzAwMCldKS5yZWNlaXB0c1sxXS5yZXN1bHQuZXhwZWN0T2soKSBhcyBzdHJpbmcpO1xuICAgIGxldCBmZWUgPSBOdW1iZXIoTWFnaWMuZ2V0U3VwcGxpZXIoY2hhaW4sIHN1cHBsaWVySWQsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLmV4cGVjdFNvbWUoKS5leHBlY3RUdXBsZSgpW1wiaW5ib3VuZC1mZWVcIl0uZXhwZWN0U29tZSgpKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKExQXzEuYWRkcmVzcyksXG4gICAgICAuLi5zZW5kRnVuZHNQMlNIVHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsMCxMUF8xLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsMCwxMDBfMDAwXzAwMCxwcmVpbWFnZSwwLDEwMF8wMDBfMDAwICogZmVlIC8gMTBfMDAwLDEsY2hhaW4uYmxvY2tIZWlnaHQgLSAxKVxuICAgIF0pO1xuICAgIFxuICAgIGNvbnN0IExPQU5fQU1PVU5UID0gMTAwXzAwMF8wMDA7XG5cbiAgICBibG9jayA9IHBvb2wuY3JlYXRlTG9hbihMUF9UT0tFTiwwLExPQU5fQU1PVU5ULFhCVEMsMCxYQlRDLDMwMCwxMjk2MCwxNDQwLENPTExfVkFVTFQsRlVORElOR19WQVVMVCx3YWxsZXRfOC5hZGRyZXNzKTtcbiAgICBwb29sLmZ1bmRMb2FuKDAsTFBfVE9LRU4sMCxMSVFVSURJVFlfVkFVTFQsRlVORElOR19WQVVMVCxYQlRDLHdhbGxldF83LmFkZHJlc3MpO1xuICAgIGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UudXBkYXRlTGlxdWlkaXR5KGNoYWluLmJsb2NrSGVpZ2h0LCAxMDBfMDAwXzAwMCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcbiAgICBibG9jayA9IGxvYW4uZHJhd2Rvd25WZXJpZnkoMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgTFBfVE9LRU4sIDAsIHdhbGxldF83LmFkZHJlc3MsIDEwMDAsIFNXQVBfUk9VVEVSLCBYQlRDLCB3YWxsZXRfOC5hZGRyZXNzKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UuZHJhd2Rvd25WZXJpZnkoMCwgTFBfVE9LRU4sIDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIDAsIFNXQVBfUk9VVEVSLFhCVEMsIHdhbGxldF84LmFkZHJlc3MpXSk7XG4gICAgYmxvY2sucmVjZWlwdHNbMF0ucmVzdWx0LmV4cGVjdE9rKCkuZXhwZWN0VHVwbGUoKVtcInNhdHNcIl0uZXhwZWN0VWludCgxMDAwKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbLi4uZmluYWxpemVPdXRib3VuZFR4cyhIQVNILCAxMDAwLCAwLCBjaGFpbi5ibG9ja0hlaWdodCAtIDEsIHdhbGxldF84LmFkZHJlc3MsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpXSk7XG4gICAgXG4gICAgY29uc3QgbG9hbldpdGhvdXRGZWVzID0gKExPQU5fQU1PVU5UIC0gKDEwMDAgKiAxKSkgLSBnZXRCUChMT0FOX0FNT1VOVCwgMzApO1xuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtTdXBwbGllckludGVyZmFjZS5kcmF3ZG93bigwLCBMUF9UT0tFTiwgMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgUDJQS0hfVkVSU0lPTiwgSEFTSCwgMCwgU1dBUF9ST1VURVIsWEJUQywgd2FsbGV0XzguYWRkcmVzcyldKTtcbiAgICBibG9jay5yZWNlaXB0c1swXS5yZXN1bHQuZXhwZWN0T2soKS5leHBlY3RUdXBsZSgpW1wic2F0c1wiXS5leHBlY3RVaW50KGxvYW5XaXRob3V0RmVlcyk7XG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soWy4uLmZpbmFsaXplRHJhd2Rvd24oMCwgTFBfVE9LRU4sIDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIFhCVEMsIEhBU0gsIGxvYW5XaXRob3V0RmVlcywgMSwgY2hhaW4uYmxvY2tIZWlnaHQgLSAxLCB3YWxsZXRfOC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pO1xuICAgIGJsb2NrLnJlY2VpcHRzWzFdLnJlc3VsdC5leHBlY3RPaygpLmV4cGVjdFR1cGxlKClbXCJib3Jyb3ctYW1vdW50XCJdLmV4cGVjdFVpbnQobG9hbldpdGhvdXRGZWVzKTtcbiAgfSxcbn0pO1xuXG5DbGFyaW5ldC50ZXN0KHtcbiAgbmFtZTogXCJCb3Jyb3dlciBjYW4gbWFrZSBhIHBheW1lbnQgdmVyaWZpY2F0aW9uXCIsXG4gIGFzeW5jIGZuKGNoYWluOiBDaGFpbiwgYWNjb3VudHM6IE1hcDxzdHJpbmcsIEFjY291bnQ+KSB7XG4gICAgbGV0IGRlcGxveWVyV2FsbGV0ID0gYWNjb3VudHMuZ2V0KFwiZGVwbG95ZXJcIikgYXMgQWNjb3VudDtcbiAgICBsZXQgd2FsbGV0XzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMVwiKSBhcyBBY2NvdW50OyAvLyBMUF8xXG4gICAgbGV0IHdhbGxldF83ID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzdcIikgYXMgQWNjb3VudDsgLy8gRGVsZWdhdGVfMVxuICAgIGxldCB3YWxsZXRfOCA9IGFjY291bnRzLmdldChcIndhbGxldF84XCIpIGFzIEFjY291bnQ7IC8vIGJvcnJvd2VyXzFcblxuICAgIGxldCBhc3NldE1hcHMgPSBjaGFpbi5nZXRBc3NldHNNYXBzKCk7XG4gICAgbGV0IHBvb2wgPSBuZXcgUG9vbChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGxldCBsb2FuID0gbmV3IExvYW4oY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcblxuICAgIGxldCBnbG9iYWxzID0gR2xvYmFscy5nZXRHbG9iYWxzKGNoYWluLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKS5leHBlY3RUdXBsZSgpO1xuICAgIGxldCBjb29sZG93blRpbWUgPSBjb25zdW1lVWludChnbG9iYWxzW1wibHAtY29vbGRvd24tcGVyaW9kXCJdKTtcbiAgICBsZXQgdW5zdGFrZVdpbmRvdyA9IGNvbnN1bWVVaW50KGdsb2JhbHNbXCJscC11bnN0YWtlLXdpbmRvd1wiXSk7XG5cbiAgICBsZXQgYmxvY2sgPSBHbG9iYWxzLm9uYm9hcmRVc2VyQWRkcmVzcyhjaGFpbiwgd2FsbGV0XzguYWRkcmVzcywgUDJQS0hfVkVSU0lPTiwgSEFTSCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG5cbiAgICBwb29sLmNyZWF0ZVBvb2wod2FsbGV0XzcuYWRkcmVzcyxMUF9UT0tFTixaUF9UT0tFTixQQVlNRU5ULFJFV0FSRFNfQ0FMQywxMDAwLDEwMDAsMTBfMDAwXzAwMF8wMDAsMTBfMDAwXzAwMF8wMDAsMSxNQVhfTUFUVVJJVFlfTEVOR1RILExJUVVJRElUWV9WQVVMVCxDUF9UT0tFTixDT1ZFUl9WQVVMVCxDUF9SRVdBUkRTX1RPS0VOLFhCVEMsdHJ1ZSk7XG4gICAgcG9vbC5maW5hbGl6ZVBvb2wod2FsbGV0XzcuYWRkcmVzcywgTFBfVE9LRU4sIFpQX1RPS0VOLCBDUF9UT0tFTiwgMCk7XG5cbiAgICBsZXQgc3VwcGxpZXJJZCA9IGNvbnN1bWVVaW50KGNoYWluLm1pbmVCbG9jayhbLi4ucmVnaXN0ZXJTdXBwbGllclR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzLCByZWNpcGllbnQsIDEwLCAxMCwgNTAwLCA1MDAsIFwic3VwcGxpZXItMVwiLCAxMF8wMDBfMDAwXzAwMCldKS5yZWNlaXB0c1sxXS5yZXN1bHQuZXhwZWN0T2soKSBhcyBzdHJpbmcpO1xuICAgIGxldCBmZWUgPSBOdW1iZXIoTWFnaWMuZ2V0U3VwcGxpZXIoY2hhaW4sIHN1cHBsaWVySWQsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLmV4cGVjdFNvbWUoKS5leHBlY3RUdXBsZSgpW1wiaW5ib3VuZC1mZWVcIl0uZXhwZWN0U29tZSgpKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKHdhbGxldF8xLmFkZHJlc3MpLFxuICAgICAgLi4uc2VuZEZ1bmRzUDJTSFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLDAsd2FsbGV0XzEuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCwwLDEwMF8wMDBfMDAwLHByZWltYWdlLHN1cHBsaWVySWQsIDEwMF8wMDBfMDAwICogZmVlIC8gMTBfMDAwLDEsY2hhaW4uYmxvY2tIZWlnaHQgLSAxKVxuICAgIF0pO1xuXG4gICAgcG9vbC5jcmVhdGVMb2FuKExQX1RPS0VOLDAsMTAwXzAwMF8wMDAsWEJUQywwLFhCVEMsMzAwLDEyOTYwLDE0NDAsQ09MTF9WQVVMVCxGVU5ESU5HX1ZBVUxULHdhbGxldF84LmFkZHJlc3MpO1xuICAgIGJsb2NrID0gcG9vbC5mdW5kTG9hbigwLExQX1RPS0VOLDAsTElRVUlESVRZX1ZBVUxULEZVTkRJTkdfVkFVTFQsWEJUQyx3YWxsZXRfNy5hZGRyZXNzKTtcblxuICAgIGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UudXBkYXRlTGlxdWlkaXR5KGNoYWluLmJsb2NrSGVpZ2h0LCAxMDBfMDAwXzAwMCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcbiAgICBcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBTdXBwbGllckludGVyZmFjZS5kcmF3ZG93bigwLCBMUF9UT0tFTiwgMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgUDJQS0hfVkVSU0lPTiwgSEFTSCwgMCwgU1dBUF9ST1VURVIsWEJUQywgd2FsbGV0XzguYWRkcmVzcylcbiAgICBdKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFsuLi5maW5hbGl6ZURyYXdkb3duKDAsIExQX1RPS0VOLCAwLCBYQlRDLCBDT0xMX1ZBVUxULCBGVU5ESU5HX1ZBVUxULCBYQlRDLCBIQVNILCA5OTcwMDAwMCwgMCwgMjgsIHdhbGxldF84LmFkZHJlc3MsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpXSk7XG5cbiAgICBjaGFpbi5taW5lRW1wdHlCbG9ja1VudGlsKGNvbnN1bWVVaW50KGxvYW4uZ2V0TG9hbkRhdGEoMCkucmVzdWx0LmV4cGVjdFR1cGxlKClbXCJuZXh0LXBheW1lbnRcIl0pIC0gMSk7XG4gICAgbGV0IHByZXYgPSBjaGFpbi5nZXRBc3NldHNNYXBzKCkuYXNzZXRzW1wiLldyYXBwZWQtQml0Y29pbi53cmFwcGVkLWJpdGNvaW5cIl1bXCJTVDFQUUhRS1YwUkpYWkZZMURHWDhNTlNOWVZFM1ZHWkpTUlRQR1pHTS5saXF1aWRpdHktdmF1bHQtdjEtMFwiXTtcblxuICAgIGxldCByZWd1bGFyUGF5bWVudER1ZSA9IChjb25zdW1lVWludChQYXltZW50LmdldEN1cnJlbnRMb2FuUGF5bWVudChjaGFpbiwgMCwgd2FsbGV0XzguYWRkcmVzcykpKTtcbiAgICBsZXQgZGVsZWdhdGVGZWUgPSBNYXRoLmZsb29yKGNvbnN1bWVVaW50KHBvb2wuZ2V0UG9vbCgwKVtcImRlbGVnYXRlLWZlZVwiXSkgLyAxMDAwMCAqIHJlZ3VsYXJQYXltZW50RHVlKTtcbiAgICBsZXQgbWluUGF5bWVudFRvUmVjZWl2ZSA9ICBNYXRoLmZsb29yKHJlZ3VsYXJQYXltZW50RHVlICogZmVlIC8gMTBfMDAwKTtcbiAgICBjb25zdCBURVNUX1BBWU1FTlQgPSAxMDAwO1xuXG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1xuICAgICAgTWFnaWMuaW5pdGlhbGl6ZVN3YXBwZXIod2FsbGV0XzguYWRkcmVzcyksXG4gICAgICAuLi5tYWtlUGF5bWVudFZlcmlmeVR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCB3YWxsZXRfOC5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDEsVEVTVF9QQVlNRU5ULFwiMDBcIiwwLG1pblBheW1lbnRUb1JlY2VpdmUsMCwgUEFZTUVOVCwgTFBfVE9LRU4sTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQyksXG4gICAgICAuLi5tYWtlUGF5bWVudFZlcmlmeVR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCB3YWxsZXRfOC5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDEsVEVTVF9QQVlNRU5ULFwiMDFcIiwwLG1pblBheW1lbnRUb1JlY2VpdmUsMCwgUEFZTUVOVCwgTFBfVE9LRU4sTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQyksXG4gICAgICAuLi5tYWtlUGF5bWVudFZlcmlmeVR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCB3YWxsZXRfOC5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDEsVEVTVF9QQVlNRU5ULFwiMDJcIiwwLG1pblBheW1lbnRUb1JlY2VpdmUsMCwgUEFZTUVOVCwgTFBfVE9LRU4sTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQyksXG4gICAgXSk7XG4gICAgYXNzZXJ0RXF1YWxzKGNoYWluLmdldEFzc2V0c01hcHMoKS5hc3NldHNbXCIuV3JhcHBlZC1CaXRjb2luLndyYXBwZWQtYml0Y29pblwiXVtcIlNUMVBRSFFLVjBSSlhaRlkxREdYOE1OU05ZVkUzVkdaSlNSVFBHWkdNLmxvYW4tdjEtMFwiXSwgVEVTVF9QQVlNRU5UICogMyk7XG4gICAgXG4gICAgY29uc3QgcGF5bWVudEFmdGVyVGVzdHMgPSByZWd1bGFyUGF5bWVudER1ZSAtIChURVNUX1BBWU1FTlQgKiAzKTtcbiAgICBjb25zdCB0ZW1wTWluUGF5bWVudFRvUmVjZWl2ZSA9ICBNYXRoLmZsb29yKHBheW1lbnRBZnRlclRlc3RzICogZmVlIC8gMTBfMDAwKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICAuLi5tYWtlUGF5bWVudFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCB3YWxsZXRfOC5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDEscGF5bWVudEFmdGVyVGVzdHMsXCIwM1wiLHN1cHBsaWVySWQsdGVtcE1pblBheW1lbnRUb1JlY2VpdmUsMCwgUEFZTUVOVCwgTFBfVE9LRU4sTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQylcbiAgICBdKTtcbiAgICBhc3NlcnRFcXVhbHMoY2hhaW4uZ2V0QXNzZXRzTWFwcygpLmFzc2V0c1tcIi5XcmFwcGVkLUJpdGNvaW4ud3JhcHBlZC1iaXRjb2luXCJdW1wiU1QxUFFIUUtWMFJKWFpGWTFER1g4TU5TTllWRTNWR1pKU1JUUEdaR00ubGlxdWlkaXR5LXZhdWx0LXYxLTBcIl0sIHJlZ3VsYXJQYXltZW50RHVlIC0gZGVsZWdhdGVGZWUpO1xuICB9LFxufSk7XG5cblxuQ2xhcmluZXQudGVzdCh7XG4gIG5hbWU6IFwiQm9ycm93ZXIgY2FuIG1ha2UgYSBwYXltZW50IHZlcmlmaWNhdGlvbiB3aXRoIGxlYWtlZCBwcmVpbWFnZVwiLFxuICBhc3luYyBmbihjaGFpbjogQ2hhaW4sIGFjY291bnRzOiBNYXA8c3RyaW5nLCBBY2NvdW50Pikge1xuICAgIGxldCBkZXBsb3llcldhbGxldCA9IGFjY291bnRzLmdldChcImRlcGxveWVyXCIpIGFzIEFjY291bnQ7XG4gICAgbGV0IHdhbGxldF8xID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzFcIikgYXMgQWNjb3VudDsgLy8gTFBfMVxuICAgIGxldCB3YWxsZXRfNyA9IGFjY291bnRzLmdldChcIndhbGxldF83XCIpIGFzIEFjY291bnQ7IC8vIERlbGVnYXRlXzFcbiAgICBsZXQgd2FsbGV0XzggPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfOFwiKSBhcyBBY2NvdW50OyAvLyBib3Jyb3dlcl8xXG4gICAgbGV0IHdhbGxldF85ID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzlcIikgYXMgQWNjb3VudDtcblxuICAgIGxldCBhc3NldE1hcHMgPSBjaGFpbi5nZXRBc3NldHNNYXBzKCk7XG4gICAgbGV0IHBvb2wgPSBuZXcgUG9vbChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGxldCBsb2FuID0gbmV3IExvYW4oY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcblxuICAgIGxldCBnbG9iYWxzID0gR2xvYmFscy5nZXRHbG9iYWxzKGNoYWluLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKS5leHBlY3RUdXBsZSgpO1xuICAgIGxldCBjb29sZG93blRpbWUgPSBjb25zdW1lVWludChnbG9iYWxzW1wibHAtY29vbGRvd24tcGVyaW9kXCJdKTtcbiAgICBsZXQgdW5zdGFrZVdpbmRvdyA9IGNvbnN1bWVVaW50KGdsb2JhbHNbXCJscC11bnN0YWtlLXdpbmRvd1wiXSk7XG5cbiAgICBsZXQgYmxvY2sgPSBHbG9iYWxzLm9uYm9hcmRVc2VyQWRkcmVzcyhjaGFpbiwgd2FsbGV0XzguYWRkcmVzcywgUDJQS0hfVkVSU0lPTiwgSEFTSCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG5cbiAgICBwb29sLmNyZWF0ZVBvb2wod2FsbGV0XzcuYWRkcmVzcyxMUF9UT0tFTixaUF9UT0tFTixQQVlNRU5ULFJFV0FSRFNfQ0FMQywxMDAwLDEwMDAsMTBfMDAwXzAwMF8wMDAsMTBfMDAwXzAwMF8wMDAsMSxNQVhfTUFUVVJJVFlfTEVOR1RILExJUVVJRElUWV9WQVVMVCxDUF9UT0tFTixDT1ZFUl9WQVVMVCxDUF9SRVdBUkRTX1RPS0VOLFhCVEMsdHJ1ZSk7XG4gICAgcG9vbC5maW5hbGl6ZVBvb2wod2FsbGV0XzcuYWRkcmVzcywgTFBfVE9LRU4sIFpQX1RPS0VOLCBDUF9UT0tFTiwgMCk7XG5cbiAgICBsZXQgc3VwcGxpZXJJZCA9IGNvbnN1bWVVaW50KGNoYWluLm1pbmVCbG9jayhbLi4ucmVnaXN0ZXJTdXBwbGllclR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzLCByZWNpcGllbnQsIDEwLCAxMCwgNTAwLCA1MDAsIFwic3VwcGxpZXItMVwiLCAxMF8wMDBfMDAwXzAwMCldKS5yZWNlaXB0c1sxXS5yZXN1bHQuZXhwZWN0T2soKSBhcyBzdHJpbmcpO1xuICAgIGxldCBmZWUgPSBOdW1iZXIoTWFnaWMuZ2V0U3VwcGxpZXIoY2hhaW4sIHN1cHBsaWVySWQsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLmV4cGVjdFNvbWUoKS5leHBlY3RUdXBsZSgpW1wiaW5ib3VuZC1mZWVcIl0uZXhwZWN0U29tZSgpKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKHdhbGxldF8xLmFkZHJlc3MpLFxuICAgICAgLi4uc2VuZEZ1bmRzUDJTSFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLDAsd2FsbGV0XzEuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCwwLDEwMF8wMDBfMDAwLHByZWltYWdlLHN1cHBsaWVySWQsIDEwMF8wMDBfMDAwICogZmVlIC8gMTBfMDAwLDEsY2hhaW4uYmxvY2tIZWlnaHQgLSAxKVxuICAgIF0pO1xuXG4gICAgcG9vbC5jcmVhdGVMb2FuKExQX1RPS0VOLDAsMTAwXzAwMF8wMDAsWEJUQywwLFhCVEMsMzAwLDEyOTYwLDE0NDAsQ09MTF9WQVVMVCxGVU5ESU5HX1ZBVUxULHdhbGxldF84LmFkZHJlc3MpO1xuICAgIGJsb2NrID0gcG9vbC5mdW5kTG9hbigwLExQX1RPS0VOLDAsTElRVUlESVRZX1ZBVUxULEZVTkRJTkdfVkFVTFQsWEJUQyx3YWxsZXRfNy5hZGRyZXNzKTtcblxuICAgIGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UudXBkYXRlTGlxdWlkaXR5KGNoYWluLmJsb2NrSGVpZ2h0LCAxMDBfMDAwXzAwMCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcbiAgICBcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBTdXBwbGllckludGVyZmFjZS5kcmF3ZG93bigwLCBMUF9UT0tFTiwgMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgUDJQS0hfVkVSU0lPTiwgSEFTSCwgMCwgU1dBUF9ST1VURVIsWEJUQywgd2FsbGV0XzguYWRkcmVzcylcbiAgICBdKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFsuLi5maW5hbGl6ZURyYXdkb3duKDAsIExQX1RPS0VOLCAwLCBYQlRDLCBDT0xMX1ZBVUxULCBGVU5ESU5HX1ZBVUxULCBYQlRDLCBIQVNILCA5OTcwMDAwMCwgMCwgMjgsIHdhbGxldF84LmFkZHJlc3MsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpXSk7XG5cbiAgICBjaGFpbi5taW5lRW1wdHlCbG9ja1VudGlsKGNvbnN1bWVVaW50KGxvYW4uZ2V0TG9hbkRhdGEoMCkucmVzdWx0LmV4cGVjdFR1cGxlKClbXCJuZXh0LXBheW1lbnRcIl0pIC0gMSk7XG4gICAgbGV0IHByZXYgPSBjaGFpbi5nZXRBc3NldHNNYXBzKCkuYXNzZXRzW1wiLldyYXBwZWQtQml0Y29pbi53cmFwcGVkLWJpdGNvaW5cIl1bXCJTVDFQUUhRS1YwUkpYWkZZMURHWDhNTlNOWVZFM1ZHWkpTUlRQR1pHTS5saXF1aWRpdHktdmF1bHQtdjEtMFwiXTtcblxuICAgIGxldCByZWd1bGFyUGF5bWVudER1ZSA9IChjb25zdW1lVWludChQYXltZW50LmdldEN1cnJlbnRMb2FuUGF5bWVudChjaGFpbiwgMCwgd2FsbGV0XzguYWRkcmVzcykpKTtcbiAgICBsZXQgZGVsZWdhdGVGZWUgPSBNYXRoLmZsb29yKGNvbnN1bWVVaW50KHBvb2wuZ2V0UG9vbCgwKVtcImRlbGVnYXRlLWZlZVwiXSkgLyAxMDAwMCAqIHJlZ3VsYXJQYXltZW50RHVlKTtcbiAgICBsZXQgbWluUGF5bWVudFRvUmVjZWl2ZSA9ICBNYXRoLmZsb29yKHJlZ3VsYXJQYXltZW50RHVlICogZmVlIC8gMTBfMDAwKTtcbiAgICBjb25zdCBURVNUX1BBWU1FTlQgPSAxMDAwO1xuXG4gICAgbGV0IGV4cGlyYXRpb24gPSA1MDA7XG4gICAgbGV0IHN3YXBwZXJJZCA9IDE7XG4gICAgbGV0IG91dHB1dFZhbHVlID0gVEVTVF9QQVlNRU5UO1xuICAgIGxldCBtaW5Ub1JlY2VpdmUgPSBURVNUX1BBWU1FTlQgKiBmZWUgLyAxMF8wMDA7XG4gICAgbGV0IGhhc2ggPSBnZXRIYXNoKHByZWltYWdlKTtcbiAgICBsZXQgdHgxID0gZ2VuZXJhdGVQMlNIVHgoc2VuZGVyLCByZWNpcGllbnQsIGV4cGlyYXRpb24sIGhhc2gsIHN3YXBwZXJJZCwgb3V0cHV0VmFsdWUpO1xuICAgIGxldCB0eGlkMSA9IGdldFR4SWQodHgxKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKHdhbGxldF84LmFkZHJlc3MpLFxuICAgICAgVGVzdFV0aWxzLnNldE1pbmVkVHgodHhpZDEsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLFxuICAgICAgLy8gY2FsbGVkIGJ5IGRpZmZlcmVudCBTdGFja3MgYWRkcmVzc1xuICAgICAgU3VwcGxpZXJJbnRlcmZhY2Uuc2VuZEZ1bmRzKFxuICAgICAgICB7IGhlYWRlcjogXCJcIiwgaGVpZ2h0OiBjaGFpbi5ibG9ja0hlaWdodCAtIDEgfSxcbiAgICAgICAgW10sXG4gICAgICAgIHR4MSxcbiAgICAgICAgeyBcInR4LWluZGV4XCI6IDAsIFwiaGFzaGVzXCI6IFtdLCBcInRyZWUtZGVwdGhcIjogMCB9LFxuICAgICAgICAwLFxuICAgICAgICBzZW5kZXIsXG4gICAgICAgIHJlY2lwaWVudCxcbiAgICAgICAgZ2V0RXhwaXJhdGlvbihleHBpcmF0aW9uKSxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgc3dhcHBlckJ1ZmYoc3dhcHBlcklkKSxcbiAgICAgICAgc3VwcGxpZXJJZCxcbiAgICAgICAgbWluVG9SZWNlaXZlLFxuICAgICAgICB3YWxsZXRfOC5hZGRyZXNzLFxuICAgICAgKSxcbiAgICAgIC8vIHdyb25nIGFkZHJlc3MgZmluYWxpemVzXG4gICAgICBNYWdpYy5maW5hbGl6ZVN3YXAodHhpZDEsIHByZWltYWdlLCB3YWxsZXRfOS5hZGRyZXNzKSxcbiAgICAgIFN1cHBsaWVySW50ZXJmYWNlLm1ha2VQYXltZW50VmVyaWZ5KHR4aWQxLCBcIjAwXCIsIDAsIFBBWU1FTlQsIExQX1RPS0VOLCBMSVFVSURJVFlfVkFVTFQsIDAsIENQX1RPS0VOLCBDUF9SRVdBUkRTX1RPS0VOLCBaUF9UT0tFTiwgU1dBUF9ST1VURVIsIFhCVEMsIHdhbGxldF84LmFkZHJlc3MpLFxuICAgICAgU3VwcGxpZXJJbnRlcmZhY2UubWFrZVBheW1lbnRWZXJpZnlDb21wbGV0ZWQodHhpZDEsIDAsIFBBWU1FTlQsIExQX1RPS0VOLCBMSVFVSURJVFlfVkFVTFQsIDAsIENQX1RPS0VOLCBDUF9SRVdBUkRTX1RPS0VOLCBaUF9UT0tFTiwgU1dBUF9ST1VURVIsIFhCVEMsIHdhbGxldF84LmFkZHJlc3MpLFxuICAgIF0pO1xuICAgIGJsb2NrLnJlY2VpcHRzWzRdLnJlc3VsdC5leHBlY3RFcnIoKS5leHBlY3RVaW50KDE3KTtcbiAgICBibG9jay5yZWNlaXB0c1s1XS5yZXN1bHQuZXhwZWN0T2soKS5leHBlY3RVaW50KFRFU1RfUEFZTUVOVCk7XG4gICAgXG4gICAgY29uc3QgcGF5bWVudEFmdGVyVGVzdHMgPSByZWd1bGFyUGF5bWVudER1ZSAtIChURVNUX1BBWU1FTlQgKiAxKTtcbiAgICBjb25zdCB0ZW1wTWluUGF5bWVudFRvUmVjZWl2ZSA9ICBNYXRoLmZsb29yKHBheW1lbnRBZnRlclRlc3RzICogZmVlIC8gMTBfMDAwKTtcbiAgICBoYXNoID0gZ2V0SGFzaChcIjAzXCIpO1xuICAgIGxldCB0eCA9IGdlbmVyYXRlUDJTSFR4KHNlbmRlciwgcmVjaXBpZW50LCBleHBpcmF0aW9uLCBoYXNoLCBzd2FwcGVySWQsIHBheW1lbnRBZnRlclRlc3RzKTtcbiAgICBsZXQgdHhpZCA9IGdldFR4SWQodHgpO1xuXG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1xuICAgICAgVGVzdFV0aWxzLnNldE1pbmVkVHgodHhpZCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyksXG4gICAgICAvLyBjYWxsZWQgYnkgZGlmZmVyZW50IFN0YWNrcyBhZGRyZXNzXG4gICAgICBTdXBwbGllckludGVyZmFjZS5zZW5kRnVuZHMoXG4gICAgICAgIHsgaGVhZGVyOiBcIlwiLCBoZWlnaHQ6IGNoYWluLmJsb2NrSGVpZ2h0IC0gMSB9LFxuICAgICAgICBbXSxcbiAgICAgICAgdHgsXG4gICAgICAgIHsgXCJ0eC1pbmRleFwiOiAwLCBcImhhc2hlc1wiOiBbXSwgXCJ0cmVlLWRlcHRoXCI6IDAgfSxcbiAgICAgICAgMCxcbiAgICAgICAgc2VuZGVyLFxuICAgICAgICByZWNpcGllbnQsXG4gICAgICAgIGdldEV4cGlyYXRpb24oZXhwaXJhdGlvbiksXG4gICAgICAgIGhhc2gsXG4gICAgICAgIHN3YXBwZXJCdWZmKHN3YXBwZXJJZCksXG4gICAgICAgIHN1cHBsaWVySWQsXG4gICAgICAgIG1pblRvUmVjZWl2ZSxcbiAgICAgICAgd2FsbGV0XzguYWRkcmVzcyxcbiAgICAgICksXG4gICAgICAvLyB3cm9uZyBhZGRyZXNzIGZpbmFsaXplc1xuICAgICAgTWFnaWMuZmluYWxpemVTd2FwKHR4aWQsIFwiMDNcIiwgd2FsbGV0XzkuYWRkcmVzcyksXG4gICAgICAuLi5tYWtlUGF5bWVudFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCB3YWxsZXRfOC5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDEscGF5bWVudEFmdGVyVGVzdHMsXCIwM1wiLHN1cHBsaWVySWQsdGVtcE1pblBheW1lbnRUb1JlY2VpdmUsMCwgUEFZTUVOVCwgTFBfVE9LRU4sTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQyksXG4gICAgICBTdXBwbGllckludGVyZmFjZS5tYWtlUGF5bWVudENvbXBsZXRlZCh0eGlkLCAwLCBQQVlNRU5ULCBMUF9UT0tFTiwgTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLCBYQlRDLCB3YWxsZXRfOC5hZGRyZXNzKSxcbiAgICBdKTtcbiAgICBibG9jay5yZWNlaXB0c1syXS5yZXN1bHQuZXhwZWN0T2soKTtcbiAgICBibG9jay5yZWNlaXB0c1s1XS5yZXN1bHQuZXhwZWN0RXJyKCkuZXhwZWN0VWludCgxNyk7XG4gICAgYmxvY2sucmVjZWlwdHNbNl0ucmVzdWx0LmV4cGVjdE9rKCk7XG4gIH0sXG59KTtcblxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QjtBQUN4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QyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0RCxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztlQUNuQixtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUM7ZUFDbkcsbUJBQW1CLENBQUMsMENBQTBDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUM7ZUFDekksbUJBQW1CLENBQUMsMENBQTBDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUM7ZUFDekksbUJBQW1CLENBQUMsMENBQTBDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUM7U0FDN0ksQ0FBQyxDQUFDO1FBQ0gsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7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