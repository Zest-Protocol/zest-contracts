import { Tx, types } from 'https://deno.land/x/clarinet@v1.0.2/index.ts';
class CPToken {
    chain;
    deployer;
    constructor(chain, deployer){
        this.chain = chain;
        this.deployer = deployer;
    }
    withdrawFunds(cpToken, lender) {
        return this.chain.mineBlock([
            Tx.contractCall(`${cpToken}`, "withdraw-rewards", [], lender)
        ]);
    }
    withdrawableFundsOf(cpToken, caller) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.${cpToken}`, "withdrawable-funds-of", [
            types.principal(caller), 
        ], this.deployer.address);
    }
    recognizableLossesOf(cpToken, tokenId, caller) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.${cpToken}`, "recognizable-losses-of-read", [
            types.uint(tokenId),
            types.principal(caller), 
        ], this.deployer.address);
    }
    getLossesPerShare(cpToken, tokenId) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.${cpToken}`, "get-losses-per-share", [
            types.uint(tokenId), 
        ], this.deployer.address);
    }
    getBalance(cpToken, tokenId, owner) {
        return this.chain.callReadOnlyFn(`${this.deployer.address}.${cpToken}`, "get-balance", [
            types.uint(tokenId),
            types.principal(owner), 
        ], this.deployer.address);
    }
    getCycleStart(cpToken, tokenId) {
        return this.chain.callReadOnlyFn(`${cpToken}`, "get-cycle-start", [
            types.uint(tokenId), 
        ], this.deployer.address).result;
    }
    getNextCycleHeight(cpToken, tokenId) {
        return this.chain.callReadOnlyFn(`${cpToken}`, "get-next-cycle-height", [
            types.uint(tokenId), 
        ], this.deployer.address);
    }
    getCycleRewards(cpToken, tokenId, cycle) {
        return this.chain.callReadOnlyFn(`${cpToken}`, "get-cycle-rewards", [
            types.uint(tokenId),
            types.uint(cycle), 
        ], this.deployer.address).result;
    }
    getCycleShare(cpToken, tokenId, cycle) {
        return this.chain.callReadOnlyFn(`${cpToken}`, "get-cycle-share", [
            types.uint(tokenId),
            types.uint(cycle), 
        ], this.deployer.address).result;
    }
    getCycleShareByPrincipal(cpToken, tokenId, cycle, owner) {
        return this.chain.callReadOnlyFn(`${cpToken}`, "get-cycle-share-principal", [
            types.uint(tokenId),
            types.uint(cycle),
            types.principal(owner), 
        ], this.deployer.address).result;
    }
    getCurrentCycle(cpToken, tokenId) {
        return this.chain.callReadOnlyFn(cpToken, "get-current-cycle", [
            types.uint(tokenId), 
        ], this.deployer.address);
    }
    getCoverPoolFundsBalance(cpToken, tokenId, sender) {
        return this.chain.callReadOnlyFn(cpToken, "get-cover-pool-funds-balance", [
            types.uint(tokenId),
            types.principal(sender), 
        ], this.deployer.address);
    }
}
export { CPToken };
//# sourceMappingURL=data:application/json;base64,