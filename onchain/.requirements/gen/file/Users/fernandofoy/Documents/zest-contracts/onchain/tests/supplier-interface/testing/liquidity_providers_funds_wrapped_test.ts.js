// deno-lint-ignore-file
import { Clarinet } from 'https://deno.land/x/clarinet@v1.0.3/index.ts';
import { assertEquals } from 'https://deno.land/std@0.159.0/testing/asserts.ts';
import { Pool } from '../../interfaces/pool-v1-0.ts';
import { Loan } from '../../interfaces/loan-v1-0.ts';
import { Globals } from '../../interfaces/globals.ts';
import { Magic } from '../../interfaces/magic_real.ts';
import { SupplierInterface } from '../../interfaces/supplier_interface.ts';
import { Payment } from '../../interfaces/payment.ts';
import { registerSupplierTxs, consumeUint, sendFundsP2SHTxsWrap, makePaymentTxs, finalizeDrawdown } from '../../interfaces/common.ts';
import { LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, LIQUIDITY_VAULT, CP_TOKEN, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, XBTC, recipient, sender, preimage, SWAP_ROUTER, CP_REWARDS_TOKEN, COVER_VAULT } from "../config.ts";
const MAX_MATURITY_LENGTH = 144 * 365 * 3; // 3 years
Clarinet.test({
    name: "Liquidity providers can send funds to the liquidity vault - wrapped",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_2 = accounts.get("wallet_2"); // LP_2
        let wallet_7 = accounts.get("wallet_7"); // DELEGATE_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        let block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxsWrap(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 300_000_000, preimage, supplierId, 300_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        assetMaps = chain.getAssetsMaps();
        assertEquals(assetMaps.assets[".Wrapped-Bitcoin.wrapped-bitcoin"][`${deployerWallet.address}.liquidity-vault-v1-0`], 300000000);
    }
});
Clarinet.test({
    name: "Liquidity providers can withdraw xBTC rewards - wrapped",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_2 = accounts.get("wallet_2"); // LP_2
        let wallet_7 = accounts.get("wallet_7"); // DELEGATE_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        let block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxsWrap(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 300_000_000, preimage, supplierId, 300_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        block = pool.createLoan(LP_TOKEN, 0, 100_000_000, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        block = chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 0, 28, wallet_8.address, deployerWallet.address)
        ]);
        // block = chain.mineBlock([...finalizeOutboundTxs(HASH, 99000000, 0, 58010, wallet_8.address, deployerWallet.address)]);
        chain.mineEmptyBlock(1300);
        let regularPaymentDue = consumeUint(Payment.getCurrentLoanPayment(chain, 0, wallet_8.address));
        let delegateFee = Math.floor(consumeUint(pool.getPool(0)["delegate-fee"]) / 10000 * regularPaymentDue);
        let minPaymentToReceive = Math.floor(regularPaymentDue * fee / 10_000);
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_8.address),
            ...makePaymentTxs(deployerWallet.address, wallet_8.address, sender, recipient, 500, 1, regularPaymentDue, "00", supplierId, minPaymentToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        block = Globals.setcontingencyPlan(chain, true, deployerWallet.address);
        let prev = chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5"];
        block = chain.mineBlock([
            SupplierInterface.withdrawRewardsXBTC(LP_TOKEN, 0, LIQUIDITY_VAULT, XBTC, wallet_1.address)
        ]);
        assertEquals(chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5"] - prev, consumeUint(block.receipts[0].result.expectOk()));
    }
});
//# sourceMappingURL=data:application/json;base64,