// deno-lint-ignore-file
import { Clarinet, Tx, types } from 'https://deno.land/x/clarinet@v1.0.3/index.ts';
import { Pool } from '../../interfaces/pool-v1-0.ts';
import { CoverPool } from '../../interfaces/cover-pool-v1-0.ts';
import { Loan } from '../../interfaces/loan-v1-0.ts';
import { LPToken } from '../../interfaces/lp-token.ts';
import { CPToken } from '../../interfaces/cp-token.ts';
import { Globals } from '../../interfaces/globals.ts';
import { LiquidityVault } from '../../interfaces/liquidity-vault.ts';
import { consumeUint } from '../../interfaces/common.ts';
import { LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, LIQUIDITY_VAULT, CP_TOKEN, XBTC, FUNDING_VAULT, P2PKH_VERSION, HASH, ONE_DAY, DAYS_PER_YEAR, CP_REWARDS_TOKEN, COVER_VAULT } from "../config.ts";
const MAX_MATURITY_LENGTH = ONE_DAY * DAYS_PER_YEAR * 3; // 3 years
Clarinet.test({
    name: "Add funds to cover flow",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let LP_3 = accounts.get("wallet_3"); // LP_3
        let LP_4 = accounts.get("wallet_4"); // LP_4
        let cover_1 = accounts.get("wallet_5"); // Cover_1
        let cover_2 = accounts.get("wallet_6"); // Cover_2
        let delegate_1 = accounts.get("wallet_7"); // Delegate_1
        let delegate_2 = accounts.get("wallet_8"); // Delegate_2
        let delegate_3 = accounts.get("wallet_9"); // Delegate_3
        let delegate_4 = accounts.get("wallet_10"); // Delegate_4
        let borrower_1 = accounts.get("wallet_11"); // borrower_1
        let borrower_2 = accounts.get("wallet_12"); // borrower_2
        let borrower_3 = accounts.get("wallet_13"); // borrower_2
        let cover_provider_1 = accounts.get("wallet_14"); // cover_provider_1
        let cover_provider_2 = accounts.get("wallet_15"); // cover_provider_2
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let LpToken = new LPToken(chain, deployerWallet);
        let CpToken = new CPToken(chain, deployerWallet);
        let lv = new LiquidityVault(chain, LIQUIDITY_VAULT, deployerWallet);
        let fv = new LiquidityVault(chain, FUNDING_VAULT, deployerWallet);
        const poolId0 = 0;
        // Start Set up
        let block = Globals.onboardUserAddress(chain, borrower_1.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = pool.createPool(delegate_1.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(delegate_1.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        block = pool.enableCover(LP_TOKEN, CP_TOKEN, 0, delegate_1.address);
        // End Set up
        // Start Flow
        // COVER POOL HAS A LIMIT OF 10_000_000_000
        block = chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'send-funds', [
                types.principal(`${deployerWallet.address}.cp-token`),
                types.principal(`${deployerWallet.address}.cover-vault`),
                types.principal(`${deployerWallet.address}.cp-rewards-token`),
                types.principal(`${deployerWallet.address}.Wrapped-Bitcoin`),
                types.uint(poolId0),
                types.uint(6_000_000_000n),
                types.uint(1),
                types.principal(`${deployerWallet.address}.rewards-calc`),
                types.principal(cover_provider_1.address)
            ], cover_provider_1.address)
        ]);
    }
});
Clarinet.test({
    name: "Withdraw funds from cover pool flow",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let LP_3 = accounts.get("wallet_3"); // LP_3
        let LP_4 = accounts.get("wallet_4"); // LP_4
        let cover_1 = accounts.get("wallet_5"); // Cover_1
        let cover_2 = accounts.get("wallet_6"); // Cover_2
        let delegate_1 = accounts.get("wallet_7"); // Delegate_1
        let delegate_2 = accounts.get("wallet_8"); // Delegate_2
        let delegate_3 = accounts.get("wallet_9"); // Delegate_3
        let delegate_4 = accounts.get("wallet_10"); // Delegate_4
        let borrower_1 = accounts.get("wallet_11"); // borrower_1
        let borrower_2 = accounts.get("wallet_12"); // borrower_2
        let borrower_3 = accounts.get("wallet_13"); // borrower_2
        let cover_provider_1 = accounts.get("wallet_14"); // cover_provider_1
        let cover_provider_2 = accounts.get("wallet_15"); // cover_provider_2
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let LpToken = new LPToken(chain, deployerWallet);
        let CpToken = new CPToken(chain, deployerWallet);
        let lv = new LiquidityVault(chain, LIQUIDITY_VAULT, deployerWallet);
        let fv = new LiquidityVault(chain, FUNDING_VAULT, deployerWallet);
        const poolId0 = 0;
        const commitmentTime = 1;
        const amountCommitted = 6_000_000_000n;
        // Start Set up
        let block = Globals.onboardUserAddress(chain, borrower_1.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = pool.createPool(delegate_1.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(delegate_1.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        block = pool.enableCover(LP_TOKEN, CP_TOKEN, 0, delegate_1.address);
        block = coverPool.sendFunds(CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, poolId0, amountCommitted, commitmentTime, REWARDS_CALC, cover_provider_1.address);
        let result = coverPool.getPool(poolId0);
        // We have to wait until the time committed has passed
        let commitmentBlockTime = consumeUint(result["cycle-length"]) * commitmentTime;
        chain.mineEmptyBlock(commitmentBlockTime);
        // End Set up
        // Flow Starts here
        // Signal that we want to start a withdrawal
        block = chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'signal-withdrawal', [
                types.principal(`${deployerWallet.address}.cp-token`),
                types.uint(poolId0),
                types.uint(amountCommitted)
            ], cover_provider_1.address)
        ]);
        // Get time for staker cooldown period time
        let globals = Globals.getGlobals(chain, deployerWallet.address).expectTuple();
        let stakerCooldownPeriod = consumeUint(globals["staker-cooldown-period"]);
        // wait until time has passed.
        chain.mineEmptyBlock(stakerCooldownPeriod);
        block = chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'withdraw', [
                types.principal(`${deployerWallet.address}.cp-token`),
                types.principal(`${deployerWallet.address}.cp-rewards-token`),
                types.principal(`${deployerWallet.address}.Wrapped-Bitcoin`),
                types.uint(poolId0),
                types.uint(amountCommitted),
                types.principal(`${deployerWallet.address}.cover-vault`)
            ], cover_provider_1.address)
        ]);
        block.receipts[0].result.expectOk();
    }
});
//# sourceMappingURL=data:application/json;base64,