// deno-lint-ignore-file
import { Clarinet, Tx, types } from 'https://deno.land/x/clarinet@v1.0.3/index.ts';
import { assertEquals } from 'https://deno.land/std@0.159.0/testing/asserts.ts';
import { Pool } from '../../interfaces/pool-v1-0.ts';
import { CoverPool } from '../../interfaces/cover-pool-v1-0.ts';
import { Loan } from '../../interfaces/loan-v1-0.ts';
import { Buffer } from "https://deno.land/std@0.159.0/node/buffer.ts";
import { TestUtils } from '../../interfaces/test-utils.ts';
import { Magic } from '../../interfaces/magic_real.ts';
import { Globals } from '../../interfaces/globals.ts';
import { SwapRouter } from '../../interfaces/swap-router.ts';
import { SupplierInterface } from '../../interfaces/supplier_interface.ts';
import { Payment } from '../../interfaces/payment.ts';
import { getHash, getTxId, getExpiration, swapperBuff, generateP2PKHTx, generateP2SHTx } from "../util.ts";
import { runBootstrap, sendFundsP2SHTxs, registerSupplierTxs, finalizeOutboundTxs, consumeUint, makePaymentTxs, getBP, finalizeDrawdown } from '../../interfaces/common.ts';
import { LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, LIQUIDITY_VAULT, CP_TOKEN, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, recipient, sender, preimage, SWAP_ROUTER, ZEST_TOKEN, CP_REWARDS_TOKEN, XUSD_CONTRACT_SIMNET, COVER_VAULT } from "../config.ts";
const MAX_MATURITY_LENGTH = 144 * 365 * 3; // 3 years
Clarinet.test({
    name: "Borrower creates a Loan on Pool 0. Delegate funds loan and Borrower drawdowns funds",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let coverPoolProvider = accounts.get("wallet_3"); // Cover_1
        let delegate_1 = accounts.get("wallet_7"); // Delegate_1
        let borrower_1 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        // block = Onboarding.onboardUser(chain, borrower_1.address, deployerWallet.address);
        let block = Globals.onboardUserAddress(chain, borrower_1.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = pool.createPool(delegate_1.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        block = pool.finalizePool(delegate_1.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId_0 = 0;
        let inboundSwap = 0;
        block = chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000),
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, inboundSwap, 100_000_000, preimage, supplierId_0, 100_000_000 * 10 / 10_000, 1, chain.blockHeight - 1),
            Magic.initializeSwapper(LP_2.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_2.address, sender, recipient, 500, inboundSwap + 1, 100_000_000, preimage, supplierId_0, 100_000_000 * 10 / 10_000, 1, chain.blockHeight - 1), 
        ]);
        // STARTS HERE
        // Loan is created by Borrower
        const loan_amount = 100_000_000;
        const payment_period = 1440;
        const num_payments = 9;
        const coll_ratio = 0;
        const poolId_0 = 0;
        const apr = 300;
        // Borrower creates Loan 0 for Pool 0
        block = chain.mineBlock([
            Tx.contractCall("pool-v1-0", "create-loan", [
                types.principal(`${deployerWallet.address}.lp-token`),
                types.uint(poolId_0),
                types.uint(loan_amount),
                types.principal(`${deployerWallet.address}.Wrapped-Bitcoin`),
                types.uint(coll_ratio),
                types.principal(`${deployerWallet.address}.Wrapped-Bitcoin`),
                types.uint(apr),
                types.uint(payment_period * num_payments),
                types.uint(payment_period),
                types.principal(`${deployerWallet.address}.coll-vault`),
                types.principal(`${deployerWallet.address}.funding-vault`), 
            ], borrower_1.address)
        ]);
        const loanId = 0;
        // Loan is funded by Pool Delegate
        block = chain.mineBlock([
            Tx.contractCall("pool-v1-0", "fund-loan", [
                types.uint(loanId),
                types.principal(`${deployerWallet.address}.lp-token`),
                types.uint(poolId_0),
                types.principal(`${deployerWallet.address}.liquidity-vault-v1-0`),
                types.principal(`${deployerWallet.address}.funding-vault`),
                types.principal(`${deployerWallet.address}.Wrapped-Bitcoin`)
            ], delegate_1.address)
        ]);
        // Backend process where we update the liquidity in the supplier-interface.
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        // End of backend process
        let prev = chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"];
        // Loan drawdown funds from Pool 0 and send bitcoin to the address
        block = chain.mineBlock([
            Tx.contractCall("supplier-interface", "drawdown", [
                types.uint(loanId),
                types.principal(`${deployerWallet.address}.lp-token`),
                types.uint(poolId_0),
                types.principal(`${deployerWallet.address}.Wrapped-Bitcoin`),
                types.principal(`${deployerWallet.address}.coll-vault`),
                types.principal(`${deployerWallet.address}.funding-vault`),
                types.buff(Buffer.from(P2PKH_VERSION, "hex")),
                types.buff(Buffer.from(HASH, "hex")),
                types.uint(supplierId_0),
                types.principal(`${deployerWallet.address}.swap-router`),
                types.principal(`${deployerWallet.address}.Wrapped-Bitcoin`), 
            ], borrower_1.address)
        ]);
        // console.log(block);
        // Should be equal to the amount sent and
        assertEquals(100_000_000 - 300000, prev - chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.funding-vault"]);
        chain.mineEmptyBlock(10);
        // Finalizing drawdown, can be called by the backend to confirm transaction.
        // dummy values to set on the Bitcoin blockchain
        // first outbound swap Id
        const swapId = 0;
        // mine dummy
        let globals = Globals.getGlobals(chain, deployerWallet.address).expectTuple();
        const treasuryFeeBPs = consumeUint(globals["treasury-fee"]);
        const loanAmountWithoutTreasuryFee = loan_amount - loan_amount * treasuryFeeBPs / 10_000;
        let tx1 = generateP2PKHTx(HASH, loanAmountWithoutTreasuryFee);
        let txid1 = getTxId(tx1);
        chain.mineBlock([
            TestUtils.setMinedTx(txid1, deployerWallet.address)
        ]);
        // Dummy transaction data, can be empty block header and block
        const bitcoinBlock = {
            header: "",
            height: chain.blockHeight - 1
        };
        const prevBlocks = [];
        const proof = {
            "tx-index": 0,
            "hashes": [],
            "tree-depth": 0
        };
        // Output in which we're interested for the transaction
        const outputIndex = 0;
        // after a drawdown has been called and the bitcoin transaction is in the Bitcoin blockchain, the backend calls finalize-drawdown
        block = chain.mineBlock([
            Tx.contractCall("supplier-interface", "finalize-drawdown", [
                types.uint(loanId),
                types.principal(LP_TOKEN),
                types.uint(poolId_0),
                types.principal(XBTC),
                types.principal(COLL_VAULT),
                types.principal(FUNDING_VAULT),
                types.principal(XBTC),
                types.tuple({
                    header: types.buff(Buffer.from(bitcoinBlock.header, "hex")),
                    height: types.uint(bitcoinBlock.height)
                }),
                types.list(prevBlocks.map((val)=>types.buff(Buffer.from(val, "hex")))),
                types.buff(Buffer.from(tx1, "hex")),
                types.tuple({
                    "tx-index": types.uint(proof['tx-index']),
                    "hashes": types.list(proof.hashes.map((val)=>types.buff(Buffer.from(val, "hex")))),
                    "tree-depth": types.uint(proof['tree-depth'])
                }),
                types.uint(outputIndex),
                types.uint(swapId), 
            ], borrower_1.address)
        ]);
        block.receipts[0].result.expectOk();
    }
});
Clarinet.test({
    name: "Borrower can create a Loan on Pool 0. Delegate funds loan and Borrower cannot drawn funds unless using allowed address by Pool Delegate",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let coverPoolProvider = accounts.get("wallet_3"); // Cover_1
        let delegate_1 = accounts.get("wallet_7"); // Delegate_1
        let borrower_1 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let block = runBootstrap(chain, deployerWallet);
        // block = Onboarding.onboardUser(chain, borrower_1.address, deployerWallet.address);
        block = Globals.onboardUserAddress(chain, borrower_1.address, P2PKH_VERSION, HASH, deployerWallet.address);
        // loan.addBorrower(borrower_1.address, deployerWallet.address);
        pool.createPool(delegate_1.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(delegate_1.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        block = coverPool.sendFunds(CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, ZEST_TOKEN, 0, 1_000_000_000_000n, 10, REWARDS_CALC, coverPoolProvider.address);
        chain.mineEmptyBlock(10);
        block = chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000),
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * 10 / 10_000, 1, 14),
            Magic.initializeSwapper(LP_2.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_2.address, sender, recipient, 500, 1, 100_000_000, preimage, 0, 100_000_000 * 10 / 10_000, 1, 14), 
        ]);
        // Loan is created by Borrower
        block = pool.createLoan(LP_TOKEN, 0, 100_000_000, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, borrower_1.address);
        // Loan is funded by Pool Delegate
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, delegate_1.address);
        // Loan drawdown funds from Pool 0 and send bitcoin to the address
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        let prev = chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"];
        // try first
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, "0000000000000000000000000000000000000001", 0, SWAP_ROUTER, XBTC, borrower_1.address)
        ]);
        block.receipts[0].result.expectErr().expectUint(1007);
        block = Globals.onboardUserAddress(chain, borrower_1.address, P2PKH_VERSION, "0000000000000000000000000000000000000001", deployerWallet.address);
        // try again with added address
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, borrower_1.address)
        ]);
        assertEquals(100_000_000 - 300000, prev - chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.funding-vault"]);
        chain.mineEmptyBlock(10);
        // Finalizing drawdown, can be called by anyone to confirm transaction.
        block = chain.mineBlock([
            ...finalizeOutboundTxs(HASH, 99700000, 0, 28, borrower_1.address, deployerWallet.address)
        ]);
        block.receipts[1].result.expectOk();
    }
});
Clarinet.test({
    name: "Borrower can make payments for the loan",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let coverPoolProvider = accounts.get("wallet_3"); // Cover_1
        let delegate_1 = accounts.get("wallet_7"); // Delegate_1
        let borrower_1 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, borrower_1.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(delegate_1.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(delegate_1.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        chain.mineEmptyBlock(10);
        block = chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000),
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * 10 / 10_000, 1, 14),
            Magic.initializeSwapper(LP_2.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_2.address, sender, recipient, 500, 1, 100_000_000, preimage, 0, 100_000_000 * 10 / 10_000, 1, 14), 
        ]);
        const supplierId1 = consumeUint(block.receipts[1].result.expectOk());
        const loanAmount = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, loanAmount, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, borrower_1.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, delegate_1.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, borrower_1.address)
        ]);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 0, chain.blockHeight - 1, borrower_1.address, deployerWallet.address)
        ]);
        chain.mineEmptyBlock(1300);
        let fee = Number(Magic.getSupplier(chain, 0, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        // STARTS HERE
        // initializes Borrower_1 as a swapper
        block = chain.mineBlock([
            Magic.initializeSwapper(borrower_1.address)
        ]);
        // make first payment
        const hash = getHash(preimage);
        const expiration = 500;
        const borrowerSwapperId = consumeUint(block.receipts[0].result.expectOk());
        const loanId = 0;
        const poolId = 0;
        // TODO: generate payment from loan data
        const payment = 82191;
        const tx1 = generateP2SHTx(sender, recipient, expiration, hash, borrowerSwapperId, payment);
        const txId1 = getTxId(tx1);
        block = chain.mineBlock([
            Tx.contractCall("test-utils", "set-mined", [
                types.buff(Buffer.from(txId1, "hex"))
            ], deployerWallet.address)
        ]);
        const bitcoinBlock = {
            header: "",
            height: chain.blockHeight - 1
        };
        const prevBlocks = [];
        const proof = {
            "tx-index": 0,
            "hashes": [],
            "tree-depth": 0
        };
        // Output in which we're interested for the transaction
        const outputIndex = 0;
        // the 10 percent is  based on the inbound fee of supplier-1
        let minToReceive = Math.floor(payment * 10 / 10_000);
        // sending funds by validating transaction.
        block = chain.mineBlock([
            Tx.contractCall("supplier-interface", "send-funds", [
                // Data used by the Magic Magic contract to prove that the Bitcoin transaction happened
                types.tuple({
                    header: types.buff(Buffer.from(bitcoinBlock.header, "hex")),
                    height: types.uint(bitcoinBlock.height)
                }),
                types.list(prevBlocks.map((val)=>types.buff(Buffer.from(val, "hex")))),
                types.buff(Buffer.from(tx1, "hex")),
                types.tuple({
                    "tx-index": types.uint(proof['tx-index']),
                    "hashes": types.list(proof.hashes.map((val)=>types.buff(Buffer.from(val, "hex")))),
                    "tree-depth": types.uint(proof['tree-depth'])
                }),
                types.uint(outputIndex),
                // end of Bitcoin Proof
                types.buff(Buffer.from(sender, "hex")),
                types.buff(Buffer.from(recipient, "hex")),
                types.buff(Buffer.from(getExpiration(expiration), "hex")),
                types.buff(Buffer.from(hash, "hex")),
                types.buff(Buffer.from(swapperBuff(borrowerSwapperId), "hex")),
                types.uint(supplierId1),
                types.uint(minToReceive)
            ], borrower_1.address)
        ]);
        block = chain.mineBlock([
            Tx.contractCall("supplier-interface", "make-payment", [
                types.buff(Buffer.from(txId1, "hex")),
                types.buff(Buffer.from(preimage, "hex")),
                types.uint(loanId),
                types.principal(PAYMENT),
                types.principal(LP_TOKEN),
                types.principal(LIQUIDITY_VAULT),
                types.uint(poolId),
                types.principal(CP_TOKEN),
                types.principal(CP_REWARDS_TOKEN),
                types.principal(ZP_TOKEN),
                types.principal(SWAP_ROUTER),
                types.principal(XBTC), 
            ], borrower_1.address)
        ]);
        // mine a payment period amount of time
        // chain.mineEmptyBlock(12960 / 1440);
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        // // Borrower makes a 2nd payment to the loan. No need for initializing
        const preimage2 = "01";
        const hash2 = getHash(preimage2);
        const tx2 = generateP2SHTx(sender, recipient, expiration, hash2, borrowerSwapperId, payment);
        const txId2 = getTxId(tx2);
        const bitcoinBlock2 = {
            header: "",
            height: chain.blockHeight - 1
        };
        block = chain.mineBlock([
            Tx.contractCall("test-utils", "set-mined", [
                types.buff(Buffer.from(txId2, "hex"))
            ], deployerWallet.address)
        ]);
        // Make a payment without registering as a swapper, already registered.
        block = chain.mineBlock([
            Tx.contractCall("supplier-interface", "send-funds", [
                // Data used by the Magic Magic contract to prove that the Bitcoin transaction happened
                types.tuple({
                    header: types.buff(Buffer.from(bitcoinBlock2.header, "hex")),
                    height: types.uint(bitcoinBlock2.height)
                }),
                types.list(prevBlocks.map((val)=>types.buff(Buffer.from(val, "hex")))),
                types.buff(Buffer.from(tx2, "hex")),
                types.tuple({
                    "tx-index": types.uint(proof['tx-index']),
                    "hashes": types.list(proof.hashes.map((val)=>types.buff(Buffer.from(val, "hex")))),
                    "tree-depth": types.uint(proof['tree-depth'])
                }),
                types.uint(outputIndex),
                // end of Bitcoin Proof
                types.buff(Buffer.from(sender, "hex")),
                types.buff(Buffer.from(recipient, "hex")),
                types.buff(Buffer.from(getExpiration(expiration), "hex")),
                types.buff(Buffer.from(hash2, "hex")),
                types.buff(Buffer.from(swapperBuff(borrowerSwapperId), "hex")),
                types.uint(supplierId1),
                types.uint(minToReceive)
            ], borrower_1.address),
            Tx.contractCall("supplier-interface", "make-payment", [
                types.buff(Buffer.from(txId2, "hex")),
                types.buff(Buffer.from(preimage2, "hex")),
                types.uint(loanId),
                types.principal(PAYMENT),
                types.principal(LP_TOKEN),
                types.principal(LIQUIDITY_VAULT),
                types.uint(poolId),
                types.principal(CP_TOKEN),
                types.principal(CP_REWARDS_TOKEN),
                types.principal(ZP_TOKEN),
                types.principal(SWAP_ROUTER),
                types.principal(XBTC), 
            ], borrower_1.address)
        ]);
        // chain.mineEmptyBlock(12960 / 1440);
        // perform all the payments necessary before the loan matures
        // shortened version of the previous payment calls
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, borrower_1.address, sender, recipient, 500, 2, payment, "02", 0, minToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, borrower_1.address, sender, recipient, 500, 2, payment, "03", 0, minToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, borrower_1.address, sender, recipient, 500, 2, payment, "04", 0, minToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, borrower_1.address, sender, recipient, 500, 2, payment, "05", 0, minToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, borrower_1.address, sender, recipient, 500, 2, payment, "06", 0, minToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        // last payment
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, borrower_1.address, sender, recipient, 500, 2, payment, "07", 0, minToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
        // make repayment
        // last payment has to be the amount of the loan the last rewards payment
        chain.mineEmptyBlock(consumeUint(loan.getLoanData(0).result.expectTuple()["next-payment"]) - block.height - 1);
        minToReceive = Math.floor((payment + loanAmount) * 10 / 10_000);
        block = chain.mineBlock([
            ...makePaymentTxs(deployerWallet.address, borrower_1.address, sender, recipient, 500, 2, loanAmount + payment, "08", 0, minToReceive, 0, PAYMENT, LP_TOKEN, LIQUIDITY_VAULT, 0, CP_TOKEN, CP_REWARDS_TOKEN, ZP_TOKEN, SWAP_ROUTER, chain.blockHeight - 1, XBTC)
        ]);
    // console.log(loan.getLoanData(0).result.expectTuple());
    }
});
Clarinet.test({
    name: "Borrower can make an early repayment of the loan",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let coverPoolProvider = accounts.get("wallet_3"); // Cover_1
        let delegate_1 = accounts.get("wallet_7"); // Delegate_1
        let borrower_1 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, borrower_1.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(delegate_1.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(delegate_1.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        chain.mineEmptyBlock(10);
        block = chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000),
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * 10 / 10_000, 1, chain.blockHeight - 1),
            Magic.initializeSwapper(LP_2.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_2.address, sender, recipient, 500, 1, 100_000_000, preimage, 0, 100_000_000 * 10 / 10_000, 1, chain.blockHeight - 1), 
        ]);
        const supplierId1 = consumeUint(block.receipts[1].result.expectOk());
        const loanAmount = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, loanAmount, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, borrower_1.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, delegate_1.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, borrower_1.address)
        ]);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 0, chain.blockHeight - 1, borrower_1.address, deployerWallet.address)
        ]);
        chain.mineEmptyBlock(1300);
        let fee = Number(Magic.getSupplier(chain, 0, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(borrower_1.address)
        ]);
        const preimage00 = "00";
        const expiration = 500;
        const borrowerSwapperId = consumeUint(block.receipts[0].result.expectOk());
        const loanId = 0;
        const poolId = 0;
        // Output in which we're interested for the transaction
        // const outputIndex = 0;
        // the 10 percent is  based on the inbound fee of supplier-1
        let earlyPayment = consumeUint(Payment.getEarlyRepaymentAmount(chain, loanId, borrower_1.address));
        const payment = earlyPayment + loanAmount;
        let minToReceive = Math.floor(payment * 10 / 10_000);
        const hash = getHash(preimage00);
        const tx1 = generateP2SHTx(sender, recipient, expiration, hash, borrowerSwapperId, payment);
        const txId1 = getTxId(tx1);
        const outputIndex = 0;
        const bitcoinBlock = {
            header: "",
            height: chain.blockHeight - 1
        };
        const prevBlocks = [];
        const proof = {
            "tx-index": 0,
            "hashes": [],
            "tree-depth": 0
        };
        // set Bitcoin transaction in the brackground
        block = chain.mineBlock([
            Tx.contractCall("test-utils", "set-mined", [
                types.buff(Buffer.from(txId1, "hex"))
            ], deployerWallet.address)
        ]);
        // Make a payment without registering as a swapper, already registered.
        block = chain.mineBlock([
            Tx.contractCall("supplier-interface", "send-funds", [
                // Data used by the Magic Magic contract to prove that the Bitcoin transaction happened
                types.tuple({
                    header: types.buff(Buffer.from(bitcoinBlock.header, "hex")),
                    height: types.uint(bitcoinBlock.height)
                }),
                types.list(prevBlocks.map((val)=>types.buff(Buffer.from(val, "hex")))),
                types.buff(Buffer.from(tx1, "hex")),
                types.tuple({
                    "tx-index": types.uint(proof['tx-index']),
                    "hashes": types.list(proof.hashes.map((val)=>types.buff(Buffer.from(val, "hex")))),
                    "tree-depth": types.uint(proof['tree-depth'])
                }),
                types.uint(outputIndex),
                // end of Bitcoin Proof
                types.buff(Buffer.from(sender, "hex")),
                types.buff(Buffer.from(recipient, "hex")),
                types.buff(Buffer.from(getExpiration(expiration), "hex")),
                types.buff(Buffer.from(hash, "hex")),
                types.buff(Buffer.from(swapperBuff(borrowerSwapperId), "hex")),
                types.uint(supplierId1),
                types.uint(minToReceive)
            ], borrower_1.address),
            Tx.contractCall("supplier-interface", "make-full-payment", [
                types.buff(Buffer.from(txId1, "hex")),
                types.buff(Buffer.from(preimage00, "hex")),
                types.uint(loanId),
                types.principal(PAYMENT),
                types.principal(LP_TOKEN),
                types.principal(LIQUIDITY_VAULT),
                types.uint(poolId),
                types.principal(CP_TOKEN),
                types.principal(CP_REWARDS_TOKEN),
                types.principal(ZP_TOKEN),
                types.principal(SWAP_ROUTER),
                types.principal(XBTC), 
            ], borrower_1.address)
        ]);
    // loan is Matured and repaid
    }
});
Clarinet.test({
    name: "Borrower can withdraw collateral if value of collateral increases",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let block = runBootstrap(chain, deployerWallet);
        block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = Globals.addCollateralContract(chain, XUSD_CONTRACT_SIMNET, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        pool.enableCover(LP_TOKEN, CP_TOKEN, 0, wallet_7.address);
        block = coverPool.sendFunds(CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, 0, 100_000_000_000n, 10, REWARDS_CALC, cover.address);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 1000, XUSD_CONTRACT_SIMNET, 300, 5760, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        block = chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XUSD_CONTRACT_SIMNET, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        chain.mineEmptyBlock(10);
        let globals = Globals.getGlobals(chain, deployerWallet.address).expectTuple();
        let totalInvestorFees = getBP(LOAN_AMOUNT, consumeUint(globals["treasury-fee"]) + consumeUint(globals["investor-fee"]));
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XUSD_CONTRACT_SIMNET, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 0, 28, wallet_8.address, deployerWallet.address)
        ]);
        chain.mineEmptyBlock(40);
        let pairValue = SwapRouter.getPairValue(chain, SWAP_ROUTER, XBTC, XUSD_CONTRACT_SIMNET, deployerWallet.address);
        block = SwapRouter.setPairValue(chain, SWAP_ROUTER, XBTC, XUSD_CONTRACT_SIMNET, consumeUint(pairValue.expectSome()) * 5000 / 10000, deployerWallet.address);
        block = chain.mineBlock([
            Tx.contractCall(`loan-v1-0`, "withdraw-collateral-loan", [
                types.uint(0),
                types.uint(98634500000),
                types.principal(SWAP_ROUTER),
                types.principal(XUSD_CONTRACT_SIMNET),
                types.principal(XBTC),
                types.principal(COLL_VAULT)
            ], wallet_8.address)
        ]);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZmVybmFuZG9mb3kvRG9jdW1lbnRzL3plc3QtY29udHJhY3RzL29uY2hhaW4vdGVzdHMvc3VwcGxpZXItaW50ZXJmYWNlL2Zsb3dzL2JvcnJvd2VyX2FjdGlvbnNfdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkZW5vLWxpbnQtaWdub3JlLWZpbGVcbmltcG9ydCB7IENsYXJpbmV0LCBUeCwgQ2hhaW4sIEFjY291bnQsIHR5cGVzIH0gZnJvbSAnaHR0cHM6Ly9kZW5vLmxhbmQveC9jbGFyaW5ldEB2MS4wLjMvaW5kZXgudHMnO1xuaW1wb3J0IHsgYXNzZXJ0RXF1YWxzLCBhc3NlcnQgfSBmcm9tICdodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4xNTkuMC90ZXN0aW5nL2Fzc2VydHMudHMnO1xuaW1wb3J0IHsgUG9vbCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcG9vbC12MS0wLnRzJztcbmltcG9ydCB7IENvdmVyUG9vbCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY292ZXItcG9vbC12MS0wLnRzJztcbmltcG9ydCB7IExvYW4gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2xvYW4tdjEtMC50cyc7XG5pbXBvcnQgeyBMUFRva2VuIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9scC10b2tlbi50cyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkQDAuMTU5LjAvbm9kZS9idWZmZXIudHNcIjtcbmltcG9ydCB7IFRlc3RVdGlscyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvdGVzdC11dGlscy50cyc7XG5pbXBvcnQgeyBNYWdpYyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbWFnaWNfcmVhbC50cyc7XG5pbXBvcnQgeyBHbG9iYWxzIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9nbG9iYWxzLnRzJztcbmltcG9ydCB7IFN3YXBSb3V0ZXIgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3N3YXAtcm91dGVyLnRzJztcbmltcG9ydCB7IFN1cHBsaWVySW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9zdXBwbGllcl9pbnRlcmZhY2UudHMnO1xuaW1wb3J0IHsgUGF5bWVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcGF5bWVudC50cyc7XG5pbXBvcnQgeyBcbiAgZ2V0SGFzaCxcbiAgZ2V0UmV2ZXJzZVR4SWQsXG4gIGdldFR4SWQsXG4gIGdldEV4cGlyYXRpb24sXG4gIHN3YXBwZXJCdWZmLFxuICBnZW5lcmF0ZVAyUEtIVHgsXG4gIGdlbmVyYXRlUDJTSFR4LFxufSBmcm9tIFwiLi4vdXRpbC50c1wiO1xuXG5pbXBvcnQge1xuICBzZXRDb250cmFjdE93bmVyLFxuICBpbml0Q29udHJhY3RPd25lcnMsXG4gIGJvb3RzdHJhcEFwcHJvdmVkQ29udHJhY3RzLFxuICBhZGRBcHByb3ZlZENvbnRyYWN0LFxuICBydW5Cb290c3RyYXAsXG4gIGFkZEJvcnJvd2VyLFxuICBzZW5kRnVuZHNQMlNIVHhzLFxuICByZWdpc3RlclN1cHBsaWVyVHhzLFxuICBmaW5hbGl6ZU91dGJvdW5kVHhzLFxuICBjb25zdW1lVWludCxcbiAgbWFrZVBheW1lbnRUeHMsXG4gIGdldEJQLFxuICBmaW5hbGl6ZURyYXdkb3duLFxuICBtYWtlRnVsbFBheW1lbnRUeHNcbn0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb21tb24udHMnO1xuXG5pbXBvcnQge1xuICBMUF9UT0tFTixcbiAgWlBfVE9LRU4sXG4gIFBBWU1FTlQsXG4gIFJFV0FSRFNfQ0FMQyxcbiAgTElRVUlESVRZX1ZBVUxULFxuICBDUF9UT0tFTixcbiAgWEJUQyxcbiAgQ09MTF9WQVVMVCxcbiAgRlVORElOR19WQVVMVCxcbiAgUDJQS0hfVkVSU0lPTixcbiAgSEFTSCxcbiAgcmVjaXBpZW50LFxuICBzZW5kZXIsXG4gIHByZWltYWdlLFxuICBFUlJPUlMsXG4gIE9ORV9EQVksXG4gIFNXQVBfUk9VVEVSLFxuICBaRVNUX1RPS0VOLFxuICBDUF9SRVdBUkRTX1RPS0VOLFxuICBYVVNEX0NPTlRSQUNUX1NJTU5FVCxcbiAgQ09WRVJfVkFVTFRcbn0gZnJvbSBcIi4uL2NvbmZpZy50c1wiO1xuXG5jb25zdCBNQVhfTUFUVVJJVFlfTEVOR1RIID0gMTQ0ICogMzY1ICogMzsgLy8gMyB5ZWFyc1xuXG5DbGFyaW5ldC50ZXN0KHtcbiAgbmFtZTogXCJCb3Jyb3dlciBjcmVhdGVzIGEgTG9hbiBvbiBQb29sIDAuIERlbGVnYXRlIGZ1bmRzIGxvYW4gYW5kIEJvcnJvd2VyIGRyYXdkb3ducyBmdW5kc1wiLFxuICBhc3luYyBmbihjaGFpbjogQ2hhaW4sIGFjY291bnRzOiBNYXA8c3RyaW5nLCBBY2NvdW50Pikge1xuICAgIGxldCBkZXBsb3llcldhbGxldCA9IGFjY291bnRzLmdldChcImRlcGxveWVyXCIpIGFzIEFjY291bnQ7XG4gICAgbGV0IExQXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMVwiKSBhcyBBY2NvdW50OyAvLyBMUF8xXG4gICAgbGV0IExQXzIgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMlwiKSBhcyBBY2NvdW50OyAvLyBMUF8yXG4gICAgbGV0IGNvdmVyUG9vbFByb3ZpZGVyID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzNcIikgYXMgQWNjb3VudDsgLy8gQ292ZXJfMVxuICAgIGxldCBkZWxlZ2F0ZV8xID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzdcIikgYXMgQWNjb3VudDsgLy8gRGVsZWdhdGVfMVxuICAgIGxldCBib3Jyb3dlcl8xID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzhcIikgYXMgQWNjb3VudDsgLy8gYm9ycm93ZXJfMVxuXG4gICAgbGV0IGFzc2V0TWFwcyA9IGNoYWluLmdldEFzc2V0c01hcHMoKTtcbiAgICBsZXQgcG9vbCA9IG5ldyBQb29sKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGxvYW4gPSBuZXcgTG9hbihjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGxldCBjb3ZlclBvb2wgPSBuZXcgQ292ZXJQb29sKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG5cbiAgICAvLyBibG9jayA9IE9uYm9hcmRpbmcub25ib2FyZFVzZXIoY2hhaW4sIGJvcnJvd2VyXzEuYWRkcmVzcywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG4gICAgbGV0IGJsb2NrID0gR2xvYmFscy5vbmJvYXJkVXNlckFkZHJlc3MoY2hhaW4sIGJvcnJvd2VyXzEuYWRkcmVzcywgUDJQS0hfVkVSU0lPTiwgSEFTSCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG4gICAgXG4gICAgYmxvY2sgPSBwb29sLmNyZWF0ZVBvb2woZGVsZWdhdGVfMS5hZGRyZXNzLExQX1RPS0VOLFpQX1RPS0VOLFBBWU1FTlQsUkVXQVJEU19DQUxDLDEwMDAsMTAwMCwxMF8wMDBfMDAwXzAwMCwxMF8wMDBfMDAwXzAwMCwxLE1BWF9NQVRVUklUWV9MRU5HVEgsTElRVUlESVRZX1ZBVUxULENQX1RPS0VOLENPVkVSX1ZBVUxULCBDUF9SRVdBUkRTX1RPS0VOLFhCVEMsdHJ1ZSk7XG4gICAgYmxvY2sgPSBwb29sLmZpbmFsaXplUG9vbChkZWxlZ2F0ZV8xLmFkZHJlc3MsIExQX1RPS0VOLCBaUF9UT0tFTiwgQ1BfVE9LRU4sIDApO1xuXG4gICAgbGV0IHN1cHBsaWVySWRfMCA9IDA7XG4gICAgbGV0IGluYm91bmRTd2FwID0gMDtcbiAgICBcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICAuLi5yZWdpc3RlclN1cHBsaWVyVHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsIHJlY2lwaWVudCwgMTAsIDEwLCA1MDAsIDUwMCwgXCJzdXBwbGllci0xXCIsIDEwXzAwMF8wMDBfMDAwKSxcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKExQXzEuYWRkcmVzcyksXG4gICAgICAuLi5zZW5kRnVuZHNQMlNIVHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsMCxMUF8xLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsaW5ib3VuZFN3YXAsMTAwXzAwMF8wMDAscHJlaW1hZ2Usc3VwcGxpZXJJZF8wLDEwMF8wMDBfMDAwICogMTAgLyAxMF8wMDAsMSxjaGFpbi5ibG9ja0hlaWdodCAtIDEpLFxuICAgICAgTWFnaWMuaW5pdGlhbGl6ZVN3YXBwZXIoTFBfMi5hZGRyZXNzKSxcbiAgICAgIC4uLnNlbmRGdW5kc1AyU0hUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywwLExQXzIuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCxpbmJvdW5kU3dhcCArIDEsMTAwXzAwMF8wMDAscHJlaW1hZ2Usc3VwcGxpZXJJZF8wLDEwMF8wMDBfMDAwICogMTAgLyAxMF8wMDAsMSxjaGFpbi5ibG9ja0hlaWdodCAtIDEpLFxuICAgIF0pO1xuXG4gICAgLy8gU1RBUlRTIEhFUkVcblxuICAgIC8vIExvYW4gaXMgY3JlYXRlZCBieSBCb3Jyb3dlclxuICAgIGNvbnN0IGxvYW5fYW1vdW50ID0gMTAwXzAwMF8wMDA7XG4gICAgY29uc3QgcGF5bWVudF9wZXJpb2QgPSAxNDQwO1xuICAgIGNvbnN0IG51bV9wYXltZW50cyA9IDk7XG4gICAgY29uc3QgY29sbF9yYXRpbyA9IDA7XG4gICAgXG4gICAgY29uc3QgcG9vbElkXzAgPSAwO1xuICAgIGNvbnN0IGFwciA9IDMwMDtcblxuICAgIC8vIEJvcnJvd2VyIGNyZWF0ZXMgTG9hbiAwIGZvciBQb29sIDBcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBUeC5jb250cmFjdENhbGwoXG4gICAgICAgIFwicG9vbC12MS0wXCIsXG4gICAgICAgIFwiY3JlYXRlLWxvYW5cIixcbiAgICAgICAgW1xuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS5scC10b2tlbmApLFxuICAgICAgICAgIHR5cGVzLnVpbnQocG9vbElkXzApLFxuICAgICAgICAgIHR5cGVzLnVpbnQobG9hbl9hbW91bnQpLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS5XcmFwcGVkLUJpdGNvaW5gKSxcbiAgICAgICAgICB0eXBlcy51aW50KGNvbGxfcmF0aW8pLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS5XcmFwcGVkLUJpdGNvaW5gKSxcbiAgICAgICAgICB0eXBlcy51aW50KGFwciksXG4gICAgICAgICAgdHlwZXMudWludChwYXltZW50X3BlcmlvZCAqIG51bV9wYXltZW50cyksXG4gICAgICAgICAgdHlwZXMudWludChwYXltZW50X3BlcmlvZCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LmNvbGwtdmF1bHRgKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoYCR7ZGVwbG95ZXJXYWxsZXQuYWRkcmVzc30uZnVuZGluZy12YXVsdGApLFxuICAgICAgICBdLFxuICAgICAgICBib3Jyb3dlcl8xLmFkZHJlc3NcbiAgICAgIClcbiAgICBdKTtcblxuICAgIGNvbnN0IGxvYW5JZCA9IDA7XG4gICAgXG4gICAgLy8gTG9hbiBpcyBmdW5kZWQgYnkgUG9vbCBEZWxlZ2F0ZVxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIFR4LmNvbnRyYWN0Q2FsbChcbiAgICAgICAgXCJwb29sLXYxLTBcIixcbiAgICAgICAgXCJmdW5kLWxvYW5cIixcbiAgICAgICAgW1xuICAgICAgICAgIHR5cGVzLnVpbnQobG9hbklkKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoYCR7ZGVwbG95ZXJXYWxsZXQuYWRkcmVzc30ubHAtdG9rZW5gKSxcbiAgICAgICAgICB0eXBlcy51aW50KHBvb2xJZF8wKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoYCR7ZGVwbG95ZXJXYWxsZXQuYWRkcmVzc30ubGlxdWlkaXR5LXZhdWx0LXYxLTBgKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoYCR7ZGVwbG95ZXJXYWxsZXQuYWRkcmVzc30uZnVuZGluZy12YXVsdGApLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS5XcmFwcGVkLUJpdGNvaW5gKVxuICAgICAgICBdLFxuICAgICAgICBkZWxlZ2F0ZV8xLmFkZHJlc3NcbiAgICAgIClcbiAgICBdKTtcblxuICAgIC8vIEJhY2tlbmQgcHJvY2VzcyB3aGVyZSB3ZSB1cGRhdGUgdGhlIGxpcXVpZGl0eSBpbiB0aGUgc3VwcGxpZXItaW50ZXJmYWNlLlxuICAgIGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UudXBkYXRlTGlxdWlkaXR5KGNoYWluLmJsb2NrSGVpZ2h0LCAxMDBfMDAwXzAwMCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcbiAgICAvLyBFbmQgb2YgYmFja2VuZCBwcm9jZXNzXG5cbiAgICBsZXQgcHJldiA9IGNoYWluLmdldEFzc2V0c01hcHMoKS5hc3NldHNbXCIuV3JhcHBlZC1CaXRjb2luLndyYXBwZWQtYml0Y29pblwiXVtcIlNUMVBRSFFLVjBSSlhaRlkxREdYOE1OU05ZVkUzVkdaSlNSVFBHWkdNLmxpcXVpZGl0eS12YXVsdC12MS0wXCJdO1xuXG4gICAgLy8gTG9hbiBkcmF3ZG93biBmdW5kcyBmcm9tIFBvb2wgMCBhbmQgc2VuZCBiaXRjb2luIHRvIHRoZSBhZGRyZXNzXG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1xuICAgICAgVHguY29udHJhY3RDYWxsKFxuICAgICAgICBcInN1cHBsaWVyLWludGVyZmFjZVwiLFxuICAgICAgICBcImRyYXdkb3duXCIsXG4gICAgICAgIFtcbiAgICAgICAgICB0eXBlcy51aW50KGxvYW5JZCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LmxwLXRva2VuYCksXG4gICAgICAgICAgdHlwZXMudWludChwb29sSWRfMCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LldyYXBwZWQtQml0Y29pbmApLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS5jb2xsLXZhdWx0YCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LmZ1bmRpbmctdmF1bHRgKSxcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKFAyUEtIX1ZFUlNJT04sIFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKEhBU0gsIFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy51aW50KHN1cHBsaWVySWRfMCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LnN3YXAtcm91dGVyYCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LldyYXBwZWQtQml0Y29pbmApLFxuICAgICAgICBdLFxuICAgICAgICBib3Jyb3dlcl8xLmFkZHJlc3NcbiAgICAgIClcbiAgICBdKTtcbiAgICAvLyBjb25zb2xlLmxvZyhibG9jayk7XG4gICAgLy8gU2hvdWxkIGJlIGVxdWFsIHRvIHRoZSBhbW91bnQgc2VudCBhbmRcbiAgICBhc3NlcnRFcXVhbHMoMTAwXzAwMF8wMDAgLSAzMDAwMDAsIHByZXYgLSBjaGFpbi5nZXRBc3NldHNNYXBzKCkuYXNzZXRzW1wiLldyYXBwZWQtQml0Y29pbi53cmFwcGVkLWJpdGNvaW5cIl1bXCJTVDFQUUhRS1YwUkpYWkZZMURHWDhNTlNOWVZFM1ZHWkpTUlRQR1pHTS5mdW5kaW5nLXZhdWx0XCJdKTtcbiAgICBjaGFpbi5taW5lRW1wdHlCbG9jaygxMCk7XG4gICAgLy8gRmluYWxpemluZyBkcmF3ZG93biwgY2FuIGJlIGNhbGxlZCBieSB0aGUgYmFja2VuZCB0byBjb25maXJtIHRyYW5zYWN0aW9uLlxuICAgIC8vIGR1bW15IHZhbHVlcyB0byBzZXQgb24gdGhlIEJpdGNvaW4gYmxvY2tjaGFpblxuXG4gICAgLy8gZmlyc3Qgb3V0Ym91bmQgc3dhcCBJZFxuICAgIGNvbnN0IHN3YXBJZCA9IDA7XG5cbiAgICAvLyBtaW5lIGR1bW15XG4gICAgbGV0IGdsb2JhbHMgPSBHbG9iYWxzLmdldEdsb2JhbHMoY2hhaW4sIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLmV4cGVjdFR1cGxlKCk7XG4gICAgY29uc3QgdHJlYXN1cnlGZWVCUHMgPSBjb25zdW1lVWludChnbG9iYWxzW1widHJlYXN1cnktZmVlXCJdKTtcbiAgICBjb25zdCBsb2FuQW1vdW50V2l0aG91dFRyZWFzdXJ5RmVlID0gbG9hbl9hbW91bnQgLSAobG9hbl9hbW91bnQgKiB0cmVhc3VyeUZlZUJQcyAvIDEwXzAwMCk7XG4gICAgbGV0IHR4MSA9IGdlbmVyYXRlUDJQS0hUeChIQVNILCBsb2FuQW1vdW50V2l0aG91dFRyZWFzdXJ5RmVlKTtcbiAgICBsZXQgdHhpZDEgPSBnZXRUeElkKHR4MSk7XG4gICAgY2hhaW4ubWluZUJsb2NrKFtUZXN0VXRpbHMuc2V0TWluZWRUeCh0eGlkMSwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcblxuICAgIC8vIER1bW15IHRyYW5zYWN0aW9uIGRhdGEsIGNhbiBiZSBlbXB0eSBibG9jayBoZWFkZXIgYW5kIGJsb2NrXG4gICAgY29uc3QgYml0Y29pbkJsb2NrID0geyBoZWFkZXI6IFwiXCIsIGhlaWdodDogY2hhaW4uYmxvY2tIZWlnaHQgLSAxIH07XG4gICAgY29uc3QgcHJldkJsb2NrcyA9IFtdIGFzIHN0cmluZ1tdO1xuICAgIGNvbnN0IHByb29mID0geyBcInR4LWluZGV4XCI6IDAsIFwiaGFzaGVzXCI6IFtdLCBcInRyZWUtZGVwdGhcIjogMCB9O1xuICAgIC8vIE91dHB1dCBpbiB3aGljaCB3ZSdyZSBpbnRlcmVzdGVkIGZvciB0aGUgdHJhbnNhY3Rpb25cbiAgICBjb25zdCBvdXRwdXRJbmRleCA9IDA7XG5cbiAgICAvLyBhZnRlciBhIGRyYXdkb3duIGhhcyBiZWVuIGNhbGxlZCBhbmQgdGhlIGJpdGNvaW4gdHJhbnNhY3Rpb24gaXMgaW4gdGhlIEJpdGNvaW4gYmxvY2tjaGFpbiwgdGhlIGJhY2tlbmQgY2FsbHMgZmluYWxpemUtZHJhd2Rvd25cbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBUeC5jb250cmFjdENhbGwoXG4gICAgICAgIFwic3VwcGxpZXItaW50ZXJmYWNlXCIsXG4gICAgICAgIFwiZmluYWxpemUtZHJhd2Rvd25cIixcbiAgICAgICAgW1xuICAgICAgICAgIHR5cGVzLnVpbnQobG9hbklkKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoTFBfVE9LRU4pLFxuICAgICAgICAgIHR5cGVzLnVpbnQocG9vbElkXzApLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChYQlRDKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoQ09MTF9WQVVMVCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKEZVTkRJTkdfVkFVTFQpLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChYQlRDKSxcbiAgICAgICAgICB0eXBlcy50dXBsZSh7XG4gICAgICAgICAgICBoZWFkZXI6IHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20oYml0Y29pbkJsb2NrLmhlYWRlciwgXCJoZXhcIikpLFxuICAgICAgICAgICAgaGVpZ2h0OiB0eXBlcy51aW50KGJpdGNvaW5CbG9jay5oZWlnaHQpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdHlwZXMubGlzdChwcmV2QmxvY2tzLm1hcCgodmFsKSA9PiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHZhbCwgXCJoZXhcIikpKSksXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh0eDEsIFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy50dXBsZSh7XG4gICAgICAgICAgICBcInR4LWluZGV4XCI6IHR5cGVzLnVpbnQocHJvb2ZbJ3R4LWluZGV4J10pLFxuICAgICAgICAgICAgXCJoYXNoZXNcIjogdHlwZXMubGlzdChwcm9vZi5oYXNoZXMubWFwKHZhbCA9PiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHZhbCwgXCJoZXhcIikpKSksXG4gICAgICAgICAgICBcInRyZWUtZGVwdGhcIjogdHlwZXMudWludChwcm9vZlsndHJlZS1kZXB0aCddKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHR5cGVzLnVpbnQob3V0cHV0SW5kZXgpLFxuICAgICAgICAgIHR5cGVzLnVpbnQoc3dhcElkKSxcbiAgICAgICAgXSxcbiAgICAgICAgYm9ycm93ZXJfMS5hZGRyZXNzLFxuICAgICAgKVxuICAgIF0pO1xuXG4gICAgYmxvY2sucmVjZWlwdHNbMF0ucmVzdWx0LmV4cGVjdE9rKCk7XG4gIH0sXG59KTtcblxuQ2xhcmluZXQudGVzdCh7XG4gIG5hbWU6IFwiQm9ycm93ZXIgY2FuIGNyZWF0ZSBhIExvYW4gb24gUG9vbCAwLiBEZWxlZ2F0ZSBmdW5kcyBsb2FuIGFuZCBCb3Jyb3dlciBjYW5ub3QgZHJhd24gZnVuZHMgdW5sZXNzIHVzaW5nIGFsbG93ZWQgYWRkcmVzcyBieSBQb29sIERlbGVnYXRlXCIsXG4gIGFzeW5jIGZuKGNoYWluOiBDaGFpbiwgYWNjb3VudHM6IE1hcDxzdHJpbmcsIEFjY291bnQ+KSB7XG4gICAgbGV0IGRlcGxveWVyV2FsbGV0ID0gYWNjb3VudHMuZ2V0KFwiZGVwbG95ZXJcIikgYXMgQWNjb3VudDtcbiAgICBsZXQgTFBfMSA9IGFjY291bnRzLmdldChcIndhbGxldF8xXCIpIGFzIEFjY291bnQ7IC8vIExQXzFcbiAgICBsZXQgTFBfMiA9IGFjY291bnRzLmdldChcIndhbGxldF8yXCIpIGFzIEFjY291bnQ7IC8vIExQXzJcbiAgICBsZXQgY292ZXJQb29sUHJvdmlkZXIgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfM1wiKSBhcyBBY2NvdW50OyAvLyBDb3Zlcl8xXG4gICAgbGV0IGRlbGVnYXRlXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfN1wiKSBhcyBBY2NvdW50OyAvLyBEZWxlZ2F0ZV8xXG4gICAgbGV0IGJvcnJvd2VyXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfOFwiKSBhcyBBY2NvdW50OyAvLyBib3Jyb3dlcl8xXG5cbiAgICBsZXQgYXNzZXRNYXBzID0gY2hhaW4uZ2V0QXNzZXRzTWFwcygpO1xuICAgIGxldCBwb29sID0gbmV3IFBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgbG9hbiA9IG5ldyBMb2FuKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGNvdmVyUG9vbCA9IG5ldyBDb3ZlclBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcblxuICAgIGxldCBibG9jayA9IHJ1bkJvb3RzdHJhcChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIC8vIGJsb2NrID0gT25ib2FyZGluZy5vbmJvYXJkVXNlcihjaGFpbiwgYm9ycm93ZXJfMS5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKTtcbiAgICBibG9jayA9IEdsb2JhbHMub25ib2FyZFVzZXJBZGRyZXNzKGNoYWluLCBib3Jyb3dlcl8xLmFkZHJlc3MsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpO1xuICAgIC8vIGxvYW4uYWRkQm9ycm93ZXIoYm9ycm93ZXJfMS5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKTtcbiAgICBcbiAgICBwb29sLmNyZWF0ZVBvb2woZGVsZWdhdGVfMS5hZGRyZXNzLExQX1RPS0VOLFpQX1RPS0VOLFBBWU1FTlQsUkVXQVJEU19DQUxDLDEwMDAsMTAwMCwxMF8wMDBfMDAwXzAwMCwxMF8wMDBfMDAwXzAwMCwxLE1BWF9NQVRVUklUWV9MRU5HVEgsTElRVUlESVRZX1ZBVUxULENQX1RPS0VOLENPVkVSX1ZBVUxULENQX1JFV0FSRFNfVE9LRU4sWEJUQyx0cnVlKTtcbiAgICBcbiAgICBwb29sLmZpbmFsaXplUG9vbChkZWxlZ2F0ZV8xLmFkZHJlc3MsIExQX1RPS0VOLCBaUF9UT0tFTiwgQ1BfVE9LRU4sIDApO1xuICAgIFxuICAgIGJsb2NrID0gY292ZXJQb29sLnNlbmRGdW5kcyhDUF9UT0tFTixDT1ZFUl9WQVVMVCxDUF9SRVdBUkRTX1RPS0VOLCBaRVNUX1RPS0VOLCAwLCAxXzAwMF8wMDBfMDAwXzAwMG4sIDEwLCBSRVdBUkRTX0NBTEMsIGNvdmVyUG9vbFByb3ZpZGVyLmFkZHJlc3MpO1xuXG4gICAgY2hhaW4ubWluZUVtcHR5QmxvY2soMTApO1xuICAgIFxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIC4uLnJlZ2lzdGVyU3VwcGxpZXJUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgcmVjaXBpZW50LCAxMCwgMTAsIDUwMCwgNTAwLCBcInN1cHBsaWVyLTFcIiwgMTBfMDAwXzAwMF8wMDApLFxuICAgICAgTWFnaWMuaW5pdGlhbGl6ZVN3YXBwZXIoTFBfMS5hZGRyZXNzKSxcbiAgICAgIC4uLnNlbmRGdW5kc1AyU0hUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywwLExQXzEuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCwwLDEwMF8wMDBfMDAwLHByZWltYWdlLDAsMTAwXzAwMF8wMDAgKiAxMCAvIDEwXzAwMCwxLDE0KSxcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKExQXzIuYWRkcmVzcyksXG4gICAgICAuLi5zZW5kRnVuZHNQMlNIVHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsMCxMUF8yLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsMSwxMDBfMDAwXzAwMCxwcmVpbWFnZSwwLDEwMF8wMDBfMDAwICogMTAgLyAxMF8wMDAsMSwxNCksXG4gICAgXSk7XG5cbiAgICAvLyBMb2FuIGlzIGNyZWF0ZWQgYnkgQm9ycm93ZXJcbiAgICBibG9jayA9IHBvb2wuY3JlYXRlTG9hbihMUF9UT0tFTiwwLDEwMF8wMDBfMDAwLFhCVEMsMCxYQlRDLDMwMCwxMjk2MCwxNDQwLENPTExfVkFVTFQsRlVORElOR19WQVVMVCxib3Jyb3dlcl8xLmFkZHJlc3MpO1xuICAgIC8vIExvYW4gaXMgZnVuZGVkIGJ5IFBvb2wgRGVsZWdhdGVcbiAgICBibG9jayA9IHBvb2wuZnVuZExvYW4oMCxMUF9UT0tFTiwwLExJUVVJRElUWV9WQVVMVCwgRlVORElOR19WQVVMVCxYQlRDLCBkZWxlZ2F0ZV8xLmFkZHJlc3MpO1xuICAgIC8vIExvYW4gZHJhd2Rvd24gZnVuZHMgZnJvbSBQb29sIDAgYW5kIHNlbmQgYml0Y29pbiB0byB0aGUgYWRkcmVzc1xuXG4gICAgY2hhaW4ubWluZUJsb2NrKFtTdXBwbGllckludGVyZmFjZS51cGRhdGVMaXF1aWRpdHkoY2hhaW4uYmxvY2tIZWlnaHQsIDEwMF8wMDBfMDAwLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pO1xuXG4gICAgbGV0IHByZXYgPSBjaGFpbi5nZXRBc3NldHNNYXBzKCkuYXNzZXRzW1wiLldyYXBwZWQtQml0Y29pbi53cmFwcGVkLWJpdGNvaW5cIl1bXCJTVDFQUUhRS1YwUkpYWkZZMURHWDhNTlNOWVZFM1ZHWkpTUlRQR1pHTS5saXF1aWRpdHktdmF1bHQtdjEtMFwiXTtcblxuICAgIC8vIHRyeSBmaXJzdFxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtTdXBwbGllckludGVyZmFjZS5kcmF3ZG93bigwLCBMUF9UT0tFTiwgMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgUDJQS0hfVkVSU0lPTiwgXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxXCIsIDAsIFNXQVBfUk9VVEVSLFhCVEMsIGJvcnJvd2VyXzEuYWRkcmVzcyldKTtcbiAgICBibG9jay5yZWNlaXB0c1swXS5yZXN1bHQuZXhwZWN0RXJyKCkuZXhwZWN0VWludCgxMDA3KTtcbiAgICBibG9jayA9IEdsb2JhbHMub25ib2FyZFVzZXJBZGRyZXNzKGNoYWluLCBib3Jyb3dlcl8xLmFkZHJlc3MsIFAyUEtIX1ZFUlNJT04sIFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKTtcblxuICAgIC8vIHRyeSBhZ2FpbiB3aXRoIGFkZGVkIGFkZHJlc3NcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UuZHJhd2Rvd24oMCwgTFBfVE9LRU4sIDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIDAsIFNXQVBfUk9VVEVSLFhCVEMsIGJvcnJvd2VyXzEuYWRkcmVzcyldKTtcblxuICAgIGFzc2VydEVxdWFscygxMDBfMDAwXzAwMCAtIDMwMDAwMCwgcHJldiAtIGNoYWluLmdldEFzc2V0c01hcHMoKS5hc3NldHNbXCIuV3JhcHBlZC1CaXRjb2luLndyYXBwZWQtYml0Y29pblwiXVtcIlNUMVBRSFFLVjBSSlhaRlkxREdYOE1OU05ZVkUzVkdaSlNSVFBHWkdNLmZ1bmRpbmctdmF1bHRcIl0pO1xuICAgIGNoYWluLm1pbmVFbXB0eUJsb2NrKDEwKTtcbiAgICAvLyBGaW5hbGl6aW5nIGRyYXdkb3duLCBjYW4gYmUgY2FsbGVkIGJ5IGFueW9uZSB0byBjb25maXJtIHRyYW5zYWN0aW9uLlxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIC4uLmZpbmFsaXplT3V0Ym91bmRUeHMoSEFTSCwgOTk3MDAwMDAsIDAsIDI4LCBib3Jyb3dlcl8xLmFkZHJlc3MsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpXG4gICAgXSk7XG4gICAgYmxvY2sucmVjZWlwdHNbMV0ucmVzdWx0LmV4cGVjdE9rKCk7XG4gIH0sXG59KTtcblxuQ2xhcmluZXQudGVzdCh7XG4gIG5hbWU6IFwiQm9ycm93ZXIgY2FuIG1ha2UgcGF5bWVudHMgZm9yIHRoZSBsb2FuXCIsXG4gIGFzeW5jIGZuKGNoYWluOiBDaGFpbiwgYWNjb3VudHM6IE1hcDxzdHJpbmcsIEFjY291bnQ+KSB7XG4gICAgbGV0IGRlcGxveWVyV2FsbGV0ID0gYWNjb3VudHMuZ2V0KFwiZGVwbG95ZXJcIikgYXMgQWNjb3VudDtcbiAgICBsZXQgTFBfMSA9IGFjY291bnRzLmdldChcIndhbGxldF8xXCIpIGFzIEFjY291bnQ7IC8vIExQXzFcbiAgICBsZXQgTFBfMiA9IGFjY291bnRzLmdldChcIndhbGxldF8yXCIpIGFzIEFjY291bnQ7IC8vIExQXzJcbiAgICBsZXQgY292ZXJQb29sUHJvdmlkZXIgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfM1wiKSBhcyBBY2NvdW50OyAvLyBDb3Zlcl8xXG4gICAgbGV0IGRlbGVnYXRlXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfN1wiKSBhcyBBY2NvdW50OyAvLyBEZWxlZ2F0ZV8xXG4gICAgbGV0IGJvcnJvd2VyXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfOFwiKSBhcyBBY2NvdW50OyAvLyBib3Jyb3dlcl8xXG5cbiAgICBsZXQgYXNzZXRNYXBzID0gY2hhaW4uZ2V0QXNzZXRzTWFwcygpO1xuICAgIGxldCBwb29sID0gbmV3IFBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgbG9hbiA9IG5ldyBMb2FuKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGNvdmVyUG9vbCA9IG5ldyBDb3ZlclBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcblxuICAgIGxldCBibG9jayA9IEdsb2JhbHMub25ib2FyZFVzZXJBZGRyZXNzKGNoYWluLCBib3Jyb3dlcl8xLmFkZHJlc3MsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpO1xuICAgIFxuICAgIHBvb2wuY3JlYXRlUG9vbChkZWxlZ2F0ZV8xLmFkZHJlc3MsTFBfVE9LRU4sWlBfVE9LRU4sUEFZTUVOVCxSRVdBUkRTX0NBTEMsMTAwMCwxMDAwLDEwXzAwMF8wMDBfMDAwLDEwXzAwMF8wMDBfMDAwLDEsTUFYX01BVFVSSVRZX0xFTkdUSCxMSVFVSURJVFlfVkFVTFQsQ1BfVE9LRU4sQ09WRVJfVkFVTFQsQ1BfUkVXQVJEU19UT0tFTixYQlRDLHRydWUpO1xuICAgIHBvb2wuZmluYWxpemVQb29sKGRlbGVnYXRlXzEuYWRkcmVzcywgTFBfVE9LRU4sIFpQX1RPS0VOLCBDUF9UT0tFTiwgMCk7XG4gICAgY2hhaW4ubWluZUVtcHR5QmxvY2soMTApO1xuICAgIFxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIC4uLnJlZ2lzdGVyU3VwcGxpZXJUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgcmVjaXBpZW50LCAxMCwgMTAsIDUwMCwgNTAwLCBcInN1cHBsaWVyLTFcIiwgMTBfMDAwXzAwMF8wMDApLFxuICAgICAgTWFnaWMuaW5pdGlhbGl6ZVN3YXBwZXIoTFBfMS5hZGRyZXNzKSxcbiAgICAgIC4uLnNlbmRGdW5kc1AyU0hUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywwLExQXzEuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCwwLDEwMF8wMDBfMDAwLHByZWltYWdlLDAsMTAwXzAwMF8wMDAgKiAxMCAvIDEwXzAwMCwxLDE0KSxcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKExQXzIuYWRkcmVzcyksXG4gICAgICAuLi5zZW5kRnVuZHNQMlNIVHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsMCxMUF8yLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsMSwxMDBfMDAwXzAwMCxwcmVpbWFnZSwwLDEwMF8wMDBfMDAwICogMTAgLyAxMF8wMDAsMSwxNCksXG4gICAgXSk7XG4gICAgY29uc3Qgc3VwcGxpZXJJZDEgPSAoY29uc3VtZVVpbnQoYmxvY2sucmVjZWlwdHNbMV0ucmVzdWx0LmV4cGVjdE9rKCkpKTtcbiAgICBjb25zdCBsb2FuQW1vdW50ID0gMTAwXzAwMF8wMDA7XG5cbiAgICBibG9jayA9IHBvb2wuY3JlYXRlTG9hbihMUF9UT0tFTiwwLGxvYW5BbW91bnQsWEJUQywwLFhCVEMsMzAwLDEyOTYwLDE0NDAsQ09MTF9WQVVMVCxGVU5ESU5HX1ZBVUxULGJvcnJvd2VyXzEuYWRkcmVzcyk7XG4gICAgXG4gICAgYmxvY2sgPSBwb29sLmZ1bmRMb2FuKDAsTFBfVE9LRU4sMCxMSVFVSURJVFlfVkFVTFQsRlVORElOR19WQVVMVCxYQlRDLGRlbGVnYXRlXzEuYWRkcmVzcyk7XG4gICAgY2hhaW4ubWluZUJsb2NrKFtTdXBwbGllckludGVyZmFjZS51cGRhdGVMaXF1aWRpdHkoY2hhaW4uYmxvY2tIZWlnaHQsIDEwMF8wMDBfMDAwLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pO1xuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIFN1cHBsaWVySW50ZXJmYWNlLmRyYXdkb3duKDAsIExQX1RPS0VOLCAwLCBYQlRDLCBDT0xMX1ZBVUxULCBGVU5ESU5HX1ZBVUxULCBQMlBLSF9WRVJTSU9OLCBIQVNILCAwLCBTV0FQX1JPVVRFUixYQlRDLCBib3Jyb3dlcl8xLmFkZHJlc3MpXG4gICAgXSk7XG5cbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbLi4uZmluYWxpemVEcmF3ZG93bigwLCBMUF9UT0tFTiwgMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgWEJUQywgSEFTSCwgOTk3MDAwMDAsIDAsIGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgYm9ycm93ZXJfMS5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pO1xuXG4gICAgY2hhaW4ubWluZUVtcHR5QmxvY2soMTMwMCk7XG5cbiAgICBsZXQgZmVlID0gTnVtYmVyKE1hZ2ljLmdldFN1cHBsaWVyKGNoYWluLCAwLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKS5leHBlY3RTb21lKCkuZXhwZWN0VHVwbGUoKVtcImluYm91bmQtZmVlXCJdLmV4cGVjdFNvbWUoKSk7XG4gICAgLy8gU1RBUlRTIEhFUkVcbiAgICAvLyBpbml0aWFsaXplcyBCb3Jyb3dlcl8xIGFzIGEgc3dhcHBlclxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFsgTWFnaWMuaW5pdGlhbGl6ZVN3YXBwZXIoYm9ycm93ZXJfMS5hZGRyZXNzKSBdKTtcblxuICAgIC8vIG1ha2UgZmlyc3QgcGF5bWVudFxuICAgIGNvbnN0IGhhc2ggPSBnZXRIYXNoKHByZWltYWdlKTtcbiAgICBjb25zdCBleHBpcmF0aW9uID0gNTAwO1xuICAgIGNvbnN0IGJvcnJvd2VyU3dhcHBlcklkID0gY29uc3VtZVVpbnQoYmxvY2sucmVjZWlwdHNbMF0ucmVzdWx0LmV4cGVjdE9rKCkpO1xuICAgIGNvbnN0IGxvYW5JZCA9IDA7XG4gICAgY29uc3QgcG9vbElkID0gMDtcbiAgICAvLyBUT0RPOiBnZW5lcmF0ZSBwYXltZW50IGZyb20gbG9hbiBkYXRhXG4gICAgY29uc3QgcGF5bWVudCA9IDgyMTkxO1xuICAgIGNvbnN0IHR4MSA9IGdlbmVyYXRlUDJTSFR4KHNlbmRlciwgcmVjaXBpZW50LCBleHBpcmF0aW9uLCBoYXNoLCBib3Jyb3dlclN3YXBwZXJJZCwgcGF5bWVudCk7XG4gICAgY29uc3QgdHhJZDEgPSBnZXRUeElkKHR4MSk7XG5cbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbIFR4LmNvbnRyYWN0Q2FsbChcInRlc3QtdXRpbHNcIixcInNldC1taW5lZFwiLCBbIHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20odHhJZDEsIFwiaGV4XCIpKSBdLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKSBdKTtcblxuICAgIGNvbnN0IGJpdGNvaW5CbG9jayA9IHsgaGVhZGVyOiBcIlwiLCBoZWlnaHQ6IGNoYWluLmJsb2NrSGVpZ2h0IC0gMSB9O1xuICAgIGNvbnN0IHByZXZCbG9ja3MgPSBbXSBhcyBzdHJpbmdbXTtcbiAgICBjb25zdCBwcm9vZiA9IHsgXCJ0eC1pbmRleFwiOiAwLCBcImhhc2hlc1wiOiBbXSwgXCJ0cmVlLWRlcHRoXCI6IDAgfVxuXG4gICAgLy8gT3V0cHV0IGluIHdoaWNoIHdlJ3JlIGludGVyZXN0ZWQgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgIGNvbnN0IG91dHB1dEluZGV4ID0gMDtcbiAgICAvLyB0aGUgMTAgcGVyY2VudCBpcyAgYmFzZWQgb24gdGhlIGluYm91bmQgZmVlIG9mIHN1cHBsaWVyLTFcbiAgICBsZXQgbWluVG9SZWNlaXZlID0gTWF0aC5mbG9vcihwYXltZW50ICogMTAgLyAxMF8wMDApO1xuXG4gICAgLy8gc2VuZGluZyBmdW5kcyBieSB2YWxpZGF0aW5nIHRyYW5zYWN0aW9uLlxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIFR4LmNvbnRyYWN0Q2FsbChcbiAgICAgICAgXCJzdXBwbGllci1pbnRlcmZhY2VcIixcbiAgICAgICAgXCJzZW5kLWZ1bmRzXCIsXG4gICAgICAgIFtcbiAgICAgICAgICAvLyBEYXRhIHVzZWQgYnkgdGhlIE1hZ2ljIE1hZ2ljIGNvbnRyYWN0IHRvIHByb3ZlIHRoYXQgdGhlIEJpdGNvaW4gdHJhbnNhY3Rpb24gaGFwcGVuZWRcbiAgICAgICAgICB0eXBlcy50dXBsZSh7XG4gICAgICAgICAgICBoZWFkZXI6IHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20oYml0Y29pbkJsb2NrLmhlYWRlciwgXCJoZXhcIikpLFxuICAgICAgICAgICAgaGVpZ2h0OiB0eXBlcy51aW50KGJpdGNvaW5CbG9jay5oZWlnaHQpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdHlwZXMubGlzdChwcmV2QmxvY2tzLm1hcCgodmFsKSA9PiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHZhbCwgXCJoZXhcIikpKSksXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh0eDEsIFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy50dXBsZSh7XG4gICAgICAgICAgICBcInR4LWluZGV4XCI6IHR5cGVzLnVpbnQocHJvb2ZbJ3R4LWluZGV4J10pLFxuICAgICAgICAgICAgXCJoYXNoZXNcIjogdHlwZXMubGlzdChwcm9vZi5oYXNoZXMubWFwKHZhbCA9PiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHZhbCwgXCJoZXhcIikpKSksXG4gICAgICAgICAgICBcInRyZWUtZGVwdGhcIjogdHlwZXMudWludChwcm9vZlsndHJlZS1kZXB0aCddKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHR5cGVzLnVpbnQob3V0cHV0SW5kZXgpLFxuICAgICAgICAgIC8vIGVuZCBvZiBCaXRjb2luIFByb29mXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShzZW5kZXIsIFwiaGV4XCIpKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQdWJsaWMga2V5IG9mIHRoZSBMUF8xIHNlbmRpbmcgdGhlIEJpdGNvaW4uIFVzZWQgdG8gcmVjb3ZlciB0aGUgZnVuZHMgaWYgdGhlIHNlbnQgYml0Y29pbiBmYWlscy5cbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHJlY2lwaWVudCwgXCJoZXhcIikpLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1YmxpYyBrZXkgdXNlZCBieSB0aGUgTWFnaWMgdGhhdCBpcyB0aGUgcmVjaXBpZW50IG9mIEJpdGNvaW4uXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShnZXRFeHBpcmF0aW9uKGV4cGlyYXRpb24pLCBcImhleFwiKSksICAgICAgICAvLyBFeHBpcmF0aW9uIHRpbWUgaW4gTGl0dGxlIEVuZGlhbiBhbmQgcGFkZGVkIHRvIDIgYnl0ZXMgKHN0cmluZyBsZW5ndGggb2YgNCkuIEV4IGZvciA1MDA6ICcwMUY0J1xuICAgICAgICAgIHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20oaGFzaCwgXCJoZXhcIikpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFzaCBvZiB0aGUgcHJlaW1hZ2UgdXNlZCBmb3IgdGhlIEhUTENcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHN3YXBwZXJCdWZmKGJvcnJvd2VyU3dhcHBlcklkKSwgXCJoZXhcIikpLCAgIC8vIFN3YXBwZXIgaWQgaW4gTGl0dGxlIGVuZGluZyBwYWRkZWQgdG8gNCBieXRlcyAoc3RyaW5nIGxlbmd0aCBvZiA4KS4gRXggZm9yIHUwOiBcIjAwMDAwMDAwXCJcbiAgICAgICAgICB0eXBlcy51aW50KHN1cHBsaWVySWQxKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdXBwbGllciBpZCBpbiB1aW50XG4gICAgICAgICAgdHlwZXMudWludChtaW5Ub1JlY2VpdmUpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWluaW11bSBhbW91bnQgdGhhdCBoYXMgdG8gYmUgcmVjZWl2ZWQuIElzIHRoZSBhbW91bnQgb2YgdGhlIHNlbnQgZnVuZHMgbWludXMgdGhlIGZlZXMgb2YgdGhlIHN1cHBsaWVyLlxuICAgICAgICBdLFxuICAgICAgICBib3Jyb3dlcl8xLmFkZHJlc3NcbiAgICAgIClcbiAgICBdKTtcbiAgICBcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBUeC5jb250cmFjdENhbGwoXG4gICAgICAgIFwic3VwcGxpZXItaW50ZXJmYWNlXCIsXG4gICAgICAgIFwibWFrZS1wYXltZW50XCIsXG4gICAgICAgIFtcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHR4SWQxLFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHByZWltYWdlLFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy51aW50KGxvYW5JZCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKFBBWU1FTlQpLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChMUF9UT0tFTiksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKExJUVVJRElUWV9WQVVMVCksXG4gICAgICAgICAgdHlwZXMudWludChwb29sSWQpLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChDUF9UT0tFTiksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKENQX1JFV0FSRFNfVE9LRU4pLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChaUF9UT0tFTiksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKFNXQVBfUk9VVEVSKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoWEJUQyksXG4gICAgICAgIF0sXG4gICAgICAgIGJvcnJvd2VyXzEuYWRkcmVzc1xuICAgICAgKVxuICAgIF0pO1xuXG4gICAgLy8gbWluZSBhIHBheW1lbnQgcGVyaW9kIGFtb3VudCBvZiB0aW1lXG4gICAgLy8gY2hhaW4ubWluZUVtcHR5QmxvY2soMTI5NjAgLyAxNDQwKTtcbiAgICBjaGFpbi5taW5lRW1wdHlCbG9jayhjb25zdW1lVWludChsb2FuLmdldExvYW5EYXRhKDApLnJlc3VsdC5leHBlY3RUdXBsZSgpW1wibmV4dC1wYXltZW50XCJdKSAtIGJsb2NrLmhlaWdodCAtIDEpO1xuICAgIC8vIC8vIEJvcnJvd2VyIG1ha2VzIGEgMm5kIHBheW1lbnQgdG8gdGhlIGxvYW4uIE5vIG5lZWQgZm9yIGluaXRpYWxpemluZ1xuXG4gICAgY29uc3QgcHJlaW1hZ2UyID0gXCIwMVwiO1xuICAgIGNvbnN0IGhhc2gyID0gZ2V0SGFzaChwcmVpbWFnZTIpO1xuICAgIGNvbnN0IHR4MiA9IGdlbmVyYXRlUDJTSFR4KHNlbmRlciwgcmVjaXBpZW50LCBleHBpcmF0aW9uLCBoYXNoMiwgYm9ycm93ZXJTd2FwcGVySWQsIHBheW1lbnQpO1xuICAgIGNvbnN0IHR4SWQyID0gZ2V0VHhJZCh0eDIpO1xuICAgIGNvbnN0IGJpdGNvaW5CbG9jazIgPSB7IGhlYWRlcjogXCJcIiwgaGVpZ2h0OiBjaGFpbi5ibG9ja0hlaWdodCAtIDEgfTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFsgVHguY29udHJhY3RDYWxsKFwidGVzdC11dGlsc1wiLFwic2V0LW1pbmVkXCIsIFsgdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh0eElkMiwgXCJoZXhcIikpIF0sIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpIF0pO1xuXG4gICAgLy8gTWFrZSBhIHBheW1lbnQgd2l0aG91dCByZWdpc3RlcmluZyBhcyBhIHN3YXBwZXIsIGFscmVhZHkgcmVnaXN0ZXJlZC5cbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBUeC5jb250cmFjdENhbGwoXG4gICAgICAgIFwic3VwcGxpZXItaW50ZXJmYWNlXCIsXG4gICAgICAgIFwic2VuZC1mdW5kc1wiLFxuICAgICAgICBbXG4gICAgICAgICAgLy8gRGF0YSB1c2VkIGJ5IHRoZSBNYWdpYyBNYWdpYyBjb250cmFjdCB0byBwcm92ZSB0aGF0IHRoZSBCaXRjb2luIHRyYW5zYWN0aW9uIGhhcHBlbmVkXG4gICAgICAgICAgdHlwZXMudHVwbGUoe1xuICAgICAgICAgICAgaGVhZGVyOiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKGJpdGNvaW5CbG9jazIuaGVhZGVyLCBcImhleFwiKSksXG4gICAgICAgICAgICBoZWlnaHQ6IHR5cGVzLnVpbnQoYml0Y29pbkJsb2NrMi5oZWlnaHQpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdHlwZXMubGlzdChwcmV2QmxvY2tzLm1hcCgodmFsKSA9PiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHZhbCwgXCJoZXhcIikpKSksXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh0eDIsIFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy50dXBsZSh7XG4gICAgICAgICAgICBcInR4LWluZGV4XCI6IHR5cGVzLnVpbnQocHJvb2ZbJ3R4LWluZGV4J10pLFxuICAgICAgICAgICAgXCJoYXNoZXNcIjogdHlwZXMubGlzdChwcm9vZi5oYXNoZXMubWFwKHZhbCA9PiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHZhbCwgXCJoZXhcIikpKSksXG4gICAgICAgICAgICBcInRyZWUtZGVwdGhcIjogdHlwZXMudWludChwcm9vZlsndHJlZS1kZXB0aCddKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHR5cGVzLnVpbnQob3V0cHV0SW5kZXgpLFxuICAgICAgICAgIC8vIGVuZCBvZiBCaXRjb2luIFByb29mXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShzZW5kZXIsIFwiaGV4XCIpKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQdWJsaWMga2V5IG9mIHRoZSBMUF8xIHNlbmRpbmcgdGhlIEJpdGNvaW4uIFVzZWQgdG8gcmVjb3ZlciB0aGUgZnVuZHMgaWYgdGhlIHNlbnQgYml0Y29pbiBmYWlscy5cbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHJlY2lwaWVudCwgXCJoZXhcIikpLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1YmxpYyBrZXkgdXNlZCBieSB0aGUgTWFnaWMgdGhhdCBpcyB0aGUgcmVjaXBpZW50IG9mIEJpdGNvaW4uXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShnZXRFeHBpcmF0aW9uKGV4cGlyYXRpb24pLCBcImhleFwiKSksICAgICAgICAvLyBFeHBpcmF0aW9uIHRpbWUgaW4gTGl0dGxlIEVuZGlhbiBhbmQgcGFkZGVkIHRvIDIgYnl0ZXMgKHN0cmluZyBsZW5ndGggb2YgNCkuIEV4IGZvciA1MDA6ICcwMUY0J1xuICAgICAgICAgIHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20oaGFzaDIsIFwiaGV4XCIpKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhc2ggb2YgdGhlIHByZWltYWdlIHVzZWQgZm9yIHRoZSBIVExDXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShzd2FwcGVyQnVmZihib3Jyb3dlclN3YXBwZXJJZCksIFwiaGV4XCIpKSwgICAvLyBTd2FwcGVyIGlkIGluIExpdHRsZSBlbmRpbmcgcGFkZGVkIHRvIDQgYnl0ZXMgKHN0cmluZyBsZW5ndGggb2YgOCkuIEV4IGZvciB1MDogXCIwMDAwMDAwMFwiXG4gICAgICAgICAgdHlwZXMudWludChzdXBwbGllcklkMSksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VwcGxpZXIgaWQgaW4gdWludFxuICAgICAgICAgIHR5cGVzLnVpbnQobWluVG9SZWNlaXZlKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pbmltdW0gYW1vdW50IHRoYXQgaGFzIHRvIGJlIHJlY2VpdmVkLiBJcyB0aGUgYW1vdW50IG9mIHRoZSBzZW50IGZ1bmRzIG1pbnVzIHRoZSBmZWVzIG9mIHRoZSBzdXBwbGllci5cbiAgICAgICAgXSxcbiAgICAgICAgYm9ycm93ZXJfMS5hZGRyZXNzXG4gICAgICApLFxuICAgICAgVHguY29udHJhY3RDYWxsKFxuICAgICAgICBcInN1cHBsaWVyLWludGVyZmFjZVwiLFxuICAgICAgICBcIm1ha2UtcGF5bWVudFwiLFxuICAgICAgICBbXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh0eElkMixcImhleFwiKSksXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShwcmVpbWFnZTIsXCJoZXhcIikpLFxuICAgICAgICAgIHR5cGVzLnVpbnQobG9hbklkKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoUEFZTUVOVCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKExQX1RPS0VOKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoTElRVUlESVRZX1ZBVUxUKSxcbiAgICAgICAgICB0eXBlcy51aW50KHBvb2xJZCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKENQX1RPS0VOKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoQ1BfUkVXQVJEU19UT0tFTiksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKFpQX1RPS0VOKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoU1dBUF9ST1VURVIpLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChYQlRDKSxcbiAgICAgICAgXSxcbiAgICAgICAgYm9ycm93ZXJfMS5hZGRyZXNzXG4gICAgICApXG4gICAgXSk7XG5cbiAgICAvLyBjaGFpbi5taW5lRW1wdHlCbG9jaygxMjk2MCAvIDE0NDApO1xuICAgIC8vIHBlcmZvcm0gYWxsIHRoZSBwYXltZW50cyBuZWNlc3NhcnkgYmVmb3JlIHRoZSBsb2FuIG1hdHVyZXNcbiAgICAvLyBzaG9ydGVuZWQgdmVyc2lvbiBvZiB0aGUgcHJldmlvdXMgcGF5bWVudCBjYWxsc1xuICAgIGNoYWluLm1pbmVFbXB0eUJsb2NrKGNvbnN1bWVVaW50KGxvYW4uZ2V0TG9hbkRhdGEoMCkucmVzdWx0LmV4cGVjdFR1cGxlKClbXCJuZXh0LXBheW1lbnRcIl0pIC0gYmxvY2suaGVpZ2h0IC0gMSk7XG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1xuICAgICAgLi4ubWFrZVBheW1lbnRUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgYm9ycm93ZXJfMS5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDIscGF5bWVudCxcIjAyXCIsMCxtaW5Ub1JlY2VpdmUsMCwgUEFZTUVOVCwgTFBfVE9LRU4sIExJUVVJRElUWV9WQVVMVCwgMCwgQ1BfVE9LRU4sIENQX1JFV0FSRFNfVE9LRU4sIFpQX1RPS0VOLCBTV0FQX1JPVVRFUixjaGFpbi5ibG9ja0hlaWdodCAtIDEsIFhCVEMpXG4gICAgXSk7XG4gICAgY2hhaW4ubWluZUVtcHR5QmxvY2soY29uc3VtZVVpbnQobG9hbi5nZXRMb2FuRGF0YSgwKS5yZXN1bHQuZXhwZWN0VHVwbGUoKVtcIm5leHQtcGF5bWVudFwiXSkgLSBibG9jay5oZWlnaHQgLSAxKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICAuLi5tYWtlUGF5bWVudFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCBib3Jyb3dlcl8xLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsMixwYXltZW50LFwiMDNcIiwwLG1pblRvUmVjZWl2ZSwwLCBQQVlNRU5ULCBMUF9UT0tFTiwgTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQylcbiAgICBdKTtcbiAgICBjaGFpbi5taW5lRW1wdHlCbG9jayhjb25zdW1lVWludChsb2FuLmdldExvYW5EYXRhKDApLnJlc3VsdC5leHBlY3RUdXBsZSgpW1wibmV4dC1wYXltZW50XCJdKSAtIGJsb2NrLmhlaWdodCAtIDEpO1xuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIC4uLm1ha2VQYXltZW50VHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsIGJvcnJvd2VyXzEuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCwyLHBheW1lbnQsXCIwNFwiLDAsbWluVG9SZWNlaXZlLDAsIFBBWU1FTlQsIExQX1RPS0VOLCBMSVFVSURJVFlfVkFVTFQsIDAsIENQX1RPS0VOLCBDUF9SRVdBUkRTX1RPS0VOLCBaUF9UT0tFTiwgU1dBUF9ST1VURVIsY2hhaW4uYmxvY2tIZWlnaHQgLSAxLCBYQlRDKVxuICAgIF0pO1xuICAgIGNoYWluLm1pbmVFbXB0eUJsb2NrKGNvbnN1bWVVaW50KGxvYW4uZ2V0TG9hbkRhdGEoMCkucmVzdWx0LmV4cGVjdFR1cGxlKClbXCJuZXh0LXBheW1lbnRcIl0pIC0gYmxvY2suaGVpZ2h0IC0gMSk7XG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1xuICAgICAgLi4ubWFrZVBheW1lbnRUeHMoZGVwbG95ZXJXYWxsZXQuYWRkcmVzcywgYm9ycm93ZXJfMS5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDIscGF5bWVudCxcIjA1XCIsMCxtaW5Ub1JlY2VpdmUsMCwgUEFZTUVOVCwgTFBfVE9LRU4sIExJUVVJRElUWV9WQVVMVCwgMCwgQ1BfVE9LRU4sIENQX1JFV0FSRFNfVE9LRU4sIFpQX1RPS0VOLCBTV0FQX1JPVVRFUixjaGFpbi5ibG9ja0hlaWdodCAtIDEsIFhCVEMpXG4gICAgXSk7XG4gICAgY2hhaW4ubWluZUVtcHR5QmxvY2soY29uc3VtZVVpbnQobG9hbi5nZXRMb2FuRGF0YSgwKS5yZXN1bHQuZXhwZWN0VHVwbGUoKVtcIm5leHQtcGF5bWVudFwiXSkgLSBibG9jay5oZWlnaHQgLSAxKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICAuLi5tYWtlUGF5bWVudFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCBib3Jyb3dlcl8xLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsMixwYXltZW50LFwiMDZcIiwwLG1pblRvUmVjZWl2ZSwwLCBQQVlNRU5ULCBMUF9UT0tFTiwgTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQylcbiAgICBdKTtcbiAgICAvLyBsYXN0IHBheW1lbnRcbiAgICBjaGFpbi5taW5lRW1wdHlCbG9jayhjb25zdW1lVWludChsb2FuLmdldExvYW5EYXRhKDApLnJlc3VsdC5leHBlY3RUdXBsZSgpW1wibmV4dC1wYXltZW50XCJdKSAtIGJsb2NrLmhlaWdodCAtIDEpO1xuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIC4uLm1ha2VQYXltZW50VHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsIGJvcnJvd2VyXzEuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCwyLHBheW1lbnQsXCIwN1wiLDAsbWluVG9SZWNlaXZlLDAsIFBBWU1FTlQsIExQX1RPS0VOLCBMSVFVSURJVFlfVkFVTFQsIDAsIENQX1RPS0VOLCBDUF9SRVdBUkRTX1RPS0VOLCBaUF9UT0tFTiwgU1dBUF9ST1VURVIsY2hhaW4uYmxvY2tIZWlnaHQgLSAxLCBYQlRDKVxuICAgIF0pO1xuICAgIC8vIG1ha2UgcmVwYXltZW50XG4gICAgLy8gbGFzdCBwYXltZW50IGhhcyB0byBiZSB0aGUgYW1vdW50IG9mIHRoZSBsb2FuIHRoZSBsYXN0IHJld2FyZHMgcGF5bWVudFxuICAgIGNoYWluLm1pbmVFbXB0eUJsb2NrKGNvbnN1bWVVaW50KGxvYW4uZ2V0TG9hbkRhdGEoMCkucmVzdWx0LmV4cGVjdFR1cGxlKClbXCJuZXh0LXBheW1lbnRcIl0pIC0gYmxvY2suaGVpZ2h0IC0gMSk7XG4gICAgbWluVG9SZWNlaXZlID0gTWF0aC5mbG9vcigocGF5bWVudCArIGxvYW5BbW91bnQpICogMTAgLyAxMF8wMDApO1xuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIC4uLm1ha2VQYXltZW50VHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsIGJvcnJvd2VyXzEuYWRkcmVzcyxzZW5kZXIscmVjaXBpZW50LDUwMCwyLGxvYW5BbW91bnQgKyBwYXltZW50LFwiMDhcIiwwLG1pblRvUmVjZWl2ZSwwLCBQQVlNRU5ULCBMUF9UT0tFTiwgTElRVUlESVRZX1ZBVUxULCAwLCBDUF9UT0tFTiwgQ1BfUkVXQVJEU19UT0tFTiwgWlBfVE9LRU4sIFNXQVBfUk9VVEVSLGNoYWluLmJsb2NrSGVpZ2h0IC0gMSwgWEJUQylcbiAgICBdKTtcbiAgICAvLyBjb25zb2xlLmxvZyhsb2FuLmdldExvYW5EYXRhKDApLnJlc3VsdC5leHBlY3RUdXBsZSgpKTtcbiAgfSxcbn0pO1xuXG5DbGFyaW5ldC50ZXN0KHtcbiAgbmFtZTogXCJCb3Jyb3dlciBjYW4gbWFrZSBhbiBlYXJseSByZXBheW1lbnQgb2YgdGhlIGxvYW5cIixcbiAgYXN5bmMgZm4oY2hhaW46IENoYWluLCBhY2NvdW50czogTWFwPHN0cmluZywgQWNjb3VudD4pIHtcbiAgICBsZXQgZGVwbG95ZXJXYWxsZXQgPSBhY2NvdW50cy5nZXQoXCJkZXBsb3llclwiKSBhcyBBY2NvdW50O1xuICAgIGxldCBMUF8xID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzFcIikgYXMgQWNjb3VudDsgLy8gTFBfMVxuICAgIGxldCBMUF8yID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzJcIikgYXMgQWNjb3VudDsgLy8gTFBfMlxuICAgIGxldCBjb3ZlclBvb2xQcm92aWRlciA9IGFjY291bnRzLmdldChcIndhbGxldF8zXCIpIGFzIEFjY291bnQ7IC8vIENvdmVyXzFcbiAgICBsZXQgZGVsZWdhdGVfMSA9IGFjY291bnRzLmdldChcIndhbGxldF83XCIpIGFzIEFjY291bnQ7IC8vIERlbGVnYXRlXzFcbiAgICBsZXQgYm9ycm93ZXJfMSA9IGFjY291bnRzLmdldChcIndhbGxldF84XCIpIGFzIEFjY291bnQ7IC8vIGJvcnJvd2VyXzFcblxuICAgIGxldCBhc3NldE1hcHMgPSBjaGFpbi5nZXRBc3NldHNNYXBzKCk7XG4gICAgbGV0IHBvb2wgPSBuZXcgUG9vbChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGxldCBsb2FuID0gbmV3IExvYW4oY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgY292ZXJQb29sID0gbmV3IENvdmVyUG9vbChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuXG4gICAgbGV0IGJsb2NrID0gR2xvYmFscy5vbmJvYXJkVXNlckFkZHJlc3MoY2hhaW4sIGJvcnJvd2VyXzEuYWRkcmVzcywgUDJQS0hfVkVSU0lPTiwgSEFTSCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG4gICAgXG4gICAgcG9vbC5jcmVhdGVQb29sKGRlbGVnYXRlXzEuYWRkcmVzcyxMUF9UT0tFTixaUF9UT0tFTixQQVlNRU5ULFJFV0FSRFNfQ0FMQywxMDAwLDEwMDAsMTBfMDAwXzAwMF8wMDAsMTBfMDAwXzAwMF8wMDAsMSxNQVhfTUFUVVJJVFlfTEVOR1RILExJUVVJRElUWV9WQVVMVCxDUF9UT0tFTixDT1ZFUl9WQVVMVCxDUF9SRVdBUkRTX1RPS0VOLFhCVEMsdHJ1ZSk7XG4gICAgcG9vbC5maW5hbGl6ZVBvb2woZGVsZWdhdGVfMS5hZGRyZXNzLCBMUF9UT0tFTiwgWlBfVE9LRU4sIENQX1RPS0VOLCAwKTtcbiAgICBjaGFpbi5taW5lRW1wdHlCbG9jaygxMCk7XG4gICAgXG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1xuICAgICAgLi4ucmVnaXN0ZXJTdXBwbGllclR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzLCByZWNpcGllbnQsIDEwLCAxMCwgNTAwLCA1MDAsIFwic3VwcGxpZXItMVwiLCAxMF8wMDBfMDAwXzAwMCksXG4gICAgICBNYWdpYy5pbml0aWFsaXplU3dhcHBlcihMUF8xLmFkZHJlc3MpLFxuICAgICAgLi4uc2VuZEZ1bmRzUDJTSFR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLDAsTFBfMS5hZGRyZXNzLHNlbmRlcixyZWNpcGllbnQsNTAwLDAsMTAwXzAwMF8wMDAscHJlaW1hZ2UsMCwxMDBfMDAwXzAwMCAqIDEwIC8gMTBfMDAwLDEsY2hhaW4uYmxvY2tIZWlnaHQgLSAxKSxcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKExQXzIuYWRkcmVzcyksXG4gICAgICAuLi5zZW5kRnVuZHNQMlNIVHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsMCxMUF8yLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsMSwxMDBfMDAwXzAwMCxwcmVpbWFnZSwwLDEwMF8wMDBfMDAwICogMTAgLyAxMF8wMDAsMSxjaGFpbi5ibG9ja0hlaWdodCAtIDEpLFxuICAgIF0pO1xuICAgIGNvbnN0IHN1cHBsaWVySWQxID0gKGNvbnN1bWVVaW50KGJsb2NrLnJlY2VpcHRzWzFdLnJlc3VsdC5leHBlY3RPaygpKSk7XG4gICAgY29uc3QgbG9hbkFtb3VudCA9IDEwMF8wMDBfMDAwO1xuXG4gICAgYmxvY2sgPSBwb29sLmNyZWF0ZUxvYW4oTFBfVE9LRU4sMCxsb2FuQW1vdW50LFhCVEMsMCxYQlRDLDMwMCwxMjk2MCwxNDQwLENPTExfVkFVTFQsRlVORElOR19WQVVMVCxib3Jyb3dlcl8xLmFkZHJlc3MpO1xuICAgIFxuICAgIGJsb2NrID0gcG9vbC5mdW5kTG9hbigwLExQX1RPS0VOLDAsTElRVUlESVRZX1ZBVUxULEZVTkRJTkdfVkFVTFQsWEJUQyxkZWxlZ2F0ZV8xLmFkZHJlc3MpO1xuICAgIGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UudXBkYXRlTGlxdWlkaXR5KGNoYWluLmJsb2NrSGVpZ2h0LCAxMDBfMDAwXzAwMCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBTdXBwbGllckludGVyZmFjZS5kcmF3ZG93bigwLCBMUF9UT0tFTiwgMCwgWEJUQywgQ09MTF9WQVVMVCwgRlVORElOR19WQVVMVCwgUDJQS0hfVkVSU0lPTiwgSEFTSCwgMCwgU1dBUF9ST1VURVIsWEJUQywgYm9ycm93ZXJfMS5hZGRyZXNzKVxuICAgIF0pO1xuXG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soWy4uLmZpbmFsaXplRHJhd2Rvd24oMCwgTFBfVE9LRU4sIDAsIFhCVEMsIENPTExfVkFVTFQsIEZVTkRJTkdfVkFVTFQsIFhCVEMsIEhBU0gsIDk5NzAwMDAwLCAwLCBjaGFpbi5ibG9ja0hlaWdodCAtIDEsIGJvcnJvd2VyXzEuYWRkcmVzcywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcblxuICAgIGNoYWluLm1pbmVFbXB0eUJsb2NrKDEzMDApO1xuXG4gICAgbGV0IGZlZSA9IE51bWJlcihNYWdpYy5nZXRTdXBwbGllcihjaGFpbiwgMCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcykuZXhwZWN0U29tZSgpLmV4cGVjdFR1cGxlKClbXCJpbmJvdW5kLWZlZVwiXS5leHBlY3RTb21lKCkpO1xuXG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soWyBNYWdpYy5pbml0aWFsaXplU3dhcHBlcihib3Jyb3dlcl8xLmFkZHJlc3MpIF0pO1xuXG4gICAgY29uc3QgcHJlaW1hZ2UwMCA9IFwiMDBcIjtcbiAgICBjb25zdCBleHBpcmF0aW9uID0gNTAwO1xuICAgIGNvbnN0IGJvcnJvd2VyU3dhcHBlcklkID0gY29uc3VtZVVpbnQoYmxvY2sucmVjZWlwdHNbMF0ucmVzdWx0LmV4cGVjdE9rKCkpO1xuICAgIGNvbnN0IGxvYW5JZCA9IDA7XG4gICAgY29uc3QgcG9vbElkID0gMDtcblxuICAgIC8vIE91dHB1dCBpbiB3aGljaCB3ZSdyZSBpbnRlcmVzdGVkIGZvciB0aGUgdHJhbnNhY3Rpb25cbiAgICAvLyBjb25zdCBvdXRwdXRJbmRleCA9IDA7XG4gICAgLy8gdGhlIDEwIHBlcmNlbnQgaXMgIGJhc2VkIG9uIHRoZSBpbmJvdW5kIGZlZSBvZiBzdXBwbGllci0xXG4gICAgbGV0IGVhcmx5UGF5bWVudCA9IChjb25zdW1lVWludChQYXltZW50LmdldEVhcmx5UmVwYXltZW50QW1vdW50KGNoYWluLCBsb2FuSWQsIGJvcnJvd2VyXzEuYWRkcmVzcykpKTtcbiAgICBjb25zdCBwYXltZW50ID0gZWFybHlQYXltZW50ICsgbG9hbkFtb3VudDtcbiAgICBsZXQgbWluVG9SZWNlaXZlID0gTWF0aC5mbG9vcihwYXltZW50ICogMTAgLyAxMF8wMDApO1xuXG4gICAgY29uc3QgaGFzaCA9IGdldEhhc2gocHJlaW1hZ2UwMCk7XG4gICAgY29uc3QgdHgxID0gZ2VuZXJhdGVQMlNIVHgoc2VuZGVyLCByZWNpcGllbnQsIGV4cGlyYXRpb24sIGhhc2gsIGJvcnJvd2VyU3dhcHBlcklkLCBwYXltZW50KTtcbiAgICBjb25zdCB0eElkMSA9IGdldFR4SWQodHgxKTtcbiAgICBjb25zdCBvdXRwdXRJbmRleCA9IDA7XG5cbiAgICBjb25zdCBiaXRjb2luQmxvY2sgPSB7IGhlYWRlcjogXCJcIiwgaGVpZ2h0OiBjaGFpbi5ibG9ja0hlaWdodCAtIDEgfTtcbiAgICBjb25zdCBwcmV2QmxvY2tzID0gW10gYXMgc3RyaW5nW107XG4gICAgY29uc3QgcHJvb2YgPSB7IFwidHgtaW5kZXhcIjogMCwgXCJoYXNoZXNcIjogW10sIFwidHJlZS1kZXB0aFwiOiAwIH1cblxuICAgIC8vIHNldCBCaXRjb2luIHRyYW5zYWN0aW9uIGluIHRoZSBicmFja2dyb3VuZFxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFsgVHguY29udHJhY3RDYWxsKFwidGVzdC11dGlsc1wiLFwic2V0LW1pbmVkXCIsIFsgdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh0eElkMSwgXCJoZXhcIikpIF0sIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpIF0pO1xuXG4gICAgLy8gTWFrZSBhIHBheW1lbnQgd2l0aG91dCByZWdpc3RlcmluZyBhcyBhIHN3YXBwZXIsIGFscmVhZHkgcmVnaXN0ZXJlZC5cbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbXG4gICAgICBUeC5jb250cmFjdENhbGwoXG4gICAgICAgIFwic3VwcGxpZXItaW50ZXJmYWNlXCIsXG4gICAgICAgIFwic2VuZC1mdW5kc1wiLFxuICAgICAgICBbXG4gICAgICAgICAgLy8gRGF0YSB1c2VkIGJ5IHRoZSBNYWdpYyBNYWdpYyBjb250cmFjdCB0byBwcm92ZSB0aGF0IHRoZSBCaXRjb2luIHRyYW5zYWN0aW9uIGhhcHBlbmVkXG4gICAgICAgICAgdHlwZXMudHVwbGUoe1xuICAgICAgICAgICAgaGVhZGVyOiB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKGJpdGNvaW5CbG9jay5oZWFkZXIsIFwiaGV4XCIpKSxcbiAgICAgICAgICAgIGhlaWdodDogdHlwZXMudWludChiaXRjb2luQmxvY2suaGVpZ2h0KVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHR5cGVzLmxpc3QocHJldkJsb2Nrcy5tYXAoKHZhbCkgPT4gdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh2YWwsIFwiaGV4XCIpKSkpLFxuICAgICAgICAgIHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20odHgxLCBcImhleFwiKSksXG4gICAgICAgICAgdHlwZXMudHVwbGUoe1xuICAgICAgICAgICAgXCJ0eC1pbmRleFwiOiB0eXBlcy51aW50KHByb29mWyd0eC1pbmRleCddKSxcbiAgICAgICAgICAgIFwiaGFzaGVzXCI6IHR5cGVzLmxpc3QocHJvb2YuaGFzaGVzLm1hcCh2YWwgPT4gdHlwZXMuYnVmZihCdWZmZXIuZnJvbSh2YWwsIFwiaGV4XCIpKSkpLFxuICAgICAgICAgICAgXCJ0cmVlLWRlcHRoXCI6IHR5cGVzLnVpbnQocHJvb2ZbJ3RyZWUtZGVwdGgnXSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0eXBlcy51aW50KG91dHB1dEluZGV4KSxcbiAgICAgICAgICAvLyBlbmQgb2YgQml0Y29pbiBQcm9vZlxuICAgICAgICAgIHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20oc2VuZGVyLCBcImhleFwiKSksICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHVibGljIGtleSBvZiB0aGUgTFBfMSBzZW5kaW5nIHRoZSBCaXRjb2luLiBVc2VkIHRvIHJlY292ZXIgdGhlIGZ1bmRzIGlmIHRoZSBzZW50IGJpdGNvaW4gZmFpbHMuXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShyZWNpcGllbnQsIFwiaGV4XCIpKSwgICAgICAgICAgICAgICAgICAgICAgICAvLyBQdWJsaWMga2V5IHVzZWQgYnkgdGhlIE1hZ2ljIHRoYXQgaXMgdGhlIHJlY2lwaWVudCBvZiBCaXRjb2luLlxuICAgICAgICAgIHR5cGVzLmJ1ZmYoQnVmZmVyLmZyb20oZ2V0RXhwaXJhdGlvbihleHBpcmF0aW9uKSwgXCJoZXhcIikpLCAgICAgICAgLy8gRXhwaXJhdGlvbiB0aW1lIGluIExpdHRsZSBFbmRpYW4gYW5kIHBhZGRlZCB0byAyIGJ5dGVzIChzdHJpbmcgbGVuZ3RoIG9mIDQpLiBFeCBmb3IgNTAwOiAnMDFGNCdcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKGhhc2gsIFwiaGV4XCIpKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhc2ggb2YgdGhlIHByZWltYWdlIHVzZWQgZm9yIHRoZSBIVExDXG4gICAgICAgICAgdHlwZXMuYnVmZihCdWZmZXIuZnJvbShzd2FwcGVyQnVmZihib3Jyb3dlclN3YXBwZXJJZCksIFwiaGV4XCIpKSwgICAvLyBTd2FwcGVyIGlkIGluIExpdHRsZSBlbmRpbmcgcGFkZGVkIHRvIDQgYnl0ZXMgKHN0cmluZyBsZW5ndGggb2YgOCkuIEV4IGZvciB1MDogXCIwMDAwMDAwMFwiXG4gICAgICAgICAgdHlwZXMudWludChzdXBwbGllcklkMSksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VwcGxpZXIgaWQgaW4gdWludFxuICAgICAgICAgIHR5cGVzLnVpbnQobWluVG9SZWNlaXZlKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1pbmltdW0gYW1vdW50IHRoYXQgaGFzIHRvIGJlIHJlY2VpdmVkLiBJcyB0aGUgYW1vdW50IG9mIHRoZSBzZW50IGZ1bmRzIG1pbnVzIHRoZSBmZWVzIG9mIHRoZSBzdXBwbGllci5cbiAgICAgICAgXSxcbiAgICAgICAgYm9ycm93ZXJfMS5hZGRyZXNzXG4gICAgICApLFxuICAgICAgVHguY29udHJhY3RDYWxsKFxuICAgICAgICBcInN1cHBsaWVyLWludGVyZmFjZVwiLFxuICAgICAgICBcIm1ha2UtZnVsbC1wYXltZW50XCIsXG4gICAgICAgIFtcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHR4SWQxLFwiaGV4XCIpKSxcbiAgICAgICAgICB0eXBlcy5idWZmKEJ1ZmZlci5mcm9tKHByZWltYWdlMDAsXCJoZXhcIikpLFxuICAgICAgICAgIHR5cGVzLnVpbnQobG9hbklkKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoUEFZTUVOVCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKExQX1RPS0VOKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoTElRVUlESVRZX1ZBVUxUKSxcbiAgICAgICAgICB0eXBlcy51aW50KHBvb2xJZCksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKENQX1RPS0VOKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoQ1BfUkVXQVJEU19UT0tFTiksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKFpQX1RPS0VOKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoU1dBUF9ST1VURVIpLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChYQlRDKSxcbiAgICAgICAgXSxcbiAgICAgICAgYm9ycm93ZXJfMS5hZGRyZXNzXG4gICAgICApXG4gICAgXSk7XG4gICAgLy8gbG9hbiBpcyBNYXR1cmVkIGFuZCByZXBhaWRcbiAgfSxcbn0pO1xuXG5DbGFyaW5ldC50ZXN0KHtcbiAgbmFtZTogXCJCb3Jyb3dlciBjYW4gd2l0aGRyYXcgY29sbGF0ZXJhbCBpZiB2YWx1ZSBvZiBjb2xsYXRlcmFsIGluY3JlYXNlc1wiLFxuICBhc3luYyBmbihjaGFpbjogQ2hhaW4sIGFjY291bnRzOiBNYXA8c3RyaW5nLCBBY2NvdW50Pikge1xuICAgIGxldCBkZXBsb3llcldhbGxldCA9IGFjY291bnRzLmdldChcImRlcGxveWVyXCIpIGFzIEFjY291bnQ7XG4gICAgbGV0IExQXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMVwiKSBhcyBBY2NvdW50OyAvLyBMUF8xXG4gICAgbGV0IExQXzIgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMlwiKSBhcyBBY2NvdW50OyAvLyBMUF8yXG4gICAgbGV0IGNvdmVyID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzNcIikgYXMgQWNjb3VudDsgLy8gQ292ZXJfMVxuICAgIGxldCB3YWxsZXRfNyA9IGFjY291bnRzLmdldChcIndhbGxldF83XCIpIGFzIEFjY291bnQ7IC8vIERlbGVnYXRlXzFcbiAgICBsZXQgd2FsbGV0XzggPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfOFwiKSBhcyBBY2NvdW50OyAvLyBib3Jyb3dlcl8xXG5cbiAgICBsZXQgYXNzZXRNYXBzID0gY2hhaW4uZ2V0QXNzZXRzTWFwcygpO1xuICAgIGxldCBwb29sID0gbmV3IFBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgbG9hbiA9IG5ldyBMb2FuKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGNvdmVyUG9vbCA9IG5ldyBDb3ZlclBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcblxuICAgIGxldCBibG9jayA9IHJ1bkJvb3RzdHJhcChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGJsb2NrID0gR2xvYmFscy5vbmJvYXJkVXNlckFkZHJlc3MoY2hhaW4sIHdhbGxldF84LmFkZHJlc3MsIFAyUEtIX1ZFUlNJT04sIEhBU0gsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpO1xuICAgIGJsb2NrID0gR2xvYmFscy5hZGRDb2xsYXRlcmFsQ29udHJhY3QoY2hhaW4sIFhVU0RfQ09OVFJBQ1RfU0lNTkVULCBkZXBsb3llcldhbGxldC5hZGRyZXNzKTtcblxuICAgIHBvb2wuY3JlYXRlUG9vbCh3YWxsZXRfNy5hZGRyZXNzLExQX1RPS0VOLFpQX1RPS0VOLFBBWU1FTlQsUkVXQVJEU19DQUxDLDEwMDAsMTAwMCwxMF8wMDBfMDAwXzAwMCwxMF8wMDBfMDAwXzAwMCwxLE1BWF9NQVRVUklUWV9MRU5HVEgsTElRVUlESVRZX1ZBVUxULENQX1RPS0VOLENPVkVSX1ZBVUxULENQX1JFV0FSRFNfVE9LRU4sWEJUQyx0cnVlKTtcbiAgICBwb29sLmZpbmFsaXplUG9vbCh3YWxsZXRfNy5hZGRyZXNzLCBMUF9UT0tFTiwgWlBfVE9LRU4sIENQX1RPS0VOLCAwKTtcbiAgICBwb29sLmVuYWJsZUNvdmVyKExQX1RPS0VOLCBDUF9UT0tFTiwgMCwgd2FsbGV0XzcuYWRkcmVzcyk7XG4gICAgYmxvY2sgPSBjb3ZlclBvb2wuc2VuZEZ1bmRzKENQX1RPS0VOLENPVkVSX1ZBVUxULENQX1JFV0FSRFNfVE9LRU4sWEJUQywgMCwgMTAwXzAwMF8wMDBfMDAwbiwgMTAsIFJFV0FSRFNfQ0FMQywgY292ZXIuYWRkcmVzcyk7XG5cbiAgICBsZXQgc3VwcGxpZXJJZCA9IGNvbnN1bWVVaW50KGNoYWluLm1pbmVCbG9jayhbLi4ucmVnaXN0ZXJTdXBwbGllclR4cyhkZXBsb3llcldhbGxldC5hZGRyZXNzLCBkZXBsb3llcldhbGxldC5hZGRyZXNzLCByZWNpcGllbnQsIDEwLCAxMCwgNTAwLCA1MDAsIFwic3VwcGxpZXItMVwiLCAxMF8wMDBfMDAwXzAwMCldKS5yZWNlaXB0c1sxXS5yZXN1bHQuZXhwZWN0T2soKSBhcyBzdHJpbmcpO1xuICAgIGxldCBmZWUgPSBOdW1iZXIoTWFnaWMuZ2V0U3VwcGxpZXIoY2hhaW4sIHN1cHBsaWVySWQsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLmV4cGVjdFNvbWUoKS5leHBlY3RUdXBsZSgpW1wiaW5ib3VuZC1mZWVcIl0uZXhwZWN0U29tZSgpKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIE1hZ2ljLmluaXRpYWxpemVTd2FwcGVyKExQXzEuYWRkcmVzcyksXG4gICAgICAuLi5zZW5kRnVuZHNQMlNIVHhzKGRlcGxveWVyV2FsbGV0LmFkZHJlc3MsMCxMUF8xLmFkZHJlc3Msc2VuZGVyLHJlY2lwaWVudCw1MDAsMCwxMDBfMDAwXzAwMCxwcmVpbWFnZSwwLDEwMF8wMDBfMDAwICogZmVlIC8gMTBfMDAwLDEsY2hhaW4uYmxvY2tIZWlnaHQgLSAxKVxuICAgIF0pO1xuXG4gICAgY29uc3QgTE9BTl9BTU9VTlQgPSAxMDBfMDAwXzAwMDtcblxuICAgIGJsb2NrID0gcG9vbC5jcmVhdGVMb2FuKExQX1RPS0VOLDAsTE9BTl9BTU9VTlQsWEJUQywxMDAwLFhVU0RfQ09OVFJBQ1RfU0lNTkVULDMwMCw1NzYwLDE0NDAsQ09MTF9WQVVMVCxGVU5ESU5HX1ZBVUxULHdhbGxldF84LmFkZHJlc3MpO1xuICAgIGJsb2NrID0gcG9vbC5mdW5kTG9hbigwLExQX1RPS0VOLDAsTElRVUlESVRZX1ZBVUxULEZVTkRJTkdfVkFVTFQsWEJUQyx3YWxsZXRfNy5hZGRyZXNzKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UudXBkYXRlTGlxdWlkaXR5KGNoYWluLmJsb2NrSGVpZ2h0LCAxMDBfMDAwXzAwMCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKTtcbiAgICBibG9jayA9IGNoYWluLm1pbmVCbG9jayhbU3VwcGxpZXJJbnRlcmZhY2UuZHJhd2Rvd24oMCwgTFBfVE9LRU4sIDAsIFhVU0RfQ09OVFJBQ1RfU0lNTkVULCBDT0xMX1ZBVUxULCBGVU5ESU5HX1ZBVUxULCBQMlBLSF9WRVJTSU9OLCBIQVNILCAwLCBTV0FQX1JPVVRFUixYQlRDLCB3YWxsZXRfOC5hZGRyZXNzKV0pO1xuXG4gICAgY2hhaW4ubWluZUVtcHR5QmxvY2soMTApO1xuXG4gICAgbGV0IGdsb2JhbHMgPSBHbG9iYWxzLmdldEdsb2JhbHMoY2hhaW4sIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpLmV4cGVjdFR1cGxlKCk7XG4gICAgbGV0IHRvdGFsSW52ZXN0b3JGZWVzID0gZ2V0QlAoTE9BTl9BTU9VTlQsIGNvbnN1bWVVaW50KGdsb2JhbHNbXCJ0cmVhc3VyeS1mZWVcIl0pICsgY29uc3VtZVVpbnQoZ2xvYmFsc1tcImludmVzdG9yLWZlZVwiXSkpO1xuXG4gICAgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soWy4uLmZpbmFsaXplRHJhd2Rvd24oMCwgTFBfVE9LRU4sIDAsIFhVU0RfQ09OVFJBQ1RfU0lNTkVULCBDT0xMX1ZBVUxULCBGVU5ESU5HX1ZBVUxULCBYQlRDLCBIQVNILCA5OTcwMDAwMCwgMCwgMjgsIHdhbGxldF84LmFkZHJlc3MsIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpXSk7XG5cbiAgICBjaGFpbi5taW5lRW1wdHlCbG9jayg0MCk7XG5cbiAgICBsZXQgcGFpclZhbHVlID0gU3dhcFJvdXRlci5nZXRQYWlyVmFsdWUoY2hhaW4sIFNXQVBfUk9VVEVSLCBYQlRDLFhVU0RfQ09OVFJBQ1RfU0lNTkVULGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpO1xuICAgIGJsb2NrID0gU3dhcFJvdXRlci5zZXRQYWlyVmFsdWUoY2hhaW4sU1dBUF9ST1VURVIsWEJUQyxYVVNEX0NPTlRSQUNUX1NJTU5FVCxjb25zdW1lVWludChwYWlyVmFsdWUuZXhwZWN0U29tZSgpKSAqIDUwMDAgLyAxMDAwMCxkZXBsb3llcldhbGxldC5hZGRyZXNzKTtcblxuICAgIGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtcbiAgICAgIFR4LmNvbnRyYWN0Q2FsbChcbiAgICAgICAgYGxvYW4tdjEtMGAsXG4gICAgICAgIFwid2l0aGRyYXctY29sbGF0ZXJhbC1sb2FuXCIsXG4gICAgICAgIFtcbiAgICAgICAgICB0eXBlcy51aW50KDApLFxuICAgICAgICAgIHR5cGVzLnVpbnQoOTg2MzQ1MDAwMDApLFxuICAgICAgICAgIHR5cGVzLnByaW5jaXBhbChTV0FQX1JPVVRFUiksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKFhVU0RfQ09OVFJBQ1RfU0lNTkVUKSxcbiAgICAgICAgICB0eXBlcy5wcmluY2lwYWwoWEJUQyksXG4gICAgICAgICAgdHlwZXMucHJpbmNpcGFsKENPTExfVkFVTFQpXG4gICAgICAgIF0sXG4gICAgICAgIHdhbGxldF84LmFkZHJlc3NcbiAgICAgIClcbiAgICBdKVxuICB9LFxufSk7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0JBQXdCO0FBQ3hCLFNBQVMsUUFBUSxFQUFFLEVBQUUsRUFBa0IsS0FBSyxRQUFRLDhDQUE4QyxDQUFDO0FBQ25HLFNBQVMsWUFBWSxRQUFnQixrREFBa0QsQ0FBQztBQUN4RixTQUFTLElBQUksUUFBUSwrQkFBK0IsQ0FBQztBQUNyRCxTQUFTLFNBQVMsUUFBUSxxQ0FBcUMsQ0FBQztBQUNoRSxTQUFTLElBQUksUUFBUSwrQkFBK0IsQ0FBQztBQUVyRCxTQUFTLE1BQU0sUUFBUSw4Q0FBOEMsQ0FBQztBQUN0RSxTQUFTLFNBQVMsUUFBUSxnQ0FBZ0MsQ0FBQztBQUMzRCxTQUFTLEtBQUssUUFBUSxnQ0FBZ0MsQ0FBQztBQUN2RCxTQUFTLE9BQU8sUUFBUSw2QkFBNkIsQ0FBQztBQUN0RCxTQUFTLFVB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