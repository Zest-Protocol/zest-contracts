import { Tx, types } from 'https://deno.land/x/clarinet@v1.0.3/index.ts';
class CoverPool {
    chain;
    deployer;
    constructor(chain, deployer){
        this.chain = chain;
        this.deployer = deployer;
    }
    getPool(tokenId) {
        return this.chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'get-pool', [
                types.uint(tokenId)
            ], this.deployer.address)
        ]).receipts[0].result.expectOk().expectTuple();
    }
    sendFunds(cp, coverVault, cpRewards, coverToken, tokenId, amount, cycles, rewardsCalc, sender) {
        return this.chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'send-funds', [
                types.principal(cp),
                types.principal(coverVault),
                types.principal(cpRewards),
                types.principal(coverToken),
                types.uint(tokenId),
                types.uint(amount),
                types.uint(cycles),
                types.principal(rewardsCalc),
                types.principal(sender), 
            ], sender)
        ]);
    }
    withdrawZestRewards(cp, tokenId, rewardsCalc, caller) {
        return this.chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'withdraw-zest-rewards', [
                types.principal(cp),
                types.uint(tokenId),
                types.principal(rewardsCalc)
            ], caller)
        ]);
    }
    signalWithdrawal(cp, tokenId, amount, caller) {
        return this.chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'signal-withdrawal', [
                types.principal(cp),
                types.uint(tokenId),
                types.uint(amount)
            ], caller)
        ]);
    }
    withdraw(cp, cpRewards, coverToken, tokenId, amount, coverVault, caller) {
        return this.chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'withdraw', [
                types.principal(cp),
                types.principal(cpRewards),
                types.principal(coverToken),
                types.uint(tokenId),
                types.uint(amount),
                types.principal(coverVault), 
            ], caller)
        ]);
    }
    withdrawRewards(cpRewards, tokenId, lv, xbtcFt, caller) {
        return this.chain.mineBlock([
            Tx.contractCall('cover-pool-v1-0', 'withdraw-rewards', [
                types.principal(cpRewards),
                types.uint(tokenId),
                types.principal(lv),
                types.principal(xbtcFt), 
            ], caller)
        ]);
    }
    hasCommittedFunds(tokenId, sender) {
        return this.chain.callReadOnlyFn('cover-pool-v1-0', "has-committed-funds", [
            types.uint(tokenId),
            types.principal(sender), 
        ], this.deployer.address);
    }
    timeLeftUntilWithdrawal(tokenId, sender) {
        return this.chain.callReadOnlyFn('cover-pool-v1-0', "time-left-until-withdrawal", [
            types.uint(tokenId),
            types.principal(sender), 
        ], this.deployer.address);
    }
    timeLeftForWithdrawal(tokenId, sender) {
        return this.chain.callReadOnlyFn('cover-pool-v1-0', "time-left-for-withdrawal", [
            types.uint(tokenId),
            types.principal(sender), 
        ], this.deployer.address);
    }
    fundsCommitmentEndsAt(tokenId, sender) {
        return this.chain.callReadOnlyFn('cover-pool-v1-0', "funds-commitment-ends-at-height", [
            types.uint(tokenId),
            types.principal(sender), 
        ], this.deployer.address);
    }
    timeUntilCommitmentEnds(tokenId, sender) {
        return this.chain.callReadOnlyFn('cover-pool-v1-0', "time-until-commitment-ends", [
            types.uint(tokenId),
            types.principal(sender), 
        ], this.deployer.address);
    }
}
export { CoverPool };
//# sourceMappingURL=data:application/json;base64,