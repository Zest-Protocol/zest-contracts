// deno-lint-ignore-file
import { Clarinet } from 'https://deno.land/x/clarinet@v1.0.3/index.ts';
import { assertEquals } from 'https://deno.land/std@0.159.0/testing/asserts.ts';
import { Pool } from '../../interfaces/pool-v1-0.ts';
import { CoverPool } from '../../interfaces/cover-pool-v1-0.ts';
import { Loan } from '../../interfaces/loan-v1-0.ts';
import { LPToken } from '../../interfaces/lp-token.ts';
import { CPToken } from '../../interfaces/cp-token.ts';
import { TestUtils } from '../../interfaces/test-utils.ts';
import { Magic } from '../../interfaces/magic_real.ts';
import { Globals } from '../../interfaces/globals.ts';
import { SupplierInterface } from '../../interfaces/supplier_interface.ts';
import { SwapRouter } from '../../interfaces/swapRouter.ts';
import { getHash, getTxId, getExpiration, swapperBuff, generateP2SHTx } from "../util.ts";
import { runBootstrap, sendFundsP2SHTxs, registerSupplierTxs, consumeUint, getBP, finalizeDrawdown } from '../../interfaces/common.ts';
import { LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, LIQUIDITY_VAULT, CP_TOKEN, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, XBTC, recipient, sender, preimage, CP_REWARDS_TOKEN, ERRORS, SWAP_ROUTER, XUSD_CONTRACT_SIMNET, USDA_CONTRACT_SIMNET, COVER_VAULT } from "../config.ts";
const MAX_MATURITY_LENGTH = 144 * 365 * 3; // 3 years
Clarinet.test({
    name: "Liquidity providers can send funds to the liquidity vault",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_2 = accounts.get("wallet_2"); // LP_2
        let wallet_7 = accounts.get("wallet_7"); // DELEGATE_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        // let block = runBootstrap(chain, deployerWallet);
        // bootstrapApprovedContracts(chain, deployerWallet);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        let block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, supplierId, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1),
            Magic.initializeSwapper(wallet_2.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_2.address, sender, recipient, 500, 1, 200_000_000, preimage, supplierId, 200_000_000 * fee / 10_000, 1, chain.blockHeight - 1), 
        ]);
        assetMaps = chain.getAssetsMaps();
        assertEquals(assetMaps.assets[".Wrapped-Bitcoin.wrapped-bitcoin"][`${deployerWallet.address}.liquidity-vault-v1-0`], 300000000);
    }
});
Clarinet.test({
    name: "Liquidity providers can send funds to the liquidity vault multiple times. Add extra time to the lockup period.",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_2 = accounts.get("wallet_2"); // LP_2
        let wallet_7 = accounts.get("wallet_7"); // DELEGATE_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let block = pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1),
            Magic.initializeSwapper(wallet_2.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_2.address, sender, recipient, 500, 1, 200_000_000, preimage, 0, 200_000_000 * fee / 10_000, 1, chain.blockHeight - 1), 
        ]);
        chain.mineEmptyBlock(10);
        block = chain.mineBlock([
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 200_000_000, "00", supplierId, 200_000_000 * fee / 10_000, 2, chain.blockHeight - 1)
        ]);
        let fundsSent = pool.getFundsSent(wallet_1.address, 0).expectOk().expectTuple();
        assertEquals(consumeUint(fundsSent.factor), 1);
    }
});
Clarinet.test({
    name: "Borrower can drawdown funds in pool",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 0, 28, wallet_8.address, deployerWallet.address)
        ]);
        assetMaps = chain.getAssetsMaps();
        assertEquals(assetMaps.assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.magic-protocol"], 9999700000);
        chain.mineEmptyBlock(10);
        // block = chain.mineBlock([...finalizeOutboundTxs(HASH, 99000000, 0, 58010, wallet_8.address, deployerWallet.address)]);
        let globals = Globals.getGlobals(chain, deployerWallet.address).expectTuple();
        let poolParams = pool.getPool(0);
        let treasuryFee = getBP(LOAN_AMOUNT, consumeUint(globals["treasury-fee"]));
        let investorFee = getBP(LOAN_AMOUNT, consumeUint(globals["investor-fee"]));
        let delegateFee = getBP(investorFee, consumeUint(poolParams["delegate-fee"]));
        let lpPortion = investorFee - delegateFee;
        block.receipts[1].result.expectOk();
        assertEquals(assetMaps.assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.protocol-treasury"], treasuryFee);
    // assertEquals(assetMaps.assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"], lpPortion);
    // assertEquals(assetMaps.assets[".Wrapped-Bitcoin.wrapped-bitcoin"][`${wallet_7.address}`], delegateFee);
    }
});
Clarinet.test({
    name: "Pool Delegate can unwind a funded loan",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, supplierId, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        chain.mineEmptyBlock(consumeUint(Globals.getGlobals(chain, deployerWallet.address).expectTuple()["funding-period"]) + 1);
        block = pool.unwind(0, LP_TOKEN, 0, FUNDING_VAULT, LIQUIDITY_VAULT, XBTC, wallet_7.address);
        assertEquals(chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.funding-vault"], 0);
        assertEquals(chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"], 100_000_000);
        assertEquals(consumeUint(pool.getPool(0)["principal-out"]), 0);
        assertEquals(loan.getLoanData(0).result.expectTuple()["status"], "0x07");
    }
});
Clarinet.test({
    name: "Borrower cannot drawdown after loan was unwinded",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, supplierId, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        chain.mineEmptyBlock(consumeUint(Globals.getGlobals(chain, deployerWallet.address).expectTuple()["funding-period"]) + 1);
        block = pool.unwind(0, LP_TOKEN, 0, FUNDING_VAULT, LIQUIDITY_VAULT, XBTC, wallet_7.address);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        // ERR_FUNDING_EXPIRED
        block.receipts[0].result.expectErr().expectUint(ERRORS.ERR_FUNDING_EXPIRED);
    }
});
Clarinet.test({
    name: "Drawdown can be cancelled if funds have not been confirmed as sent.",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, supplierId, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        chain.mineEmptyBlock(250);
        block = chain.mineBlock([
            SupplierInterface.cancelDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, 0, deployerWallet.address)
        ]);
        let loanResult = loan.getLoanData(0).result.expectTuple();
        let poolResult = pool.getPool(0);
        assertEquals(loanResult["status"], "0x01");
        assertEquals(poolResult["principal-out"], "u100000000");
    }
});
Clarinet.test({
    name: "Drawdown can be cancelled if funds have not been confirmed as sent. Then, borrower can retry drawdown process",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let wallet_1 = accounts.get("wallet_1"); // LP_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        block = chain.mineBlock([
            Magic.initializeSwapper(wallet_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, wallet_1.address, sender, recipient, 500, 0, 100_000_000, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, 0, XBTC, 300, 12960, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        let beforeDrawdown = chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"];
        let loanBeforeDrawdown = loan.getLoanData(0).result;
        chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, 100_000_000, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        // TRY TO FINALIZEDRAWDOWN BUT FAIL
        chain.mineEmptyBlock(250);
        block = chain.mineBlock([
            SupplierInterface.cancelDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, 0, deployerWallet.address)
        ]);
        let afterCancelledDrawdown = chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"];
        let loanAfterDrawdown = loan.getLoanData(0).result;
        assertEquals(beforeDrawdown["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"], afterCancelledDrawdown["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.liquidity-vault-v1-0"]);
        assertEquals(beforeDrawdown["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.supplier-interface"], afterCancelledDrawdown["ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.supplier-interface"]);
        assertEquals(loanBeforeDrawdown, loanAfterDrawdown);
        // console.log(chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        assertEquals(block.receipts[0].result.expectOk().expectTuple()["sats"], "u99700000");
        block = chain.mineBlock([
            ...finalizeDrawdown(0, LP_TOKEN, 0, XBTC, COLL_VAULT, FUNDING_VAULT, XBTC, HASH, 99700000, 1, 28, wallet_8.address, deployerWallet.address)
        ]);
        assertEquals(chain.getAssetsMaps().assets[".Wrapped-Bitcoin.wrapped-bitcoin"][`${deployerWallet.address}.protocol-treasury`], 300000);
        block.receipts[1].result.expectOk();
    }
});
Clarinet.test({
    name: "When drawdown is called, collateral is required for the loan and sent to the collateral vault.",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let CpToken = new CPToken(chain, deployerWallet);
        let LpToken = new LPToken(chain, deployerWallet);
        let block = runBootstrap(chain, deployerWallet);
        block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = Globals.addCollateralContract(chain, USDA_CONTRACT_SIMNET, deployerWallet.address);
        block = Globals.addCollateralContract(chain, XUSD_CONTRACT_SIMNET, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        pool.enableCover(LP_TOKEN, CP_TOKEN, 0, wallet_7.address);
        block = coverPool.sendFunds(CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, 0, 100_000_000_000n, 10, REWARDS_CALC, cover.address);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        const LP_1_amount = 100_000_000;
        block = chain.mineBlock([
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, LP_1_amount, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        const LOAN_RATIO = 5000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, LOAN_RATIO, XUSD_CONTRACT_SIMNET, 300, 5760, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        // console.log(chain.getAssetsMaps().assets[".Wrapped-USD.wrapped-usd"]);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        block = chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, LOAN_AMOUNT, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XUSD_CONTRACT_SIMNET, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        let collAmount = Math.floor(consumeUint(SwapRouter.getXgivenY(XUSD_CONTRACT_SIMNET, XBTC, LOAN_AMOUNT, chain, deployerWallet.address).result.expectOk()) * LOAN_RATIO / 10_000);
        assertEquals(chain.getAssetsMaps().assets[".Wrapped-USD.wrapped-usd"][`${deployerWallet.address}.coll-vault`], collAmount);
    }
});
Clarinet.test({
    name: "When drawdown is called and is unable to go through Magic, cancel-drawdown returns collateral.",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let CpToken = new CPToken(chain, deployerWallet);
        let LpToken = new LPToken(chain, deployerWallet);
        let block = runBootstrap(chain, deployerWallet);
        block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = Globals.addCollateralContract(chain, USDA_CONTRACT_SIMNET, deployerWallet.address);
        block = Globals.addCollateralContract(chain, XUSD_CONTRACT_SIMNET, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        pool.enableCover(LP_TOKEN, CP_TOKEN, 0, wallet_7.address);
        block = coverPool.sendFunds(CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, 0, 100_000_000_000n, 10, REWARDS_CALC, cover.address);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        const LP_1_amount = 100_000_000;
        block = chain.mineBlock([
            Magic.initializeSwapper(LP_1.address),
            ...sendFundsP2SHTxs(deployerWallet.address, 0, LP_1.address, sender, recipient, 500, 0, LP_1_amount, preimage, 0, 100_000_000 * fee / 10_000, 1, chain.blockHeight - 1)
        ]);
        const LOAN_AMOUNT = 100_000_000;
        const LOAN_RATIO = 5000;
        block = pool.createLoan(LP_TOKEN, 0, LOAN_AMOUNT, XBTC, LOAN_RATIO, XUSD_CONTRACT_SIMNET, 300, 5760, 1440, COLL_VAULT, FUNDING_VAULT, wallet_8.address);
        // console.log(chain.getAssetsMaps().assets[".Wrapped-USD.wrapped-usd"]);
        block = pool.fundLoan(0, LP_TOKEN, 0, LIQUIDITY_VAULT, FUNDING_VAULT, XBTC, wallet_7.address);
        block = chain.mineBlock([
            SupplierInterface.updateLiquidity(chain.blockHeight, LOAN_AMOUNT, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            SupplierInterface.drawdown(0, LP_TOKEN, 0, XUSD_CONTRACT_SIMNET, COLL_VAULT, FUNDING_VAULT, P2PKH_VERSION, HASH, 0, SWAP_ROUTER, XBTC, wallet_8.address)
        ]);
        chain.mineEmptyBlock(250);
        block = chain.mineBlock([
            SupplierInterface.cancelDrawdown(0, LP_TOKEN, 0, XUSD_CONTRACT_SIMNET, COLL_VAULT, FUNDING_VAULT, XBTC, 0, deployerWallet.address)
        ]);
    // let collAmount = Math.floor(consumeUint(SwapRouter.getXgivenY(XUSD_CONTRACT_SIMNET, XBTC, LOAN_AMOUNT, chain, deployerWallet.address).result.expectOk() as string) * LOAN_RATIO / 10_000);
    // assertEquals(chain.getAssetsMaps().assets[".Wrapped-USD.wrapped-usd"][`${deployerWallet.address}.coll-vault`], collAmount);
    }
});
Clarinet.test({
    name: "Complete swap in case of leaked preimage",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let CpToken = new CPToken(chain, deployerWallet);
        let LpToken = new LPToken(chain, deployerWallet);
        let block = runBootstrap(chain, deployerWallet);
        block = Globals.onboardUserAddress(chain, wallet_8.address, P2PKH_VERSION, HASH, deployerWallet.address);
        block = Globals.addCollateralContract(chain, USDA_CONTRACT_SIMNET, deployerWallet.address);
        block = Globals.addCollateralContract(chain, XUSD_CONTRACT_SIMNET, deployerWallet.address);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        pool.enableCover(LP_TOKEN, CP_TOKEN, 0, wallet_7.address);
        block = coverPool.sendFunds(CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, 0, 100_000_000_000n, 10, REWARDS_CALC, cover.address);
        let supplierId = consumeUint(chain.mineBlock([
            ...registerSupplierTxs(deployerWallet.address, deployerWallet.address, recipient, 10, 10, 500, 500, "supplier-1", 10_000_000_000)
        ]).receipts[1].result.expectOk());
        let fee = Number(Magic.getSupplier(chain, supplierId, deployerWallet.address).expectSome().expectTuple()["inbound-fee"].expectSome());
        const LP_1_amount = 100_000_000;
        const expiration = 500;
        const swapperId = 0;
        const outputValue = LP_1_amount;
        const minToReceive = LP_1_amount * fee / 10_000;
        let hash = getHash(preimage);
        let tx1 = generateP2SHTx(sender, recipient, expiration, hash, swapperId, outputValue);
        let txid1 = getTxId(tx1);
        block = chain.mineBlock([
            Magic.initializeSwapper(LP_1.address),
            TestUtils.setMinedTx(txid1, deployerWallet.address),
            // called by different Stacks address
            SupplierInterface.sendFunds({
                header: "",
                height: chain.blockHeight - 1
            }, [], tx1, {
                "tx-index": 0,
                "hashes": [],
                "tree-depth": 0
            }, 0, sender, recipient, getExpiration(expiration), hash, swapperBuff(swapperId), supplierId, minToReceive, LP_1.address),
            Magic.finalizeSwap(txid1, preimage, wallet_8.address),
            // called by wrong stacks address
            SupplierInterface.sendFundsFinalizeCompleted(txid1, 1, LP_TOKEN, 0, ZP_TOKEN, LIQUIDITY_VAULT, XBTC, REWARDS_CALC, wallet_8.address),
            // done by correct address
            SupplierInterface.sendFundsFinalizeCompleted(txid1, 1, LP_TOKEN, 0, ZP_TOKEN, LIQUIDITY_VAULT, XBTC, REWARDS_CALC, LP_1.address),
            SupplierInterface.sendFundsFinalizeCompleted(txid1, 1, LP_TOKEN, 0, ZP_TOKEN, LIQUIDITY_VAULT, XBTC, REWARDS_CALC, LP_1.address), 
        ]);
        block.receipts[4].result.expectErr().expectUint(1001);
        block.receipts[5].result.expectOk().expectUint(LP_1_amount);
        block.receipts[6].result.expectErr().expectUint(1004);
    }
});
//# sourceMappingURL=data:application/json;base64,