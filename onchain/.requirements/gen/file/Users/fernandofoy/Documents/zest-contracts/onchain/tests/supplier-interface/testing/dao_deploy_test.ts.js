// deno-lint-ignore-file
import { Clarinet } from 'https://deno.land/x/clarinet@v1.0.3/index.ts';
import { Pool } from '../../interfaces/pool-v1-0.ts';
import { CoverPool } from '../../interfaces/cover-pool-v1-0.ts';
import { Loan } from '../../interfaces/loan-v1-0.ts';
import { Globals } from '../../interfaces/globals.ts';
import { Payment } from '../../interfaces/payment.ts';
import { EmergencyExecute } from '../../interfaces/emergency-execute.ts';
import { LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, LIQUIDITY_VAULT, CP_TOKEN, XBTC, CP_REWARDS_TOKEN, COVER_VAULT, DAO } from "../config.ts";
const MAX_MATURITY_LENGTH = 144 * 365 * 3; // 3 years
Clarinet.test({
    name: "Emergency execute to update late fee on payment contract",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        let block = chain.mineBlock([
            Payment.setContractOwner(DAO, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp003-update-payment-fee`, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp003-update-payment-fee`, LP_1.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp003-update-payment-fee`, LP_2.address)
        ]);
        block.receipts[0].result.expectOk().expectUint(3);
        block.receipts[0].events[1].contract_event.value.expectTuple().payload.expectTuple().fee.expectUint(20);
    }
});
Clarinet.test({
    name: "Emergency cannot execute to update late fee on payment contract if pool is Ready",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        pool.createPool(wallet_7.address, LP_TOKEN, ZP_TOKEN, PAYMENT, REWARDS_CALC, 1000, 1000, 10_000_000_000, 10_000_000_000, 1, MAX_MATURITY_LENGTH, LIQUIDITY_VAULT, CP_TOKEN, COVER_VAULT, CP_REWARDS_TOKEN, XBTC, true);
        pool.finalizePool(wallet_7.address, LP_TOKEN, ZP_TOKEN, CP_TOKEN, 0);
        let block = chain.mineBlock([
            Payment.setContractOwner(DAO, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp003-update-payment-fee`, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp003-update-payment-fee`, LP_1.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp003-update-payment-fee`, LP_2.address)
        ]);
        block.receipts[0].result.expectErr().expectUint(5007);
    }
});
Clarinet.test({
    name: "Emergency execute can add a pool.",
    async fn (chain, accounts) {
        let deployerWallet = accounts.get("deployer");
        let LP_1 = accounts.get("wallet_1"); // LP_1
        let LP_2 = accounts.get("wallet_2"); // LP_2
        let cover = accounts.get("wallet_3"); // Cover_1
        let wallet_7 = accounts.get("wallet_7"); // Delegate_1
        let wallet_8 = accounts.get("wallet_8"); // borrower_1
        let assetMaps = chain.getAssetsMaps();
        let pool = new Pool(chain, deployerWallet);
        let loan = new Loan(chain, deployerWallet);
        let coverPool = new CoverPool(chain, deployerWallet);
        let block = pool.setContractOwner(DAO, deployerWallet.address);
        block = Globals.setContractOwner(chain, DAO, deployerWallet.address);
        // console.log(block);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp004-add-pool-admin`, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp004-add-pool-admin`, LP_1.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp004-add-pool-admin`, LP_2.address)
        ]);
        // console.log(block.receipts[0].events);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp005-create-pool-1`, deployerWallet.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp005-create-pool-1`, LP_1.address)
        ]);
        block = chain.mineBlock([
            EmergencyExecute.executiveAction(`${deployerWallet.address}.zgp005-create-pool-1`, LP_2.address)
        ]);
    // console.log(block);
    // console.log(block.receipts[0].events);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZmVybmFuZG9mb3kvRG9jdW1lbnRzL3plc3QtY29udHJhY3RzL29uY2hhaW4vdGVzdHMvc3VwcGxpZXItaW50ZXJmYWNlL3Rlc3RpbmcvZGFvX2RlcGxveV90ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGRlbm8tbGludC1pZ25vcmUtZmlsZVxuaW1wb3J0IHsgQ2xhcmluZXQsIFR4LCBDaGFpbiwgQWNjb3VudCwgdHlwZXMgfSBmcm9tICdodHRwczovL2Rlbm8ubGFuZC94L2NsYXJpbmV0QHYxLjAuMy9pbmRleC50cyc7XG5pbXBvcnQgeyBhc3NlcnRFcXVhbHMsIGFzc2VydCB9IGZyb20gJ2h0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjE1OS4wL3Rlc3RpbmcvYXNzZXJ0cy50cyc7XG5pbXBvcnQgeyBQb29sIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9wb29sLXYxLTAudHMnO1xuaW1wb3J0IHsgQ292ZXJQb29sIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb3Zlci1wb29sLXYxLTAudHMnO1xuaW1wb3J0IHsgTG9hbiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvbG9hbi12MS0wLnRzJztcbmltcG9ydCB7IExQVG9rZW4gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2xwLXRva2VuLnRzJztcbmltcG9ydCB7IENQVG9rZW4gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2NwLXRva2VuLnRzJztcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4xNTkuMC9ub2RlL2J1ZmZlci50c1wiO1xuaW1wb3J0IHsgVGVzdFV0aWxzIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy90ZXN0LXV0aWxzLnRzJztcbmltcG9ydCB7IEdsb2JhbHMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2dsb2JhbHMudHMnO1xuaW1wb3J0IHsgU3VwcGxpZXJJbnRlcmZhY2UgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3N1cHBsaWVyX2ludGVyZmFjZS50cyc7XG5pbXBvcnQgeyBDcFRva2VuUmV3YXJkcyB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2NwVG9rZW5SZXdhcmRzLnRzXCI7XG5pbXBvcnQgeyBQYXltZW50IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9wYXltZW50LnRzJztcbmltcG9ydCB7IEVtZXJnZW5jeUV4ZWN1dGUgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2VtZXJnZW5jeS1leGVjdXRlLnRzJztcblxuaW1wb3J0IHsgXG4gIGdldEhhc2gsXG4gIGdldFJldmVyc2VUeElkLFxuICBnZXRUeElkLFxuICBnZXRFeHBpcmF0aW9uLFxuICBzd2FwcGVyQnVmZixcbiAgZ2VuZXJhdGVQMlBLSFR4XG59IGZyb20gXCIuLi91dGlsLnRzXCI7XG5cbmltcG9ydCB7XG4gIHNldENvbnRyYWN0T3duZXIsXG4gIGluaXRDb250cmFjdE93bmVycyxcbiAgYm9vdHN0cmFwQXBwcm92ZWRDb250cmFjdHMsXG4gIGFkZEFwcHJvdmVkQ29udHJhY3QsXG4gIHJ1bkJvb3RzdHJhcCxcbiAgYWRkQm9ycm93ZXIsXG4gIHNlbmRGdW5kc1AyU0hUeHMsXG4gIHJlZ2lzdGVyU3VwcGxpZXJUeHMsXG4gIGZpbmFsaXplT3V0Ym91bmRUeHMsXG4gIG1ha2VQYXltZW50VHhzLFxuICBjb25zdW1lVWludCxcbiAgZ2V0QlAsXG4gIGZpbmFsaXplRHJhd2Rvd25cbn0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb21tb24udHMnO1xuXG5pbXBvcnQge1xuICBMUF9UT0tFTixcbiAgWlBfVE9LRU4sXG4gIFBBWU1FTlQsXG4gIFJFV0FSRFNfQ0FMQyxcbiAgTElRVUlESVRZX1ZBVUxULFxuICBDUF9UT0tFTixcbiAgWEJUQyxcbiAgQ09MTF9WQVVMVCxcbiAgRlVORElOR19WQVVMVCxcbiAgUDJQS0hfVkVSU0lPTixcbiAgSEFTSCxcbiAgcmVjaXBpZW50LFxuICBzZW5kZXIsXG4gIHByZWltYWdlLFxuICBFUlJPUlMsXG4gIE9ORV9EQVksXG4gIFNXQVBfUk9VVEVSLFxuICBaRVNUX1RPS0VOLFxuICBDUF9SRVdBUkRTX1RPS0VOLFxuICBDT1ZFUl9WQVVMVCxcbiAgREFPXG59IGZyb20gXCIuLi9jb25maWcudHNcIjtcblxuY29uc3QgTUFYX01BVFVSSVRZX0xFTkdUSCA9IDE0NCAqIDM2NSAqIDM7IC8vIDMgeWVhcnNcblxuQ2xhcmluZXQudGVzdCh7XG4gIG5hbWU6IFwiRW1lcmdlbmN5IGV4ZWN1dGUgdG8gdXBkYXRlIGxhdGUgZmVlIG9uIHBheW1lbnQgY29udHJhY3RcIixcbiAgYXN5bmMgZm4oY2hhaW46IENoYWluLCBhY2NvdW50czogTWFwPHN0cmluZywgQWNjb3VudD4pIHtcbiAgICBsZXQgZGVwbG95ZXJXYWxsZXQgPSBhY2NvdW50cy5nZXQoXCJkZXBsb3llclwiKSBhcyBBY2NvdW50O1xuICAgIGxldCBMUF8xID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzFcIikgYXMgQWNjb3VudDsgLy8gTFBfMVxuICAgIGxldCBMUF8yID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzJcIikgYXMgQWNjb3VudDsgLy8gTFBfMlxuICAgIGxldCBjb3ZlciA9IGFjY291bnRzLmdldChcIndhbGxldF8zXCIpIGFzIEFjY291bnQ7IC8vIENvdmVyXzFcbiAgICBsZXQgd2FsbGV0XzcgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfN1wiKSBhcyBBY2NvdW50OyAvLyBEZWxlZ2F0ZV8xXG4gICAgbGV0IHdhbGxldF84ID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzhcIikgYXMgQWNjb3VudDsgLy8gYm9ycm93ZXJfMVxuXG4gICAgbGV0IGFzc2V0TWFwcyA9IGNoYWluLmdldEFzc2V0c01hcHMoKTtcbiAgICBsZXQgcG9vbCA9IG5ldyBQb29sKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGxvYW4gPSBuZXcgTG9hbihjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGxldCBjb3ZlclBvb2wgPSBuZXcgQ292ZXJQb29sKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG5cbiAgICBwb29sLmNyZWF0ZVBvb2wod2FsbGV0XzcuYWRkcmVzcyxMUF9UT0tFTixaUF9UT0tFTixQQVlNRU5ULFJFV0FSRFNfQ0FMQywxMDAwLDEwMDAsMTBfMDAwXzAwMF8wMDAsMTBfMDAwXzAwMF8wMDAsMSxNQVhfTUFUVVJJVFlfTEVOR1RILExJUVVJRElUWV9WQVVMVCxDUF9UT0tFTixDT1ZFUl9WQVVMVCxDUF9SRVdBUkRTX1RPS0VOLFhCVEMsdHJ1ZSk7XG4gICAgbGV0IGJsb2NrID0gY2hhaW4ubWluZUJsb2NrKFtQYXltZW50LnNldENvbnRyYWN0T3duZXIoREFPLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pO1xuXG4gICAgYmxvY2sgPSAoY2hhaW4ubWluZUJsb2NrKFtFbWVyZ2VuY3lFeGVjdXRlLmV4ZWN1dGl2ZUFjdGlvbihgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS56Z3AwMDMtdXBkYXRlLXBheW1lbnQtZmVlYCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKSk7XG4gICAgYmxvY2sgPSAoY2hhaW4ubWluZUJsb2NrKFtFbWVyZ2VuY3lFeGVjdXRlLmV4ZWN1dGl2ZUFjdGlvbihgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS56Z3AwMDMtdXBkYXRlLXBheW1lbnQtZmVlYCwgTFBfMS5hZGRyZXNzKV0pKTtcbiAgICBibG9jayA9IChjaGFpbi5taW5lQmxvY2soW0VtZXJnZW5jeUV4ZWN1dGUuZXhlY3V0aXZlQWN0aW9uKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LnpncDAwMy11cGRhdGUtcGF5bWVudC1mZWVgLCBMUF8yLmFkZHJlc3MpXSkpO1xuICAgIFxuICAgIGJsb2NrLnJlY2VpcHRzWzBdLnJlc3VsdC5leHBlY3RPaygpLmV4cGVjdFVpbnQoMyk7XG4gICAgYmxvY2sucmVjZWlwdHNbMF0uZXZlbnRzWzFdLmNvbnRyYWN0X2V2ZW50LnZhbHVlLmV4cGVjdFR1cGxlKCkucGF5bG9hZC5leHBlY3RUdXBsZSgpLmZlZS5leHBlY3RVaW50KDIwKTtcbiAgfSxcbn0pO1xuXG5DbGFyaW5ldC50ZXN0KHtcbiAgbmFtZTogXCJFbWVyZ2VuY3kgY2Fubm90IGV4ZWN1dGUgdG8gdXBkYXRlIGxhdGUgZmVlIG9uIHBheW1lbnQgY29udHJhY3QgaWYgcG9vbCBpcyBSZWFkeVwiLFxuICBhc3luYyBmbihjaGFpbjogQ2hhaW4sIGFjY291bnRzOiBNYXA8c3RyaW5nLCBBY2NvdW50Pikge1xuICAgIGxldCBkZXBsb3llcldhbGxldCA9IGFjY291bnRzLmdldChcImRlcGxveWVyXCIpIGFzIEFjY291bnQ7XG4gICAgbGV0IExQXzEgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMVwiKSBhcyBBY2NvdW50OyAvLyBMUF8xXG4gICAgbGV0IExQXzIgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfMlwiKSBhcyBBY2NvdW50OyAvLyBMUF8yXG4gICAgbGV0IGNvdmVyID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzNcIikgYXMgQWNjb3VudDsgLy8gQ292ZXJfMVxuICAgIGxldCB3YWxsZXRfNyA9IGFjY291bnRzLmdldChcIndhbGxldF83XCIpIGFzIEFjY291bnQ7IC8vIERlbGVnYXRlXzFcbiAgICBsZXQgd2FsbGV0XzggPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfOFwiKSBhcyBBY2NvdW50OyAvLyBib3Jyb3dlcl8xXG5cbiAgICBsZXQgYXNzZXRNYXBzID0gY2hhaW4uZ2V0QXNzZXRzTWFwcygpO1xuICAgIGxldCBwb29sID0gbmV3IFBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgbG9hbiA9IG5ldyBMb2FuKGNoYWluLCBkZXBsb3llcldhbGxldCk7XG4gICAgbGV0IGNvdmVyUG9vbCA9IG5ldyBDb3ZlclBvb2woY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcblxuICAgIHBvb2wuY3JlYXRlUG9vbCh3YWxsZXRfNy5hZGRyZXNzLExQX1RPS0VOLFpQX1RPS0VOLFBBWU1FTlQsUkVXQVJEU19DQUxDLDEwMDAsMTAwMCwxMF8wMDBfMDAwXzAwMCwxMF8wMDBfMDAwXzAwMCwxLE1BWF9NQVRVUklUWV9MRU5HVEgsTElRVUlESVRZX1ZBVUxULENQX1RPS0VOLENPVkVSX1ZBVUxULENQX1JFV0FSRFNfVE9LRU4sWEJUQyx0cnVlKTtcbiAgICBwb29sLmZpbmFsaXplUG9vbCh3YWxsZXRfNy5hZGRyZXNzLCBMUF9UT0tFTiwgWlBfVE9LRU4sIENQX1RPS0VOLCAwKTtcbiAgICBsZXQgYmxvY2sgPSBjaGFpbi5taW5lQmxvY2soW1BheW1lbnQuc2V0Q29udHJhY3RPd25lcihEQU8sIGRlcGxveWVyV2FsbGV0LmFkZHJlc3MpXSk7XG5cbiAgICBibG9jayA9IChjaGFpbi5taW5lQmxvY2soW0VtZXJnZW5jeUV4ZWN1dGUuZXhlY3V0aXZlQWN0aW9uKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LnpncDAwMy11cGRhdGUtcGF5bWVudC1mZWVgLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pKTtcbiAgICBibG9jayA9IChjaGFpbi5taW5lQmxvY2soW0VtZXJnZW5jeUV4ZWN1dGUuZXhlY3V0aXZlQWN0aW9uKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LnpncDAwMy11cGRhdGUtcGF5bWVudC1mZWVgLCBMUF8xLmFkZHJlc3MpXSkpO1xuICAgIGJsb2NrID0gKGNoYWluLm1pbmVCbG9jayhbRW1lcmdlbmN5RXhlY3V0ZS5leGVjdXRpdmVBY3Rpb24oYCR7ZGVwbG95ZXJXYWxsZXQuYWRkcmVzc30uemdwMDAzLXVwZGF0ZS1wYXltZW50LWZlZWAsIExQXzIuYWRkcmVzcyldKSk7XG4gICAgXG4gICAgYmxvY2sucmVjZWlwdHNbMF0ucmVzdWx0LmV4cGVjdEVycigpLmV4cGVjdFVpbnQoNTAwNyk7XG4gIH0sXG59KTtcblxuQ2xhcmluZXQudGVzdCh7XG4gIG5hbWU6IFwiRW1lcmdlbmN5IGV4ZWN1dGUgY2FuIGFkZCBhIHBvb2wuXCIsXG4gIGFzeW5jIGZuKGNoYWluOiBDaGFpbiwgYWNjb3VudHM6IE1hcDxzdHJpbmcsIEFjY291bnQ+KSB7XG4gICAgbGV0IGRlcGxveWVyV2FsbGV0ID0gYWNjb3VudHMuZ2V0KFwiZGVwbG95ZXJcIikgYXMgQWNjb3VudDtcbiAgICBsZXQgTFBfMSA9IGFjY291bnRzLmdldChcIndhbGxldF8xXCIpIGFzIEFjY291bnQ7IC8vIExQXzFcbiAgICBsZXQgTFBfMiA9IGFjY291bnRzLmdldChcIndhbGxldF8yXCIpIGFzIEFjY291bnQ7IC8vIExQXzJcbiAgICBsZXQgY292ZXIgPSBhY2NvdW50cy5nZXQoXCJ3YWxsZXRfM1wiKSBhcyBBY2NvdW50OyAvLyBDb3Zlcl8xXG4gICAgbGV0IHdhbGxldF83ID0gYWNjb3VudHMuZ2V0KFwid2FsbGV0XzdcIikgYXMgQWNjb3VudDsgLy8gRGVsZWdhdGVfMVxuICAgIGxldCB3YWxsZXRfOCA9IGFjY291bnRzLmdldChcIndhbGxldF84XCIpIGFzIEFjY291bnQ7IC8vIGJvcnJvd2VyXzFcblxuICAgIGxldCBhc3NldE1hcHMgPSBjaGFpbi5nZXRBc3NldHNNYXBzKCk7XG4gICAgbGV0IHBvb2wgPSBuZXcgUG9vbChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuICAgIGxldCBsb2FuID0gbmV3IExvYW4oY2hhaW4sIGRlcGxveWVyV2FsbGV0KTtcbiAgICBsZXQgY292ZXJQb29sID0gbmV3IENvdmVyUG9vbChjaGFpbiwgZGVwbG95ZXJXYWxsZXQpO1xuXG4gICAgbGV0IGJsb2NrID0gcG9vbC5zZXRDb250cmFjdE93bmVyKERBTywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG4gICAgYmxvY2sgPSBHbG9iYWxzLnNldENvbnRyYWN0T3duZXIoY2hhaW4sIERBTywgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyk7XG4gICAgLy8gY29uc29sZS5sb2coYmxvY2spO1xuXG4gICAgYmxvY2sgPSAoY2hhaW4ubWluZUJsb2NrKFtFbWVyZ2VuY3lFeGVjdXRlLmV4ZWN1dGl2ZUFjdGlvbihgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS56Z3AwMDQtYWRkLXBvb2wtYWRtaW5gLCBkZXBsb3llcldhbGxldC5hZGRyZXNzKV0pKTtcbiAgICBibG9jayA9IChjaGFpbi5taW5lQmxvY2soW0VtZXJnZW5jeUV4ZWN1dGUuZXhlY3V0aXZlQWN0aW9uKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LnpncDAwNC1hZGQtcG9vbC1hZG1pbmAsIExQXzEuYWRkcmVzcyldKSk7XG4gICAgYmxvY2sgPSAoY2hhaW4ubWluZUJsb2NrKFtFbWVyZ2VuY3lFeGVjdXRlLmV4ZWN1dGl2ZUFjdGlvbihgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS56Z3AwMDQtYWRkLXBvb2wtYWRtaW5gLCBMUF8yLmFkZHJlc3MpXSkpO1xuICAgIC8vIGNvbnNvbGUubG9nKGJsb2NrLnJlY2VpcHRzWzBdLmV2ZW50cyk7XG5cbiAgICBibG9jayA9IChjaGFpbi5taW5lQmxvY2soW0VtZXJnZW5jeUV4ZWN1dGUuZXhlY3V0aXZlQWN0aW9uKGAke2RlcGxveWVyV2FsbGV0LmFkZHJlc3N9LnpncDAwNS1jcmVhdGUtcG9vbC0xYCwgZGVwbG95ZXJXYWxsZXQuYWRkcmVzcyldKSk7XG4gICAgYmxvY2sgPSAoY2hhaW4ubWluZUJsb2NrKFtFbWVyZ2VuY3lFeGVjdXRlLmV4ZWN1dGl2ZUFjdGlvbihgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS56Z3AwMDUtY3JlYXRlLXBvb2wtMWAsIExQXzEuYWRkcmVzcyldKSk7XG4gICAgYmxvY2sgPSAoY2hhaW4ubWluZUJsb2NrKFtFbWVyZ2VuY3lFeGVjdXRlLmV4ZWN1dGl2ZUFjdGlvbihgJHtkZXBsb3llcldhbGxldC5hZGRyZXNzfS56Z3AwMDUtY3JlYXRlLXBvb2wtMWAsIExQXzIuYWRkcmVzcyldKSk7XG4gICAgLy8gY29uc29sZS5sb2coYmxvY2spO1xuICAgIC8vIGNvbnNvbGUubG9nKGJsb2NrLnJlY2VpcHRzWzBdLmV2ZW50cyk7XG4gIH0sXG59KTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0I7QUFDeEIsU0FBUyxRQUFR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