(define-map txs (buff 32) { sats: uint, xbtc: uint, swapper-principal: principal })

(define-map suppliers
  principal
  {
    public-key: (buff 33),
    inbound-fee: (optional int),
    outbound-fee: (optional int),
    outbound-base-fee: int,
    inbound-base-fee: int,
    name: int,
    funds: uint
  })

(define-public (escrow-swap
    (tx (buff 1024))
    (sats uint)
    (xbtc uint)
  )
  (let (
      (txid (contract-call? .clarity-bitcoin get-txid tx))
    )
      (asserts! (map-insert txs txid { sats: sats, xbtc: xbtc, swapper-principal: contract-caller }) (err u2))
      (ok true)
  )
)


(define-public (remove-funds (amount uint))
  (let (
    (supplier (unwrap! (get-supplier contract-caller) (err u1)))
  )
    (ok supplier)
  )
)

(define-public (finalize-swap (txid (buff 32)) (preimage (buff 128)))
  (let (
    (tx (unwrap! (get-tx txid) (err u1)))
  )
    (ok tx)
  )
)

(define-public (register-supplier
    (public-key (buff 33))
    (inbound-fee (optional int))
    (outbound-fee (optional int))
    (outbound-base-fee int)
    (inbound-base-fee int)
    (name (string-ascii 18))
    (funds uint)
  )
  (ok true)
)

(define-public (add-funds (amount uint))
  (ok true)
)

(define-public (get-full-inbound (txid (buff 32)))
  (let (
    (tx (unwrap! (get-tx txid) (err u1)))
  )
    (ok tx)
  )
)

(define-read-only (get-supplier (supplier principal))
  (map-get? suppliers supplier)
)

(define-read-only (get-tx (tx-id (buff 32)))
  (map-get? txs tx-id)
)